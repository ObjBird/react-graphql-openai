/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={20:(e,t,n)=>{"use strict";var r=n(540),i=Symbol.for("react.element"),o=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,o={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:i,type:e,key:u,ref:c,props:o,_owner:s.current}}t.Fragment=o,t.jsx=u,t.jsxs=u},56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=o[u]||0,f="".concat(u," ").concat(c);o[u]=c+1;var d=n(f),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var l=r(e,i),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=l}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},133:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=null;if(!e||"string"!=typeof e)return n;var r=(0,i.default)(e),o="function"==typeof t;return r.forEach((function(e){if("declaration"===e.type){var r=e.property,i=e.value;o?t(r,i,e):i&&((n=n||{})[r]=i)}})),n};var i=r(n(788))},159:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},208:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([e.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, \n    Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background-color: #f7f9fc;\n  color: #333;\n  line-height: 1.6;\n  min-height: 100vh;\n  position: relative;\n  background: linear-gradient(135deg, #f7f9fc 0%, #eef1fa 100%);\n}\n\nbody::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 400px;\n  height: 400px;\n  background: radial-gradient(circle at center, rgba(124, 77, 255, 0.1) 0%, rgba(124, 77, 255, 0) 70%);\n  z-index: -1;\n}\n\nbody::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 300px;\n  height: 300px;\n  background: radial-gradient(circle at center, rgba(5, 194, 172, 0.1) 0%, rgba(5, 194, 172, 0) 70%);\n  z-index: -1;\n}\n\n.container {\n  max-width: 900px;\n  margin: 0 auto;\n  padding: 2rem;\n  position: relative;\n  z-index: 1;\n}\n\nbutton {\n  cursor: pointer;\n  padding: 0.7rem 1.2rem;\n  background-color: #7c4dff;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  line-height: 1.4;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: #651fff;\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(124, 77, 255, 0.3);\n}\n\nbutton:active:not(:disabled) {\n  transform: translateY(0);\n}\n\nbutton:disabled {\n  background-color: #a0aec0;\n  cursor: not-allowed;\n}\n\n.loading {\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  border: 2px solid rgba(255, 255, 255, 0.5);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s ease-in-out infinite;\n  margin-left: 8px;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* 自定义滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #c4c9d4;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #7c4dff;\n} ","",{version:3,sources:["webpack://./src/styles/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE;wDACsD;EACtD,yBAAyB;EACzB,WAAW;EACX,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,6DAA6D;AAC/D;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,YAAY;EACZ,aAAa;EACb,oGAAoG;EACpG,WAAW;AACb;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,SAAS;EACT,OAAO;EACP,YAAY;EACZ,aAAa;EACb,kGAAkG;EAClG,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,aAAa;EACb,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,eAAe;EACf,sBAAsB;EACtB,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,yBAAyB;EACzB,gBAAgB;EAChB,oBAAoB;EACpB,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,2BAA2B;EAC3B,8CAA8C;AAChD;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,0CAA0C;EAC1C,kBAAkB;EAClB,uBAAuB;EACvB,uCAAuC;EACvC,gBAAgB;AAClB;;AAEA;EACE,KAAK,yBAAyB,EAAE;AAClC;;AAEA,aAAa;AACb;EACE,UAAU;EACV,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, \n    Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background-color: #f7f9fc;\n  color: #333;\n  line-height: 1.6;\n  min-height: 100vh;\n  position: relative;\n  background: linear-gradient(135deg, #f7f9fc 0%, #eef1fa 100%);\n}\n\nbody::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 400px;\n  height: 400px;\n  background: radial-gradient(circle at center, rgba(124, 77, 255, 0.1) 0%, rgba(124, 77, 255, 0) 70%);\n  z-index: -1;\n}\n\nbody::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 300px;\n  height: 300px;\n  background: radial-gradient(circle at center, rgba(5, 194, 172, 0.1) 0%, rgba(5, 194, 172, 0) 70%);\n  z-index: -1;\n}\n\n.container {\n  max-width: 900px;\n  margin: 0 auto;\n  padding: 2rem;\n  position: relative;\n  z-index: 1;\n}\n\nbutton {\n  cursor: pointer;\n  padding: 0.7rem 1.2rem;\n  background-color: #7c4dff;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  line-height: 1.4;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: #651fff;\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(124, 77, 255, 0.3);\n}\n\nbutton:active:not(:disabled) {\n  transform: translateY(0);\n}\n\nbutton:disabled {\n  background-color: #a0aec0;\n  cursor: not-allowed;\n}\n\n.loading {\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  border: 2px solid rgba(255, 255, 255, 0.5);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s ease-in-out infinite;\n  margin-left: 8px;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* 自定义滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #c4c9d4;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #7c4dff;\n} "],sourceRoot:""}]);const s=a},229:function(e,t,n){"use strict";var r=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(n(133)),i=n(917);function o(e,t){var n={};return e&&"string"==typeof e?((0,r.default)(e,(function(e,r){e&&r&&(n[(0,i.camelCase)(e,t)]=r)})),n):n}o.default=o,e.exports=o},243:(e,t,n)=>{"use strict";e.exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=void 0,e.exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=void 0,e.exports.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=void 0,Object.assign(e.exports,n(540))},287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var A=b.prototype=new g;A.constructor=b,m(A,v.prototype),A.isPureReactComponent=!0;var k=Array.isArray,E=Object.prototype.hasOwnProperty,x={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,i)&&!w.hasOwnProperty(i)&&(o[i]=t[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:n,type:e,key:a,ref:s,props:o,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,i,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===o?"."+T(l,0):o,k(a)?(i="",null!=e&&(i=e.replace(_,"$&/")+"/"),O(a,t,i,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(_,"$&/")+"/")+e)),t.push(a)),1;if(l=0,o=""===o?".":o+":",k(e))for(var u=0;u<e.length;u++){var c=o+T(s=e[u],u);l+=O(s,t,i,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=O(s=s.value,t,i,c=o+T(s,u++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function I(e,t,n){if(null==e)return e;var r=[],i=0;return O(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},B={transition:null},P={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:B,ReactCurrentOwner:x};function R(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:I,forEach:function(e,t,n){I(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=i,t.Profiler=a,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.act=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=m({},e.props),o=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)E.call(t,u)&&!w.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:n,type:e.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=B.transition;B.transition={};try{e()}finally{B.transition=t}},t.unstable_act=R,t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,n){return D.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,n){return D.current.useReducer(e,t,n)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return D.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return D.current.useTransition()},t.version="18.3.1"},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},338:(e,t,n)=>{"use strict";var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<o(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,a=i>>>1;r<a;){var s=2*(r+1)-1,l=e[s],u=s+1,c=e[u];if(0>o(l,n))u<i&&0>o(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else{if(!(u<i&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],f=1,d=null,p=3,h=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function k(e){if(y=!1,A(e),!m)if(null!==r(u))m=!0,B(E);else{var t=r(c);null!==t&&P(k,t.startTime-e)}}function E(e,n){m=!1,y&&(y=!1,g(S),S=-1),h=!0;var o=p;try{for(A(n),d=r(u);null!==d&&(!(d.expirationTime>n)||e&&!O());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var s=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?d.callback=s:d===r(u)&&i(u),A(n)}else i(u);d=r(u)}if(null!==d)var l=!0;else{var f=r(c);null!==f&&P(k,f.startTime-n),l=!1}return l}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,w=!1,C=null,S=-1,_=5,T=-1;function O(){return!(t.unstable_now()-T<_)}function I(){if(null!==C){var e=t.unstable_now();T=e;var n=!0;try{n=C(!0,e)}finally{n?x():(w=!1,C=null)}}else w=!1}if("function"==typeof b)x=function(){b(I)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,D=N.port2;N.port1.onmessage=I,x=function(){D.postMessage(null)}}else x=function(){v(I,0)};function B(e){C=e,w||(w=!0,x())}function P(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,B(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,i,o){var a=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:f++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(y?(g(S),S=-1):y=!0,P(k,o-a))):(e.sortIndex=s,n(u,e),m||h||(m=!0,B(E))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{"use strict";e.exports=n(287)},551:(e,t,n)=>{"use strict";var r=n(540),i=n(982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var i=y.hasOwnProperty(t)?y[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),E=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),_=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),I=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var B=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var P=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var F,L=Object.assign;function M(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var z=!1;function j(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var l="\n"+i[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function V(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case E:return"Portal";case C:return"Profiler";case w:return"StrictMode";case O:return"Suspense";case I:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(t=e.displayName||null)?t:q(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return q(t);case 8:return t===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function $(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return L({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function G(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&$(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return L({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function oe(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ye(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,xe=null,we=null;function Ce(e){if(e=bi(e)){if("function"!=typeof Ee)throw Error(o(280));var t=e.stateNode;t&&(t=ki(t),Ee(e.stateNode,e.type,t))}}function Se(e){xe?we?we.push(e):we=[e]:xe=e}function _e(){if(xe){var e=xe,t=we;if(we=xe=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Te(e,t){return e(t)}function Oe(){}var Ie=!1;function Ne(e,t,n){if(Ie)return e(t,n);Ie=!0;try{return Te(e,t,n)}finally{Ie=!1,(null!==xe||null!==we)&&(Oe(),_e())}}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=ki(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Be=!1;if(c)try{var Pe={};Object.defineProperty(Pe,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Pe,Pe),window.removeEventListener("test",Pe,Pe)}catch(ce){Be=!1}function Re(e,t,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Fe=!1,Le=null,Me=!1,ze=null,je={onError:function(e){Fe=!0,Le=e}};function Ve(e,t,n,r,i,o,a,s,l){Fe=!1,Le=null,Re.apply(je,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Qe(e){if(qe(e)!==e)throw Error(o(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return Qe(i),e;if(a===r)return Qe(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var Ye=i.unstable_scheduleCallback,$e=i.unstable_cancelCallback,Ke=i.unstable_shouldYield,Ge=i.unstable_requestPaint,Xe=i.unstable_now,Je=i.unstable_getCurrentPriorityLevel,Ze=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,ot=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~i;0!==s?r=ft(s):0!=(o&=a)&&(r=ft(o))}else 0!=(a=n&~i)?r=ft(a):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&i)&&((i=r&-r)>=(o=t&-t)||16===i&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-at(t)),r|=e[n],t&=~i;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var bt=0;function At(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var kt,Et,xt,wt,Ct,St=!1,_t=[],Tt=null,Ot=null,It=null,Nt=new Map,Dt=new Map,Bt=[],Pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":It=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function Ft(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==t&&null!==(t=bi(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Lt(e){var t=gi(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void Ct(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bi(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function zt(e,t,n){Mt(e)&&n.delete(t)}function jt(){St=!1,null!==Tt&&Mt(Tt)&&(Tt=null),null!==Ot&&Mt(Ot)&&(Ot=null),null!==It&&Mt(It)&&(It=null),Nt.forEach(zt),Dt.forEach(zt)}function Vt(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,jt)))}function qt(e){function t(t){return Vt(t,e)}if(0<_t.length){Vt(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&Vt(Tt,e),null!==Ot&&Vt(Ot,e),null!==It&&Vt(It,e),Nt.forEach(t),Dt.forEach(t),n=0;n<Bt.length;n++)(r=Bt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Bt.length&&null===(n=Bt[0]).blockedOn;)Lt(n),null===n.blockedOn&&Bt.shift()}var Ut=A.ReactCurrentBatchConfig,Qt=!0;function Wt(e,t,n,r){var i=bt,o=Ut.transition;Ut.transition=null;try{bt=1,Yt(e,t,n,r)}finally{bt=i,Ut.transition=o}}function Ht(e,t,n,r){var i=bt,o=Ut.transition;Ut.transition=null;try{bt=4,Yt(e,t,n,r)}finally{bt=i,Ut.transition=o}}function Yt(e,t,n,r){if(Qt){var i=Kt(e,t,n,r);if(null===i)Qr(e,t,r,$t,n),Rt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Tt=Ft(Tt,e,t,n,r,i),!0;case"dragenter":return Ot=Ft(Ot,e,t,n,r,i),!0;case"mouseover":return It=Ft(It,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Nt.set(o,Ft(Nt.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Dt.set(o,Ft(Dt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(Rt(e,r),4&t&&-1<Pt.indexOf(e)){for(;null!==i;){var o=bi(i);if(null!==o&&kt(o),null===(o=Kt(e,t,n,r))&&Qr(e,t,r,$t,n),o===i)break;i=o}null!==i&&r.stopPropagation()}else Qr(e,t,r,null,n)}}var $t=null;function Kt(e,t,n,r){if($t=null,null!==(e=gi(e=ke(r))))if(null===(t=qe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return $t=e,null}function Gt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,i="value"in Xt?Xt.value:Xt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Zt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),fn=L({},un,{view:0,detail:0}),dn=on(fn),pn=L({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(pn),mn=on(L({},pn,{dataTransfer:0})),yn=on(L({},fn,{relatedTarget:0})),vn=on(L({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=L({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),An=on(L({},un,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Cn(){return wn}var Sn=L({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=on(Sn),Tn=on(L({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=on(L({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),In=on(L({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=L({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Dn=on(Nn),Bn=[9,13,27,32],Pn=c&&"CompositionEvent"in window,Rn=null;c&&"documentMode"in document&&(Rn=document.documentMode);var Fn=c&&"TextEvent"in window&&!Rn,Ln=c&&(!Pn||Rn&&8<Rn&&11>=Rn),Mn=String.fromCharCode(32),zn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Wn(e,t,n,r){Se(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Yn=null;function $n(e){Mr(e,0)}function Kn(e){if(Y(Ai(e)))return e}function Gn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Yn=Hn=null)}function nr(e){if("value"===e.propertyName&&Kn(Yn)){var t=[];Wn(t,Yn,e,ke(e)),Ne($n,t)}}function rr(e,t,n){"focusin"===e?(tr(),Yn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Yn)}function or(e,t){if("click"===e)return Kn(t)}function ar(e,t){if("input"===e||"change"===e)return Kn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!f.call(t,i)||!sr(e[i],t[i]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=$();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=$((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=cr(n,o);var a=cr(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,gr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==yr||yr!==$(r)||(r="selectionStart"in(r=yr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Hr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},xr={},wr={};function Cr(e){if(xr[e])return xr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in wr)return xr[e]=n[t];return e}c&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Sr=Cr("animationend"),_r=Cr("animationiteration"),Tr=Cr("animationstart"),Or=Cr("transitionend"),Ir=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dr(e,t){Ir.set(e,t),l(t,[e])}for(var Br=0;Br<Nr.length;Br++){var Pr=Nr[Br];Dr(Pr.toLowerCase(),"on"+(Pr[0].toUpperCase()+Pr.slice(1)))}Dr(Sr,"onAnimationEnd"),Dr(_r,"onAnimationIteration"),Dr(Tr,"onAnimationStart"),Dr("dblclick","onDoubleClick"),Dr("focusin","onFocus"),Dr("focusout","onBlur"),Dr(Or,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Lr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,a,s,l,u){if(Ve.apply(this,arguments),Fe){if(!Fe)throw Error(o(198));var c=Le;Fe=!1,Le=null,Me||(Me=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Lr(i,s,u),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Lr(i,s,u),o=l}}}if(Me)throw e=ze,Me=!1,ze=null,e}function zr(e,t){var n=t[mi];void 0===n&&(n=t[mi]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function qr(e){if(!e[Vr]){e[Vr]=!0,a.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Vr]||(t[Vr]=!0,jr("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Gt(t)){case 1:var i=Wt;break;case 4:i=Ht;break;default:i=Yt}n=i.bind(null,t,n,e),i=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Qr(e,t,n,r,i){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=gi(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}Ne((function(){var r=o,i=ke(n),a=[];e:{var s=Ir.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=_n;break;case"focusin":u="focus",l=yn;break;case"focusout":u="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=On;break;case Sr:case _r:case Tr:l=vn;break;case Or:l=In;break;case"scroll":l=dn;break;case"wheel":l=Dn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Wr(h,m,p))),f)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,i),a.push({event:s,listeners:c}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Ae||!(u=n.relatedTarget||n.fromElement)||!gi(u)&&!u[hi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?gi(u):null)&&(u!==(f=qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?s:Ai(l),p=null==u?s:Ai(u),(s=new c(m,h+"leave",l,n,i)).target=f,s.relatedTarget=p,m=null,gi(i)===r&&((c=new c(d,h+"enter",u,n,i)).target=p,c.relatedTarget=f,m=c),f=m,l&&u)e:{for(d=u,h=0,p=c=l;p;p=Yr(p))h++;for(p=0,m=d;m;m=Yr(m))p++;for(;0<h-p;)c=Yr(c),h--;for(;0<p-h;)d=Yr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Yr(c),d=Yr(d)}c=null}else c=null;null!==l&&$r(a,s,l,c,!1),null!==u&&null!==f&&$r(a,f,u,c,!0)}if("select"===(l=(s=r?Ai(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var y=Gn;else if(Qn(s))if(Xn)y=ar;else{y=ir;var v=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(y=or);switch(y&&(y=y(e,r))?Wn(a,y,n,i):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ee(s,"number",s.value)),v=r?Ai(r):window,e){case"focusin":(Qn(v)||"true"===v.contentEditable)&&(yr=v,vr=r,gr=null);break;case"focusout":gr=vr=yr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(a,n,i);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Ar(a,n,i)}var g;if(Pn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else qn?jn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(qn||"onCompositionStart"!==b?"onCompositionEnd"===b&&qn&&(g=en()):(Jt="value"in(Xt=i)?Xt.value:Xt.textContent,qn=!0)),0<(v=Hr(r,b)).length&&(b=new An(b,e,null,n,i),a.push({event:b,listeners:v}),(g||null!==(g=Vn(n)))&&(b.data=g))),(g=Fn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(zn=!0,Mn);case"textInput":return(e=t.data)===Mn&&zn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!Pn&&jn(e,t)?(e=en(),Zt=Jt=Xt=null,qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(i=new An("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=g)}Mr(a,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=De(e,n))&&r.unshift(Wr(e,o,i)),null!=(o=De(e,t))&&r.push(Wr(e,o,i))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function $r(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=De(n,o))&&a.unshift(Wr(n,l,s)):i||null!=(l=De(n,o))&&a.push(Wr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Kr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Gr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void qt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);qt(t)}function ui(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ci(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fi=Math.random().toString(36).slice(2),di="__reactFiber$"+fi,pi="__reactProps$"+fi,hi="__reactContainer$"+fi,mi="__reactEvents$"+fi,yi="__reactListeners$"+fi,vi="__reactHandles$"+fi;function gi(e){var t=e[di];if(t)return t;for(var n=e.parentNode;n;){if(t=n[hi]||n[di]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ci(e);null!==e;){if(n=e[di])return n;e=ci(e)}return t}n=(e=n).parentNode}return null}function bi(e){return!(e=e[di]||e[hi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ai(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ki(e){return e[pi]||null}var Ei=[],xi=-1;function wi(e){return{current:e}}function Ci(e){0>xi||(e.current=Ei[xi],Ei[xi]=null,xi--)}function Si(e,t){xi++,Ei[xi]=e.current,e.current=t}var _i={},Ti=wi(_i),Oi=wi(!1),Ii=_i;function Ni(e,t){var n=e.type.contextTypes;if(!n)return _i;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Di(e){return null!=e.childContextTypes}function Bi(){Ci(Oi),Ci(Ti)}function Pi(e,t,n){if(Ti.current!==_i)throw Error(o(168));Si(Ti,t),Si(Oi,n)}function Ri(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(o(108,U(e)||"Unknown",i));return L({},n,r)}function Fi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_i,Ii=Ti.current,Si(Ti,e),Si(Oi,Oi.current),!0}function Li(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ri(e,t,Ii),r.__reactInternalMemoizedMergedChildContext=e,Ci(Oi),Ci(Ti),Si(Ti,e)):Ci(Oi),Si(Oi,n)}var Mi=null,zi=!1,ji=!1;function Vi(e){null===Mi?Mi=[e]:Mi.push(e)}function qi(){if(!ji&&null!==Mi){ji=!0;var e=0,t=bt;try{var n=Mi;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mi=null,zi=!1}catch(t){throw null!==Mi&&(Mi=Mi.slice(e+1)),Ye(Ze,qi),t}finally{bt=t,ji=!1}}return null}var Ui=[],Qi=0,Wi=null,Hi=0,Yi=[],$i=0,Ki=null,Gi=1,Xi="";function Ji(e,t){Ui[Qi++]=Hi,Ui[Qi++]=Wi,Wi=e,Hi=t}function Zi(e,t,n){Yi[$i++]=Gi,Yi[$i++]=Xi,Yi[$i++]=Ki,Ki=e;var r=Gi;e=Xi;var i=32-at(r)-1;r&=~(1<<i),n+=1;var o=32-at(t)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Gi=1<<32-at(t)+i|n<<i|r,Xi=o+e}else Gi=1<<o|n<<i|r,Xi=e}function eo(e){null!==e.return&&(Ji(e,1),Zi(e,1,0))}function to(e){for(;e===Wi;)Wi=Ui[--Qi],Ui[Qi]=null,Hi=Ui[--Qi],Ui[Qi]=null;for(;e===Ki;)Ki=Yi[--$i],Yi[$i]=null,Xi=Yi[--$i],Yi[$i]=null,Gi=Yi[--$i],Yi[$i]=null}var no=null,ro=null,io=!1,oo=null;function ao(e,t){var n=Nu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function so(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ui(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ki?{id:Gi,overflow:Xi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Nu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function lo(e){return!(!(1&e.mode)||128&e.flags)}function uo(e){if(io){var t=ro;if(t){var n=t;if(!so(e,t)){if(lo(e))throw Error(o(418));t=ui(n.nextSibling);var r=no;t&&so(e,t)?ao(r,n):(e.flags=-4097&e.flags|2,io=!1,no=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!io)return co(e),io=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ro)){if(lo(e))throw po(),Error(o(418));for(;t;)ao(e,t),t=ui(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ui(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ui(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=ui(e.nextSibling)}function ho(){ro=no=null,io=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var yo=A.ReactCurrentBatchConfig;function vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=i.refs;null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function Ao(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Bu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Lu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===x?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===D&&bo(o)===t.type)?((r=i(t,n.props)).ref=vo(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=vo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Mu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ru(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Lu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=vo(e,null,t),n.return=e,n;case E:return(t=Mu(t,e.mode,n)).return=e,t;case D:return d(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Ru(t,e.mode,n,null)).return=e,t;go(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===i?u(e,t,n,r):null;case E:return n.key===i?c(e,t,n,r):null;case D:return p(e,t,(i=n._init)(n._payload),r)}if(te(n)||R(n))return null!==i?null:f(e,t,n,r,null);go(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case D:return h(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||R(r))return f(t,e=e.get(n)||null,r,i,null);go(t,r)}return null}function m(i,o,s,l){for(var u=null,c=null,f=o,m=o=0,y=null;null!==f&&m<s.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(i,f,s[m],l);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(i,f),o=a(v,o,m),null===c?u=v:c.sibling=v,c=v,f=y}if(m===s.length)return n(i,f),io&&Ji(i,m),u;if(null===f){for(;m<s.length;m++)null!==(f=d(i,s[m],l))&&(o=a(f,o,m),null===c?u=f:c.sibling=f,c=f);return io&&Ji(i,m),u}for(f=r(i,f);m<s.length;m++)null!==(y=h(f,i,m,s[m],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),o=a(y,o,m),null===c?u=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(i,e)})),io&&Ji(i,m),u}function y(i,s,l,u){var c=R(l);if("function"!=typeof c)throw Error(o(150));if(null==(l=c.call(l)))throw Error(o(151));for(var f=c=null,m=s,y=s=0,v=null,g=l.next();null!==m&&!g.done;y++,g=l.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(i,m,g.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(i,m),s=a(b,s,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(i,m),io&&Ji(i,y),c;if(null===m){for(;!g.done;y++,g=l.next())null!==(g=d(i,g.value,u))&&(s=a(g,s,y),null===f?c=g:f.sibling=g,f=g);return io&&Ji(i,y),c}for(m=r(i,m);!g.done;y++,g=l.next())null!==(g=h(m,i,y,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),s=a(g,s,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(i,e)})),io&&Ji(i,y),c}return function e(r,o,a,l){if("object"==typeof a&&null!==a&&a.type===x&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case k:e:{for(var u=a.key,c=o;null!==c;){if(c.key===u){if((u=a.type)===x){if(7===c.tag){n(r,c.sibling),(o=i(c,a.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===D&&bo(u)===c.type){n(r,c.sibling),(o=i(c,a.props)).ref=vo(r,c,a),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===x?((o=Ru(a.props.children,r.mode,l,a.key)).return=r,r=o):((l=Pu(a.type,a.key,a.props,null,r.mode,l)).ref=vo(r,o,a),l.return=r,r=l)}return s(r);case E:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Mu(a,r.mode,l)).return=r,r=o}return s(r);case D:return e(r,o,(c=a._init)(a._payload),l)}if(te(a))return m(r,o,a,l);if(R(a))return y(r,o,a,l);go(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(n(r,o.sibling),(o=i(o,a)).return=r,r=o):(n(r,o),(o=Lu(a,r.mode,l)).return=r,r=o),s(r)):n(r,o)}}var ko=Ao(!0),Eo=Ao(!1),xo=wi(null),wo=null,Co=null,So=null;function _o(){So=Co=wo=null}function To(e){var t=xo.current;Ci(xo),e._currentValue=t}function Oo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Io(e,t){wo=e,So=Co=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bs=!0),e.firstContext=null)}function No(e){var t=e._currentValue;if(So!==e)if(e={context:e,memoizedValue:t,next:null},null===Co){if(null===wo)throw Error(o(308));Co=e,wo.dependencies={lanes:0,firstContext:e}}else Co=Co.next=e;return t}var Do=null;function Bo(e){null===Do?Do=[e]:Do.push(e)}function Po(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,Bo(t)):(n.next=i.next,i.next=n),t.interleaved=n,Ro(e,r)}function Ro(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Fo=!1;function Lo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Mo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function zo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function jo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Tl){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Ro(e,n)}return null===(i=r.interleaved)?(t.next=t,Bo(r)):(t.next=i.next,i.next=t),r.interleaved=t,Ro(e,n)}function Vo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function qo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Uo(e,t,n,r){var i=e.updateQueue;Fo=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,u=l.next;l.next=null,null===a?o=u:a.next=u,a=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==o){var f=i.baseState;for(a=0,c=u=l=null,s=o;;){var d=s.lane,p=s.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,m=s;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=L({},f,d);break e;case 2:Fo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(d=i.effects)?i.effects=[s]:d.push(s))}else p={eventTime:p,lane:d,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=p,l=f):c=c.next=p,a|=d;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(d=s).next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}if(null===c&&(l=f),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null!==(t=i.shared.interleaved)){i=t;do{a|=i.lane,i=i.next}while(i!==t)}else null===o&&(i.shared.lanes=0);Fl|=a,e.lanes=a,e.memoizedState=f}}function Qo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var Wo={},Ho=wi(Wo),Yo=wi(Wo),$o=wi(Wo);function Ko(e){if(e===Wo)throw Error(o(174));return e}function Go(e,t){switch(Si($o,t),Si(Yo,e),Si(Ho,Wo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ci(Ho),Si(Ho,t)}function Xo(){Ci(Ho),Ci(Yo),Ci($o)}function Jo(e){Ko($o.current);var t=Ko(Ho.current),n=le(t,e.type);t!==n&&(Si(Yo,e),Si(Ho,n))}function Zo(e){Yo.current===e&&(Ci(Ho),Ci(Yo))}var ea=wi(0);function ta(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var na=[];function ra(){for(var e=0;e<na.length;e++)na[e]._workInProgressVersionPrimary=null;na.length=0}var ia=A.ReactCurrentDispatcher,oa=A.ReactCurrentBatchConfig,aa=0,sa=null,la=null,ua=null,ca=!1,fa=!1,da=0,pa=0;function ha(){throw Error(o(321))}function ma(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ya(e,t,n,r,i,a){if(aa=a,sa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ia.current=null===e||null===e.memoizedState?Za:es,e=n(r,i),fa){a=0;do{if(fa=!1,da=0,25<=a)throw Error(o(301));a+=1,ua=la=null,t.updateQueue=null,ia.current=ts,e=n(r,i)}while(fa)}if(ia.current=Ja,t=null!==la&&null!==la.next,aa=0,ua=la=sa=null,ca=!1,t)throw Error(o(300));return e}function va(){var e=0!==da;return da=0,e}function ga(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ua?sa.memoizedState=ua=e:ua=ua.next=e,ua}function ba(){if(null===la){var e=sa.alternate;e=null!==e?e.memoizedState:null}else e=la.next;var t=null===ua?sa.memoizedState:ua.next;if(null!==t)ua=t,la=e;else{if(null===e)throw Error(o(310));e={memoizedState:(la=e).memoizedState,baseState:la.baseState,baseQueue:la.baseQueue,queue:la.queue,next:null},null===ua?sa.memoizedState=ua=e:ua=ua.next=e}return ua}function Aa(e,t){return"function"==typeof t?t(e):t}function ka(e){var t=ba(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=la,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){a=i.next,r=r.baseState;var l=s=null,u=null,c=a;do{var f=c.lane;if((aa&f)===f)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=d,s=r):u=u.next=d,sa.lanes|=f,Fl|=f}c=c.next}while(null!==c&&c!==a);null===u?s=r:u.next=l,sr(r,t.memoizedState)||(bs=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{a=i.lane,sa.lanes|=a,Fl|=a,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ea(e){var t=ba(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);sr(a,t.memoizedState)||(bs=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function xa(){}function wa(e,t){var n=sa,r=ba(),i=t(),a=!sr(r.memoizedState,i);if(a&&(r.memoizedState=i,bs=!0),r=r.queue,Fa(_a.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ua&&1&ua.memoizedState.tag){if(n.flags|=2048,Na(9,Sa.bind(null,n,r,i,t),void 0,null),null===Ol)throw Error(o(349));30&aa||Ca(n,t,i)}return i}function Ca(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=sa.updateQueue)?(t={lastEffect:null,stores:null},sa.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Sa(e,t,n,r){t.value=n,t.getSnapshot=r,Ta(t)&&Oa(e)}function _a(e,t,n){return n((function(){Ta(t)&&Oa(e)}))}function Ta(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Oa(e){var t=Ro(e,1);null!==t&&nu(t,e,1,-1)}function Ia(e){var t=ga();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Aa,lastRenderedState:e},t.queue=e,e=e.dispatch=$a.bind(null,sa,e),[t.memoizedState,e]}function Na(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=sa.updateQueue)?(t={lastEffect:null,stores:null},sa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Da(){return ba().memoizedState}function Ba(e,t,n,r){var i=ga();sa.flags|=e,i.memoizedState=Na(1|t,n,void 0,void 0===r?null:r)}function Pa(e,t,n,r){var i=ba();r=void 0===r?null:r;var o=void 0;if(null!==la){var a=la.memoizedState;if(o=a.destroy,null!==r&&ma(r,a.deps))return void(i.memoizedState=Na(t,n,o,r))}sa.flags|=e,i.memoizedState=Na(1|t,n,o,r)}function Ra(e,t){return Ba(8390656,8,e,t)}function Fa(e,t){return Pa(2048,8,e,t)}function La(e,t){return Pa(4,2,e,t)}function Ma(e,t){return Pa(4,4,e,t)}function za(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ja(e,t,n){return n=null!=n?n.concat([e]):null,Pa(4,4,za.bind(null,t,e),n)}function Va(){}function qa(e,t){var n=ba();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ma(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ua(e,t){var n=ba();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ma(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Qa(e,t,n){return 21&aa?(sr(n,t)||(n=mt(),sa.lanes|=n,Fl|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bs=!0),e.memoizedState=n)}function Wa(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=oa.transition;oa.transition={};try{e(!1),t()}finally{bt=n,oa.transition=r}}function Ha(){return ba().memoizedState}function Ya(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ka(e)?Ga(t,n):null!==(n=Po(e,t,n,r))&&(nu(n,e,r,eu()),Xa(n,t,r))}function $a(e,t,n){var r=tu(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ka(e))Ga(t,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,a)){var l=t.interleaved;return null===l?(i.next=i,Bo(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=Po(e,t,i,r))&&(nu(n,e,r,i=eu()),Xa(n,t,r))}}function Ka(e){var t=e.alternate;return e===sa||null!==t&&t===sa}function Ga(e,t){fa=ca=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Xa(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Ja={readContext:No,useCallback:ha,useContext:ha,useEffect:ha,useImperativeHandle:ha,useInsertionEffect:ha,useLayoutEffect:ha,useMemo:ha,useReducer:ha,useRef:ha,useState:ha,useDebugValue:ha,useDeferredValue:ha,useTransition:ha,useMutableSource:ha,useSyncExternalStore:ha,useId:ha,unstable_isNewReconciler:!1},Za={readContext:No,useCallback:function(e,t){return ga().memoizedState=[e,void 0===t?null:t],e},useContext:No,useEffect:Ra,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ba(4194308,4,za.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ba(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ba(4,2,e,t)},useMemo:function(e,t){var n=ga();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ga();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Ya.bind(null,sa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ga().memoizedState=e},useState:Ia,useDebugValue:Va,useDeferredValue:function(e){return ga().memoizedState=e},useTransition:function(){var e=Ia(!1),t=e[0];return e=Wa.bind(null,e[1]),ga().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=sa,i=ga();if(io){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Ol)throw Error(o(349));30&aa||Ca(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,Ra(_a.bind(null,r,a,e),[e]),r.flags|=2048,Na(9,Sa.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=ga(),t=Ol.identifierPrefix;if(io){var n=Xi;t=":"+t+"R"+(n=(Gi&~(1<<32-at(Gi)-1)).toString(32)+n),0<(n=da++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},es={readContext:No,useCallback:qa,useContext:No,useEffect:Fa,useImperativeHandle:ja,useInsertionEffect:La,useLayoutEffect:Ma,useMemo:Ua,useReducer:ka,useRef:Da,useState:function(){return ka(Aa)},useDebugValue:Va,useDeferredValue:function(e){return Qa(ba(),la.memoizedState,e)},useTransition:function(){return[ka(Aa)[0],ba().memoizedState]},useMutableSource:xa,useSyncExternalStore:wa,useId:Ha,unstable_isNewReconciler:!1},ts={readContext:No,useCallback:qa,useContext:No,useEffect:Fa,useImperativeHandle:ja,useInsertionEffect:La,useLayoutEffect:Ma,useMemo:Ua,useReducer:Ea,useRef:Da,useState:function(){return Ea(Aa)},useDebugValue:Va,useDeferredValue:function(e){var t=ba();return null===la?t.memoizedState=e:Qa(t,la.memoizedState,e)},useTransition:function(){return[Ea(Aa)[0],ba().memoizedState]},useMutableSource:xa,useSyncExternalStore:wa,useId:Ha,unstable_isNewReconciler:!1};function ns(e,t){if(e&&e.defaultProps){for(var n in t=L({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rs(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var is={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),o=zo(r,i);o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,i))&&(nu(t,e,i,r),Vo(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),o=zo(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,i))&&(nu(t,e,i,r),Vo(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),i=zo(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=jo(e,i,r))&&(nu(t,e,r,n),Vo(t,e,r))}};function os(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function as(e,t,n){var r=!1,i=_i,o=t.contextType;return"object"==typeof o&&null!==o?o=No(o):(i=Di(t)?Ii:Ti.current,o=(r=null!=(r=t.contextTypes))?Ni(e,i):_i),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=is,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function ss(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&is.enqueueReplaceState(t,t.state,null)}function ls(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs={},Lo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=No(o):(o=Di(t)?Ii:Ti.current,i.context=Ni(e,o)),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(rs(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&is.enqueueReplaceState(i,i.state,null),Uo(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function us(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function cs(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ds="function"==typeof WeakMap?WeakMap:Map;function ps(e,t,n){(n=zo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ql||(Ql=!0,Wl=r),fs(0,t)},n}function hs(e,t,n){(n=zo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){fs(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fs(0,t),"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ds;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Cu.bind(null,e,t,n),t.then(e,e))}function ys(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vs(e,t,n,r,i){return 1&e.mode?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=zo(-1,1)).tag=2,jo(n,t,1))),n.lanes|=1),e)}var gs=A.ReactCurrentOwner,bs=!1;function As(e,t,n,r){t.child=null===e?Eo(t,null,n,r):ko(t,e.child,n,r)}function ks(e,t,n,r,i){n=n.render;var o=t.ref;return Io(t,i),r=ya(e,t,n,r,o,i),n=va(),null===e||bs?(io&&n&&eo(t),t.flags|=1,As(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Qs(e,t,i))}function Es(e,t,n,r,i){if(null===e){var o=n.type;return"function"!=typeof o||Du(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,xs(e,t,o,r,i))}if(o=e.child,!(e.lanes&i)){var a=o.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return Qs(e,t,i)}return t.flags|=1,(e=Bu(o,r)).ref=t.ref,e.return=t,t.child=e}function xs(e,t,n,r,i){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===t.ref){if(bs=!1,t.pendingProps=r=o,!(e.lanes&i))return t.lanes=e.lanes,Qs(e,t,i);131072&e.flags&&(bs=!0)}}return Ss(e,t,n,r,i)}function ws(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Si(Bl,Dl),Dl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Si(Bl,Dl),Dl|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Si(Bl,Dl),Dl|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Si(Bl,Dl),Dl|=r;return As(e,t,i,n),t.child}function Cs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ss(e,t,n,r,i){var o=Di(n)?Ii:Ti.current;return o=Ni(t,o),Io(t,i),n=ya(e,t,n,r,o,i),r=va(),null===e||bs?(io&&r&&eo(t),t.flags|=1,As(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Qs(e,t,i))}function _s(e,t,n,r,i){if(Di(n)){var o=!0;Fi(t)}else o=!1;if(Io(t,i),null===t.stateNode)Us(e,t),as(t,n,r),ls(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?No(u):Ni(t,u=Di(n)?Ii:Ti.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&ss(t,a,r,u),Fo=!1;var d=t.memoizedState;a.state=d,Uo(t,r,a,i),l=t.memoizedState,s!==r||d!==l||Oi.current||Fo?("function"==typeof c&&(rs(t,n,c,r),l=t.memoizedState),(s=Fo||os(t,n,s,r,d,l,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Mo(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:ns(t.type,s),a.props=u,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?No(l):Ni(t,l=Di(n)?Ii:Ti.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||d!==l)&&ss(t,a,r,l),Fo=!1,d=t.memoizedState,a.state=d,Uo(t,r,a,i);var h=t.memoizedState;s!==f||d!==h||Oi.current||Fo?("function"==typeof p&&(rs(t,n,p,r),h=t.memoizedState),(u=Fo||os(t,n,u,r,d,h,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ts(e,t,n,r,o,i)}function Ts(e,t,n,r,i,o){Cs(e,t);var a=!!(128&t.flags);if(!r&&!a)return i&&Li(t,n,!1),Qs(e,t,o);r=t.stateNode,gs.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=ko(t,e.child,null,o),t.child=ko(t,null,s,o)):As(e,t,s,o),t.memoizedState=r.state,i&&Li(t,n,!0),t.child}function Os(e){var t=e.stateNode;t.pendingContext?Pi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Pi(0,t.context,!1),Go(e,t.containerInfo)}function Is(e,t,n,r,i){return ho(),mo(i),t.flags|=256,As(e,t,n,r),t.child}var Ns,Ds,Bs,Ps,Rs={dehydrated:null,treeContext:null,retryLane:0};function Fs(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ls(e,t,n){var r,i=t.pendingProps,a=ea.current,s=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&a)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Si(ea,1&a),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=i.children,e=i.fallback,s?(i=t.mode,s=t.child,l={mode:"hidden",children:l},1&i||null===s?s=Fu(l,i,0,null):(s.childLanes=0,s.pendingProps=l),e=Ru(e,i,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Fs(n),t.memoizedState=Rs,e):Ms(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,i,a,s){if(n)return 256&t.flags?(t.flags&=-257,zs(e,t,s,r=cs(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,i=t.mode,r=Fu({mode:"visible",children:r.children},i,0,null),(a=Ru(a,i,s,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,1&t.mode&&ko(t,e.child,null,s),t.child.memoizedState=Fs(s),t.memoizedState=Rs,a);if(!(1&t.mode))return zs(e,t,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,zs(e,t,s,r=cs(a=Error(o(419)),r,void 0))}if(l=!!(s&e.childLanes),bs||l){if(null!==(r=Ol)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=i&(r.suspendedLanes|s)?0:i)&&i!==a.retryLane&&(a.retryLane=i,Ro(e,i),nu(r,e,i,-1))}return mu(),zs(e,t,s,r=cs(Error(o(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=_u.bind(null,e),i._reactRetry=t,null):(e=a.treeContext,ro=ui(i.nextSibling),no=t,io=!0,oo=null,null!==e&&(Yi[$i++]=Gi,Yi[$i++]=Xi,Yi[$i++]=Ki,Gi=e.id,Xi=e.overflow,Ki=t),(t=Ms(t,r.children)).flags|=4096,t)}(e,t,l,i,r,a,n);if(s){s=i.fallback,l=t.mode,r=(a=e.child).sibling;var u={mode:"hidden",children:i.children};return 1&l||t.child===a?(i=Bu(a,u)).subtreeFlags=14680064&a.subtreeFlags:((i=t.child).childLanes=0,i.pendingProps=u,t.deletions=null),null!==r?s=Bu(r,s):(s=Ru(s,l,n,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,l=null===(l=e.child.memoizedState)?Fs(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Rs,i}return e=(s=e.child).sibling,i=Bu(s,{mode:"visible",children:i.children}),!(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function Ms(e,t){return(t=Fu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zs(e,t,n,r){return null!==r&&mo(r),ko(t,e.child,null,n),(e=Ms(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function js(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Oo(e.return,t,n)}function Vs(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function qs(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(As(e,t,r.children,n),2&(r=ea.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&js(e,n,t);else if(19===e.tag)js(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Si(ea,r),1&t.mode)switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===ta(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Vs(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ta(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Vs(t,!0,n,null,o);break;case"together":Vs(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Us(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Qs(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Bu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ws(e,t){if(!io)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ys(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hs(t),null;case 1:case 17:return Di(t.type)&&Bi(),Hs(t),null;case 3:return r=t.stateNode,Xo(),Ci(Oi),Ci(Ti),ra(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(au(oo),oo=null))),Ds(e,t),Hs(t),null;case 5:Zo(t);var i=Ko($o.current);if(n=t.type,null!==e&&null!=t.stateNode)Bs(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Hs(t),null}if(e=Ko(Ho.current),fo(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[di]=t,r[pi]=a,e=!!(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(i=0;i<Rr.length;i++)zr(Rr[i],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":G(r,a),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},zr("invalid",r);break;case"textarea":ie(r,a),zr("invalid",r)}for(var l in ge(n,a),i=null,a)if(a.hasOwnProperty(l)){var u=a[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,u,e),i=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,u,e),i=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&zr("scroll",r)}switch(n){case"input":H(r),Z(r,a,!0);break;case"textarea":H(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[di]=t,e[pi]=r,Ns(e,t,!1,!1),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":zr("cancel",e),zr("close",e),i=r;break;case"iframe":case"object":case"embed":zr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Rr.length;i++)zr(Rr[i],e);i=r;break;case"source":zr("error",e),i=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),i=r;break;case"details":zr("toggle",e),i=r;break;case"input":G(e,r),i=K(e,r),zr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=L({},r,{value:void 0}),zr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),zr("invalid",e)}for(a in ge(n,i),u=i)if(u.hasOwnProperty(a)){var c=u[a];"style"===a?ye(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=c&&"onScroll"===a&&zr("scroll",e):null!=c&&b(e,a,c,l))}switch(n){case"input":H(e),Z(e,r,!1);break;case"textarea":H(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hs(t),null;case 6:if(e&&null!=t.stateNode)Ps(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Ko($o.current),Ko(Ho.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[di]=t,(a=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,!!(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[di]=t,t.stateNode=r}return Hs(t),null;case 13:if(Ci(ea),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==ro&&1&t.mode&&!(128&t.flags))po(),ho(),t.flags|=98560,a=!1;else if(a=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[di]=t}else ho(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hs(t),a=!1}else null!==oo&&(au(oo),oo=null),a=!0;if(!a)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ea.current?0===Pl&&(Pl=3):mu())),null!==t.updateQueue&&(t.flags|=4),Hs(t),null);case 4:return Xo(),Ds(e,t),null===e&&qr(t.stateNode.containerInfo),Hs(t),null;case 10:return To(t.type._context),Hs(t),null;case 19:if(Ci(ea),null===(a=t.memoizedState))return Hs(t),null;if(r=!!(128&t.flags),null===(l=a.rendering))if(r)Ws(a,!1);else{if(0!==Pl||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ta(e))){for(t.flags|=128,Ws(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Si(ea,1&ea.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>ql&&(t.flags|=128,r=!0,Ws(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ta(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ws(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!io)return Hs(t),null}else 2*Xe()-a.renderingStartTime>ql&&1073741824!==n&&(t.flags|=128,r=!0,Ws(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=ea.current,Si(ea,r?1&n|2:1&n),t):(Hs(t),null);case 22:case 23:return fu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Dl)&&(Hs(t),6&t.subtreeFlags&&(t.flags|=8192)):Hs(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function $s(e,t){switch(to(t),t.tag){case 1:return Di(t.type)&&Bi(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xo(),Ci(Oi),Ci(Ti),ra(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zo(t),null;case 13:if(Ci(ea),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ci(ea),null;case 4:return Xo(),null;case 10:return To(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}Ns=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ds=function(){},Bs=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ko(Ho.current);var o,a=null;switch(n){case"input":i=K(e,i),r=K(e,r),a=[];break;case"select":i=L({},i,{value:void 0}),r=L({},r,{value:void 0}),a=[];break;case"textarea":i=re(e,i),r=re(e,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ge(n,r),n=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(o in l)!l.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&l[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(a||(a=[]),a.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(a=a||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&zr("scroll",e),a||l===u||(a=[])):(a=a||[]).push(c,u))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Ps=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ks=!1,Gs=!1,Xs="function"==typeof WeakSet?WeakSet:Set,Js=null;function Zs(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){wu(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){wu(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&el(t,n,o)}i=i.next}while(i!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[di],delete t[pi],delete t[mi],delete t[yi],delete t[vi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,fl=!1;function dl(e,t,n){for(n=n.child;null!==n;)pl(e,t,n),n=n.sibling}function pl(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Gs||Zs(n,t);case 6:var r=cl,i=fl;cl=null,dl(e,t,n),fl=i,null!==(cl=r)&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),qt(e)):li(cl,n.stateNode));break;case 4:r=cl,i=fl,cl=n.stateNode.containerInfo,fl=!0,dl(e,t,n),cl=r,fl=i;break;case 0:case 11:case 14:case 15:if(!Gs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(2&o||4&o)&&el(n,t,a),i=i.next}while(i!==r)}dl(e,t,n);break;case 1:if(!Gs&&(Zs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){wu(n,t,e)}dl(e,t,n);break;case 21:dl(e,t,n);break;case 22:1&n.mode?(Gs=(r=Gs)||null!==n.memoizedState,dl(e,t,n),Gs=r):dl(e,t,n);break;default:dl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xs),t.forEach((function(t){var r=Tu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var a=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(o(160));pl(a,s,i),cl=null,fl=!1;var u=i.alternate;null!==u&&(u.return=null),i.return=null}catch(e){wu(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yl(t,e),t=t.sibling}function yl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),vl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){wu(e,e.return,t)}try{nl(5,e,e.return)}catch(t){wu(e,e.return,t)}}break;case 1:ml(t,e),vl(e),512&r&&null!==n&&Zs(n,n.return);break;case 5:if(ml(t,e),vl(e),512&r&&null!==n&&Zs(n,n.return),32&e.flags){var i=e.stateNode;try{de(i,"")}catch(t){wu(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===a.type&&null!=a.name&&X(i,a),be(l,s);var c=be(l,a);for(s=0;s<u.length;s+=2){var f=u[s],d=u[s+1];"style"===f?ye(i,d):"dangerouslySetInnerHTML"===f?fe(i,d):"children"===f?de(i,d):b(i,f,d,c)}switch(l){case"input":J(i,a);break;case"textarea":oe(i,a);break;case"select":var p=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(i,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(i,!!a.multiple,a.defaultValue,!0):ne(i,!!a.multiple,a.multiple?[]:"",!1))}i[pi]=a}catch(t){wu(e,e.return,t)}}break;case 6:if(ml(t,e),vl(e),4&r){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(t){wu(e,e.return,t)}}break;case 3:if(ml(t,e),vl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{qt(t.containerInfo)}catch(t){wu(e,e.return,t)}break;case 4:default:ml(t,e),vl(e);break;case 13:ml(t,e),vl(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(Vl=Xe())),4&r&&hl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Gs=(c=Gs)||f,ml(t,e),Gs=c):ml(t,e),vl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Js=e,f=e.child;null!==f;){for(d=Js=f;null!==Js;){switch(h=(p=Js).child,p.tag){case 0:case 11:case 14:case 15:nl(4,p,p.return);break;case 1:Zs(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){wu(r,n,e)}}break;case 5:Zs(p,p.return);break;case 22:if(null!==p.memoizedState){kl(d);continue}}null!==h?(h.return=p,Js=h):kl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{i=d.stateNode,c?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=d.stateNode,s=null!=(u=d.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=me("display",s))}catch(t){wu(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){wu(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:ml(t,e),vl(e),4&r&&hl(e);case 21:}}function vl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(de(i,""),r.flags&=-33),ul(e,sl(e),i);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(o(161))}}catch(t){wu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gl(e,t,n){Js=e,bl(e,t,n)}function bl(e,t,n){for(var r=!!(1&e.mode);null!==Js;){var i=Js,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Ks;if(!a){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Gs;s=Ks;var u=Gs;if(Ks=a,(Gs=l)&&!u)for(Js=i;null!==Js;)l=(a=Js).child,22===a.tag&&null!==a.memoizedState?El(i):null!==l?(l.return=a,Js=l):El(i);for(;null!==o;)Js=o,bl(o,t,n),o=o.sibling;Js=i,Ks=s,Gs=u}Al(e)}else 8772&i.subtreeFlags&&null!==o?(o.return=i,Js=o):Al(e)}}function Al(e){for(;null!==Js;){var t=Js;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Gs||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gs)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:ns(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Qo(t,a,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Qo(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&qt(d)}}}break;default:throw Error(o(163))}Gs||512&t.flags&&il(t)}catch(e){wu(t,t.return,e)}}if(t===e){Js=null;break}if(null!==(n=t.sibling)){n.return=t.return,Js=n;break}Js=t.return}}function kl(e){for(;null!==Js;){var t=Js;if(t===e){Js=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Js=n;break}Js=t.return}}function El(e){for(;null!==Js;){var t=Js;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){wu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){wu(t,i,e)}}var o=t.return;try{il(t)}catch(e){wu(t,o,e)}break;case 5:var a=t.return;try{il(t)}catch(e){wu(t,a,e)}}}catch(e){wu(t,t.return,e)}if(t===e){Js=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Js=s;break}Js=t.return}}var xl,wl=Math.ceil,Cl=A.ReactCurrentDispatcher,Sl=A.ReactCurrentOwner,_l=A.ReactCurrentBatchConfig,Tl=0,Ol=null,Il=null,Nl=0,Dl=0,Bl=wi(0),Pl=0,Rl=null,Fl=0,Ll=0,Ml=0,zl=null,jl=null,Vl=0,ql=1/0,Ul=null,Ql=!1,Wl=null,Hl=null,Yl=!1,$l=null,Kl=0,Gl=0,Xl=null,Jl=-1,Zl=0;function eu(){return 6&Tl?Xe():-1!==Jl?Jl:Jl=Xe()}function tu(e){return 1&e.mode?2&Tl&&0!==Nl?Nl&-Nl:null!==yo.transition?(0===Zl&&(Zl=mt()),Zl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Gt(e.type):1}function nu(e,t,n,r){if(50<Gl)throw Gl=0,Xl=null,Error(o(185));vt(e,n,r),2&Tl&&e===Ol||(e===Ol&&(!(2&Tl)&&(Ll|=n),4===Pl&&su(e,Nl)),ru(e,r),1===n&&0===Tl&&!(1&t.mode)&&(ql=Xe()+500,zi&&qi()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-at(o),s=1<<a,l=i[a];-1===l?s&n&&!(s&r)||(i[a]=pt(s,t)):l<=t&&(e.expiredLanes|=s),o&=~s}}(e,t);var r=dt(e,e===Ol?Nl:0);if(0===r)null!==n&&$e(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&$e(n),1===t)0===e.tag?function(e){zi=!0,Vi(e)}(lu.bind(null,e)):Vi(lu.bind(null,e)),ai((function(){!(6&Tl)&&qi()})),n=null;else{switch(At(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ou(n,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function iu(e,t){if(Jl=-1,Zl=0,6&Tl)throw Error(o(327));var n=e.callbackNode;if(Eu()&&e.callbackNode!==n)return null;var r=dt(e,e===Ol?Nl:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=yu(e,r);else{t=r;var i=Tl;Tl|=2;var a=hu();for(Ol===e&&Nl===t||(Ul=null,ql=Xe()+500,du(e,t));;)try{gu();break}catch(t){pu(e,t)}_o(),Cl.current=a,Tl=i,null!==Il?t=0:(Ol=null,Nl=0,t=Pl)}if(0!==t){if(2===t&&0!==(i=ht(e))&&(r=i,t=ou(e,i)),1===t)throw n=Rl,du(e,0),su(e,r),ru(e,Xe()),n;if(6===t)su(e,r);else{if(i=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!sr(o(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)||(t=yu(e,r),2===t&&(a=ht(e),0!==a&&(r=a,t=ou(e,a))),1!==t)))throw n=Rl,du(e,0),su(e,r),ru(e,Xe()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ku(e,jl,Ul);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Vl+500-Xe())){if(0!==dt(e,0))break;if(((i=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(ku.bind(null,e,jl,Ul),t);break}ku(e,jl,Ul);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-at(r);a=1<<s,(s=t[s])>i&&(i=s),r&=~a}if(r=i,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*wl(r/1960))-r)){e.timeoutHandle=ri(ku.bind(null,e,jl,Ul),r);break}ku(e,jl,Ul);break;default:throw Error(o(329))}}}return ru(e,Xe()),e.callbackNode===n?iu.bind(null,e):null}function ou(e,t){var n=zl;return e.current.memoizedState.isDehydrated&&(du(e,t).flags|=256),2!==(e=yu(e,t))&&(t=jl,jl=n,null!==t&&au(t)),e}function au(e){null===jl?jl=e:jl.push.apply(jl,e)}function su(e,t){for(t&=~Ml,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(6&Tl)throw Error(o(327));Eu();var t=dt(e,0);if(!(1&t))return ru(e,Xe()),null;var n=yu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ou(e,r))}if(1===n)throw n=Rl,du(e,0),su(e,t),ru(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ku(e,jl,Ul),ru(e,Xe()),null}function uu(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(ql=Xe()+500,zi&&qi())}}function cu(e){null!==$l&&0===$l.tag&&!(6&Tl)&&Eu();var t=Tl;Tl|=1;var n=_l.transition,r=bt;try{if(_l.transition=null,bt=1,e)return e()}finally{bt=r,_l.transition=n,!(6&(Tl=t))&&qi()}}function fu(){Dl=Bl.current,Ci(Bl)}function du(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Il)for(n=Il.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Bi();break;case 3:Xo(),Ci(Oi),Ci(Ti),ra();break;case 5:Zo(r);break;case 4:Xo();break;case 13:case 19:Ci(ea);break;case 10:To(r.type._context);break;case 22:case 23:fu()}n=n.return}if(Ol=e,Il=e=Bu(e.current,null),Nl=Dl=t,Pl=0,Rl=null,Ml=Ll=Fl=0,jl=zl=null,null!==Do){for(t=0;t<Do.length;t++)if(null!==(r=(n=Do[t]).interleaved)){n.interleaved=null;var i=r.next,o=n.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}n.pending=r}Do=null}return e}function pu(e,t){for(;;){var n=Il;try{if(_o(),ia.current=Ja,ca){for(var r=sa.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}ca=!1}if(aa=0,ua=la=sa=null,fa=!1,da=0,Sl.current=null,null===n||null===n.return){Pl=1,Rl=t,Il=null;break}e:{var a=e,s=n.return,l=n,u=t;if(t=Nl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,f=l,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=ys(s);if(null!==h){h.flags&=-257,vs(h,s,l,0,t),1&h.mode&&ms(a,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var y=new Set;y.add(u),t.updateQueue=y}else m.add(u);break e}if(!(1&t)){ms(a,c,t),mu();break e}u=Error(o(426))}else if(io&&1&l.mode){var v=ys(s);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vs(v,s,l,0,t),mo(us(u,l));break e}}a=u=us(u,l),4!==Pl&&(Pl=2),null===zl?zl=[a]:zl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,qo(a,ps(0,u,t));break e;case 1:l=u;var g=a.type,b=a.stateNode;if(!(128&a.flags||"function"!=typeof g.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Hl&&Hl.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,qo(a,hs(a,l,t));break e}}a=a.return}while(null!==a)}Au(n)}catch(e){t=e,Il===n&&null!==n&&(Il=n=n.return);continue}break}}function hu(){var e=Cl.current;return Cl.current=Ja,null===e?Ja:e}function mu(){0!==Pl&&3!==Pl&&2!==Pl||(Pl=4),null===Ol||!(268435455&Fl)&&!(268435455&Ll)||su(Ol,Nl)}function yu(e,t){var n=Tl;Tl|=2;var r=hu();for(Ol===e&&Nl===t||(Ul=null,du(e,t));;)try{vu();break}catch(t){pu(e,t)}if(_o(),Tl=n,Cl.current=r,null!==Il)throw Error(o(261));return Ol=null,Nl=0,Pl}function vu(){for(;null!==Il;)bu(Il)}function gu(){for(;null!==Il&&!Ke();)bu(Il)}function bu(e){var t=xl(e.alternate,e,Dl);e.memoizedProps=e.pendingProps,null===t?Au(e):Il=t,Sl.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=$s(n,t)))return n.flags&=32767,void(Il=n);if(null===e)return Pl=6,void(Il=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Ys(n,t,Dl)))return void(Il=n);if(null!==(t=t.sibling))return void(Il=t);Il=t=e}while(null!==t);0===Pl&&(Pl=5)}function ku(e,t,n){var r=bt,i=_l.transition;try{_l.transition=null,bt=1,function(e,t,n,r){do{Eu()}while(null!==$l);if(6&Tl)throw Error(o(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-at(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}(e,a),e===Ol&&(Il=Ol=null,Nl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Yl||(Yl=!0,Ou(tt,(function(){return Eu(),null}))),a=!!(15990&n.flags),15990&n.subtreeFlags||a){a=_l.transition,_l.transition=null;var s=bt;bt=1;var l=Tl;Tl|=4,Sl.current=null,function(e,t){if(ei=Qt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==i&&3!==d.nodeType||(l=s+i),d!==a||0!==r&&3!==d.nodeType||(u=s+r),3===d.nodeType&&(s+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===i&&(l=s),p===a&&++f===r&&(u=s),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Qt=!1,Js=t;null!==Js;)if(e=(t=Js).child,1028&t.subtreeFlags&&null!==e)e.return=t,Js=e;else for(;null!==Js;){t=Js;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,v=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:ns(t.type,y),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(o(163))}}catch(e){wu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Js=e;break}Js=t.return}m=tl,tl=!1}(e,n),yl(n,e),hr(ti),Qt=!!ei,ti=ei=null,e.current=n,gl(n,e,i),Ge(),Tl=l,bt=s,_l.transition=a}else e.current=n;if(Yl&&(Yl=!1,$l=e,Kl=i),0===(a=e.pendingLanes)&&(Hl=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(it,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ru(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Ql)throw Ql=!1,e=Wl,Wl=null,e;!!(1&Kl)&&0!==e.tag&&Eu(),1&(a=e.pendingLanes)?e===Xl?Gl++:(Gl=0,Xl=e):Gl=0,qi()}(e,t,n,r)}finally{_l.transition=i,bt=r}return null}function Eu(){if(null!==$l){var e=At(Kl),t=_l.transition,n=bt;try{if(_l.transition=null,bt=16>e?16:e,null===$l)var r=!1;else{if(e=$l,$l=null,Kl=0,6&Tl)throw Error(o(331));var i=Tl;for(Tl|=4,Js=e.current;null!==Js;){var a=Js,s=a.child;if(16&Js.flags){var l=a.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Js=c;null!==Js;){var f=Js;switch(f.tag){case 0:case 11:case 15:nl(8,f,a)}var d=f.child;if(null!==d)d.return=f,Js=d;else for(;null!==Js;){var p=(f=Js).sibling,h=f.return;if(ol(f),f===c){Js=null;break}if(null!==p){p.return=h,Js=p;break}Js=h}}}var m=a.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var v=y.sibling;y.sibling=null,y=v}while(null!==y)}}Js=a}}if(2064&a.subtreeFlags&&null!==s)s.return=a,Js=s;else e:for(;null!==Js;){if(2048&(a=Js).flags)switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Js=g;break e}Js=a.return}}var b=e.current;for(Js=b;null!==Js;){var A=(s=Js).child;if(2064&s.subtreeFlags&&null!==A)A.return=s,Js=A;else e:for(s=b;null!==Js;){if(2048&(l=Js).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){wu(l,l.return,e)}if(l===s){Js=null;break e}var k=l.sibling;if(null!==k){k.return=l.return,Js=k;break e}Js=l.return}}if(Tl=i,qi(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{bt=n,_l.transition=t}}return!1}function xu(e,t,n){e=jo(e,t=ps(0,t=us(n,t),1),1),t=eu(),null!==e&&(vt(e,1,t),ru(e,t))}function wu(e,t,n){if(3===e.tag)xu(e,e,n);else for(;null!==t;){if(3===t.tag){xu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){t=jo(t,e=hs(t,e=us(n,e),1),1),e=eu(),null!==t&&(vt(t,1,e),ru(t,e));break}}t=t.return}}function Cu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Ol===e&&(Nl&n)===n&&(4===Pl||3===Pl&&(130023424&Nl)===Nl&&500>Xe()-Vl?du(e,0):Ml|=n),ru(e,t)}function Su(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=eu();null!==(e=Ro(e,t))&&(vt(e,t,n),ru(e,n))}function _u(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Su(e,n)}function Tu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Su(e,n)}function Ou(e,t){return Ye(e,t)}function Iu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Nu(e,t,n,r){return new Iu(e,t,n,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bu(e,t){var n=e.alternate;return null===n?((n=Nu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,r,i,a){var s=2;if(r=e,"function"==typeof e)Du(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case x:return Ru(n.children,i,a,t);case w:s=8,i|=8;break;case C:return(e=Nu(12,n,t,2|i)).elementType=C,e.lanes=a,e;case O:return(e=Nu(13,n,t,i)).elementType=O,e.lanes=a,e;case I:return(e=Nu(19,n,t,i)).elementType=I,e.lanes=a,e;case B:return Fu(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:s=10;break e;case _:s=9;break e;case T:s=11;break e;case N:s=14;break e;case D:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Nu(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function Ru(e,t,n,r){return(e=Nu(7,e,r,t)).lanes=n,e}function Fu(e,t,n,r){return(e=Nu(22,e,r,t)).elementType=B,e.lanes=n,e.stateNode={isHidden:!1},e}function Lu(e,t,n){return(e=Nu(6,e,null,t)).lanes=n,e}function Mu(e,t,n){return(t=Nu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function zu(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function ju(e,t,n,r,i,o,a,s,l){return e=new zu(e,t,n,s,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Nu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Lo(o),e}function Vu(e){if(!e)return _i;e:{if(qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Di(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Di(n))return Ri(e,n,t)}return t}function qu(e,t,n,r,i,o,a,s,l){return(e=ju(n,r,!0,e,0,o,0,s,l)).context=Vu(null),n=e.current,(o=zo(r=eu(),i=tu(n))).callback=null!=t?t:null,jo(n,o,i),e.current.lanes=i,vt(e,i,r),ru(e,r),e}function Uu(e,t,n,r){var i=t.current,o=eu(),a=tu(i);return n=Vu(n),null===t.context?t.context=n:t.pendingContext=n,(t=zo(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=jo(i,t,a))&&(nu(e,i,a,o),Vo(e,i,a)),a}function Qu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Hu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}xl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oi.current)bs=!0;else{if(!(e.lanes&n||128&t.flags))return bs=!1,function(e,t,n){switch(t.tag){case 3:Os(t),ho();break;case 5:Jo(t);break;case 1:Di(t.type)&&Fi(t);break;case 4:Go(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Si(xo,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Si(ea,1&ea.current),t.flags|=128,null):n&t.child.childLanes?Ls(e,t,n):(Si(ea,1&ea.current),null!==(e=Qs(e,t,n))?e.sibling:null);Si(ea,1&ea.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return qs(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Si(ea,ea.current),r)break;return null;case 22:case 23:return t.lanes=0,ws(e,t,n)}return Qs(e,t,n)}(e,t,n);bs=!!(131072&e.flags)}else bs=!1,io&&1048576&t.flags&&Zi(t,Hi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Us(e,t),e=t.pendingProps;var i=Ni(t,Ti.current);Io(t,n),i=ya(null,t,r,e,i,n);var a=va();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Di(r)?(a=!0,Fi(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Lo(t),i.updater=is,t.stateNode=i,i._reactInternals=t,ls(t,r,e,n),t=Ts(null,t,r,!0,a,n)):(t.tag=0,io&&a&&eo(t),As(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Us(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Du(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===N)return 14}return 2}(r),e=ns(r,e),i){case 0:t=Ss(null,t,r,e,n);break e;case 1:t=_s(null,t,r,e,n);break e;case 11:t=ks(null,t,r,e,n);break e;case 14:t=Es(null,t,r,ns(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ss(e,t,r,i=t.elementType===r?i:ns(r,i),n);case 1:return r=t.type,i=t.pendingProps,_s(e,t,r,i=t.elementType===r?i:ns(r,i),n);case 3:e:{if(Os(t),null===e)throw Error(o(387));r=t.pendingProps,i=(a=t.memoizedState).element,Mo(e,t),Uo(t,r,null,n);var s=t.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Is(e,t,r,n,i=us(Error(o(423)),t));break e}if(r!==i){t=Is(e,t,r,n,i=us(Error(o(424)),t));break e}for(ro=ui(t.stateNode.containerInfo.firstChild),no=t,io=!0,oo=null,n=Eo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===i){t=Qs(e,t,n);break e}As(e,t,r,n)}t=t.child}return t;case 5:return Jo(t),null===e&&uo(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==a&&ni(r,a)&&(t.flags|=32),Cs(e,t),As(e,t,s,n),t.child;case 6:return null===e&&uo(t),null;case 13:return Ls(e,t,n);case 4:return Go(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ko(t,null,r,n):As(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,ks(e,t,r,i=t.elementType===r?i:ns(r,i),n);case 7:return As(e,t,t.pendingProps,n),t.child;case 8:case 12:return As(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,a=t.memoizedProps,s=i.value,Si(xo,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===i.children&&!Oi.current){t=Qs(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===a.tag){(u=zo(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),c.pending=u}}a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),Oo(a.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),Oo(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}As(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,Io(t,n),r=r(i=No(i)),t.flags|=1,As(e,t,r,n),t.child;case 14:return i=ns(r=t.type,t.pendingProps),Es(e,t,r,i=ns(r.type,i),n);case 15:return xs(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ns(r,i),Us(e,t),t.tag=1,Di(r)?(e=!0,Fi(t)):e=!1,Io(t,n),as(t,r,i),ls(t,r,i,n),Ts(null,t,r,!0,e,n);case 19:return qs(e,t,n);case 22:return ws(e,t,n)}throw Error(o(156,t.tag))};var Yu="function"==typeof reportError?reportError:function(e){console.error(e)};function $u(e){this._internalRoot=e}function Ku(e){this._internalRoot=e}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function Zu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var e=Qu(a);s.call(e)}}Uu(t,a,e,i)}else a=function(e,t,n,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var e=Qu(a);o.call(e)}}var a=qu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=a,e[hi]=a.current,qr(8===e.nodeType?e.parentNode:e),cu(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=Qu(l);s.call(e)}}var l=ju(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=l,e[hi]=l.current,qr(8===e.nodeType?e.parentNode:e),cu((function(){Uu(t,l,n,r)})),l}(n,t,e,i,r);return Qu(a)}Ku.prototype.render=$u.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Uu(e,t,null,null)},Ku.prototype.unmount=$u.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Uu(null,e,null,null)})),t[hi]=null}},Ku.prototype.unstable_scheduleHydration=function(e){if(e){var t=wt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Bt.length&&0!==t&&t<Bt[n].priority;n++);Bt.splice(n,0,e),0===n&&Lt(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),ru(t,Xe()),!(6&Tl)&&(ql=Xe()+500,qi()))}break;case 13:cu((function(){var t=Ro(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Hu(e,1)}},Et=function(e){if(13===e.tag){var t=Ro(e,134217728);null!==t&&nu(t,e,134217728,eu()),Hu(e,134217728)}},xt=function(e){if(13===e.tag){var t=tu(e),n=Ro(e,t);null!==n&&nu(n,e,t,eu()),Hu(e,t)}},wt=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ee=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ki(r);if(!i)throw Error(o(90));Y(r),J(r,i)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=uu,Oe=cu;var ec={usingClientEntryPoint:!1,Events:[bi,Ai,ki,Se,_e,uu]},tc={findFiberByHostInstance:gi,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{it=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gu(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Gu(e))throw Error(o(299));var n=!1,r="",i=Yu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=ju(e,1,!1,null,0,n,0,r,i),e[hi]=t.current,qr(8===e.nodeType?e.parentNode:e),new $u(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Xu(t))throw Error(o(200));return Zu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gu(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,i=!1,a="",s=Yu;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=qu(t,null,e,1,null!=n?n:null,i,0,a,s),e[hi]=t.current,qr(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Ku(t)},t.render=function(e,t,n){if(!Xu(t))throw Error(o(200));return Zu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xu(e))throw Error(o(40));return!!e._reactRootContainer&&(cu((function(){Zu(null,null,e,!1,(function(){e._reactRootContainer=null,e[hi]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xu(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zu(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},581:(e,t,n)=>{"use strict";n.d(t,{A:()=>d});var r=n(354),i=n.n(r),o=n(314),a=n.n(o),s=n(417),l=n.n(s),u=new URL(n(958),n.b),c=a()(i()),f=l()(u);c.push([e.id,`/* 主题颜色变量 */\n:root {\n  --primary-color: #7c4dff;\n  --primary-hover: #651fff;\n  --primary-light: #e5ddff;\n  --secondary-color: #05c2ac;\n  --text-dark: #2d3748;\n  --text-light: #718096;\n  --bg-color: #f8fafc;\n  --bg-card: #ffffff;\n  --border-color: #e2e8f0;\n  --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);\n  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.1);\n  --border-radius: 12px;\n}\n\n/* 基础动画 */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n/* 渐变背景 */\nbody {\n  background: linear-gradient(135deg, #f7f9fc 0%, #eef1fa 100%);\n}\n\n.container {\n  max-width: 900px;\n  margin: 2rem auto;\n  padding: 2rem;\n  animation: fadeIn 0.5s ease-out;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 3rem;\n  padding-bottom: 2rem;\n  border-bottom: 1px solid var(--primary-light);\n  position: relative;\n}\n\n.header::after {\n  content: '';\n  position: absolute;\n  bottom: -1px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100px;\n  height: 3px;\n  background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));\n  border-radius: 3px;\n}\n\n.header h1 {\n  color: var(--primary-color);\n  font-size: 2.8rem;\n  margin-bottom: 0.8rem;\n  letter-spacing: -0.5px;\n  font-weight: 700;\n}\n\n.header p {\n  color: var(--text-light);\n  font-size: 1.2rem;\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.model-selector {\n  margin-bottom: 1.5rem;\n  background-color: var(--bg-card);\n  padding: 1.5rem;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-sm);\n  transition: box-shadow 0.3s ease;\n}\n\n.model-selector:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.model-selector label {\n  margin-right: 1rem;\n  font-weight: 600;\n  color: var(--text-dark);\n}\n\n.model-selector select {\n  padding: 0.7rem 1rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  min-width: 220px;\n  font-size: 1rem;\n  background-color: white;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  appearance: none;\n  background-image: url(${f});\n  background-repeat: no-repeat;\n  background-position: right 0.7rem top 50%;\n  background-size: 0.65rem auto;\n  padding-right: 1.8rem;\n}\n\n.model-selector select:hover,\n.model-selector select:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 3px var(--primary-light);\n  outline: none;\n}\n\n.prompt-form {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 2.5rem;\n  background-color: var(--bg-card);\n  padding: 1.8rem;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-sm);\n  transition: all 0.3s ease;\n}\n\n.prompt-form:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.prompt-form textarea {\n  width: 100%;\n  padding: 1rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  resize: vertical;\n  min-height: 120px;\n  font-size: 1rem;\n  font-family: inherit;\n  margin-bottom: 1rem;\n  transition: all 0.2s ease;\n}\n\n.prompt-form textarea:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 3px var(--primary-light);\n  outline: none;\n}\n\n.prompt-form button {\n  align-self: flex-end;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 140px;\n  padding: 0.7rem 1.2rem;\n  background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.prompt-form button:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(124, 77, 255, 0.3);\n}\n\n.prompt-form button:active:not(:disabled) {\n  transform: translateY(0);\n}\n\n.prompt-form button:disabled {\n  background: #cbd5e0;\n  cursor: not-allowed;\n}\n\n.loading {\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  border: 2px solid rgba(255, 255, 255, 0.5);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s ease-in-out infinite;\n  margin-left: 10px;\n}\n\n.error-message {\n  padding: 1.2rem;\n  background-color: #fff0f0;\n  border-left: 4px solid #e53e3e;\n  border-radius: 8px;\n  margin-bottom: 1.5rem;\n  color: #c53030;\n  animation: pulse 2s infinite;\n}\n\n.conversations {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.conversation-item {\n  background-color: var(--bg-card);\n  border-radius: var(--border-radius);\n  overflow: hidden;\n  box-shadow: var(--shadow-sm);\n  transition: all 0.3s ease;\n  animation: fadeIn 0.5s ease-out;\n}\n\n.conversation-item:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.prompt-container,\n.response-container {\n  padding: 1.8rem;\n}\n\n.prompt-container {\n  background-color: #f3f4f8;\n  border-bottom: 1px solid var(--border-color);\n  position: relative;\n}\n\n.prompt-container::before {\n  content: '问';\n  position: absolute;\n  right: 20px;\n  top: 15px;\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: rgba(0, 0, 0, 0.05);\n}\n\n.response-container {\n  position: relative;\n}\n\n.response-container::before {\n  content: '答';\n  position: absolute;\n  right: 20px;\n  top: 15px;\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: rgba(0, 0, 0, 0.05);\n}\n\n.prompt-container strong,\n.response-container strong {\n  display: block;\n  margin-bottom: 0.8rem;\n  color: var(--text-dark);\n  font-size: 1.1rem;\n  font-weight: 600;\n}\n\n.response-content {\n  line-height: 1.8;\n  margin-bottom: 1.5rem;\n  color: var(--text-dark);\n}\n\n.response-content code {\n  background-color: #f1f5f9;\n  padding: 0.2rem 0.4rem;\n  border-radius: 4px;\n  font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, monospace;\n  font-size: 0.9rem;\n  color: var(--primary-color);\n}\n\n.response-content pre {\n  background-color: #282c34;\n  color: #f8f8f2;\n  padding: 1.2rem;\n  border-radius: 8px;\n  overflow-x: auto;\n  margin: 1.2rem 0;\n}\n\n.response-content pre code {\n  background-color: transparent;\n  color: inherit;\n  padding: 0;\n}\n\n.response-content p {\n  margin-bottom: 1rem;\n}\n\n.response-content h1,\n.response-content h2,\n.response-content h3,\n.response-content h4 {\n  margin: 1.5rem 0 1rem;\n  color: var(--text-dark);\n}\n\n.response-content ul,\n.response-content ol {\n  margin-left: 1.5rem;\n  margin-bottom: 1rem;\n}\n\n.response-content blockquote {\n  border-left: 4px solid var(--primary-light);\n  padding-left: 1rem;\n  margin-left: 0;\n  margin-right: 0;\n  color: var(--text-light);\n}\n\n.response-metadata {\n  display: flex;\n  gap: 1.5rem;\n  color: var(--text-light);\n  font-size: 0.875rem;\n  border-top: 1px solid var(--border-color);\n  padding-top: 1rem;\n  margin-top: 1rem;\n}\n\n.response-metadata span {\n  display: flex;\n  align-items: center;\n}\n\n.response-metadata span::before {\n  content: '';\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  background-color: var(--primary-color);\n  border-radius: 50%;\n  margin-right: 8px;\n}\n\n/* 返回顶部按钮 */\n.back-to-top {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n  color: white;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border: none;\n  transition: all 0.3s ease;\n  z-index: 100;\n  animation: fadeIn 0.3s ease-out;\n}\n\n.back-to-top:hover {\n  background-color: var(--primary-hover);\n  transform: translateY(-5px);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n}\n\n.back-to-top i {\n  font-size: 1.2rem;\n}\n\n/* 移动端响应式设计 */\n@media (max-width: 768px) {\n  .container {\n    padding: 1.5rem;\n    margin: 0;\n    max-width: 100%;\n  }\n\n  .header {\n    margin-bottom: 2rem;\n    padding-bottom: 1.5rem;\n  }\n\n  .header h1 {\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n  }\n\n  .header p {\n    font-size: 1rem;\n  }\n\n  .model-selector {\n    padding: 1.2rem;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .model-selector label {\n    margin-bottom: 0.5rem;\n    margin-right: 0;\n  }\n\n  .model-selector select {\n    min-width: 100%;\n    width: 100%;\n  }\n\n  .prompt-form {\n    padding: 1.2rem;\n  }\n\n  .prompt-form textarea {\n    min-height: 100px;\n  }\n\n  .prompt-form button {\n    width: 100%;\n    min-width: auto;\n    align-self: center;\n  }\n\n  .response-metadata {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .prompt-container,\n  .response-container {\n    padding: 1.2rem;\n  }\n\n  .prompt-container::before,\n  .response-container::before {\n    font-size: 2rem;\n    right: 10px;\n    top: 10px;\n  }\n\n  .response-content pre {\n    padding: 1rem;\n    font-size: 0.9rem;\n  }\n\n  .back-to-top {\n    width: 45px;\n    height: 45px;\n    bottom: 15px;\n    right: 15px;\n  }\n}\n\n/* 适配小屏幕手机 */\n@media (max-width: 480px) {\n  .container {\n    padding: 1rem;\n  }\n\n  .header h1 {\n    font-size: 1.8rem;\n  }\n\n  .conversation-item {\n    border-radius: 8px;\n  }\n\n  .prompt-container,\n  .response-container {\n    padding: 1rem;\n  }\n\n  .prompt-container::before,\n  .response-container::before {\n    font-size: 1.5rem;\n  }\n\n  .response-content {\n    font-size: 0.95rem;\n  }\n\n  .response-content pre {\n    margin: 1rem 0;\n    font-size: 0.85rem;\n  }\n\n  .back-to-top {\n    width: 40px;\n    height: 40px;\n    bottom: 10px;\n    right: 10px;\n  }\n} `,"",{version:3,sources:["webpack://./src/styles/App.css"],names:[],mappings:"AAAA,WAAW;AACX;EACE,wBAAwB;EACxB,wBAAwB;EACxB,wBAAwB;EACxB,0BAA0B;EAC1B,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,kBAAkB;EAClB,uBAAuB;EACvB,0CAA0C;EAC1C,2CAA2C;EAC3C,2CAA2C;EAC3C,qBAAqB;AACvB;;AAEA,SAAS;AACT;EACE,OAAO,UAAU,EAAE,2BAA2B,EAAE;EAChD,KAAK,UAAU,EAAE,wBAAwB,EAAE;AAC7C;;AAEA;EACE,KAAK,yBAAyB,EAAE;AAClC;;AAEA;EACE,KAAK,mBAAmB,EAAE;EAC1B,MAAM,sBAAsB,EAAE;EAC9B,OAAO,mBAAmB,EAAE;AAC9B;;AAEA,SAAS;AACT;EACE,6DAA6D;AAC/D;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,+BAA+B;AACjC;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,6CAA6C;EAC7C,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,YAAY;EACZ,SAAS;EACT,2BAA2B;EAC3B,YAAY;EACZ,WAAW;EACX,gFAAgF;EAChF,kBAAkB;AACpB;;AAEA;EACE,2BAA2B;EAC3B,iBAAiB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,wBAAwB;EACxB,iBAAiB;EACjB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,qBAAqB;EACrB,gCAAgC;EAChC,eAAe;EACf,mCAAmC;EACnC,4BAA4B;EAC5B,gCAAgC;AAClC;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,oBAAoB;EACpB,qCAAqC;EACrC,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,uBAAuB;EACvB,eAAe;EACf,yBAAyB;EACzB,gBAAgB;EAChB,yDAAof;EACpf,4BAA4B;EAC5B,yCAAyC;EACzC,6BAA6B;EAC7B,qBAAqB;AACvB;;AAEA;;EAEE,kCAAkC;EAClC,0CAA0C;EAC1C,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,gCAAgC;EAChC,eAAe;EACf,mCAAmC;EACnC,4BAA4B;EAC5B,yBAAyB;AAC3B;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,WAAW;EACX,aAAa;EACb,qCAAqC;EACrC,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;EACf,oBAAoB;EACpB,mBAAmB;EACnB,yBAAyB;AAC3B;;AAEA;EACE,kCAAkC;EAClC,0CAA0C;EAC1C,aAAa;AACf;;AAEA;EACE,oBAAoB;EACpB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;EAChB,sBAAsB;EACtB,uFAAuF;EACvF,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,2BAA2B;EAC3B,8CAA8C;AAChD;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,0CAA0C;EAC1C,kBAAkB;EAClB,uBAAuB;EACvB,uCAAuC;EACvC,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,yBAAyB;EACzB,8BAA8B;EAC9B,kBAAkB;EAClB,qBAAqB;EACrB,cAAc;EACd,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,gCAAgC;EAChC,mCAAmC;EACnC,gBAAgB;EAChB,4BAA4B;EAC5B,yBAAyB;EACzB,+BAA+B;AACjC;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;;EAEE,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,4CAA4C;EAC5C,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,iBAAiB;EACjB,iBAAiB;EACjB,0BAA0B;AAC5B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,iBAAiB;EACjB,iBAAiB;EACjB,0BAA0B;AAC5B;;AAEA;;EAEE,cAAc;EACd,qBAAqB;EACrB,uBAAuB;EACvB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,sBAAsB;EACtB,kBAAkB;EAClB,iEAAiE;EACjE,iBAAiB;EACjB,2BAA2B;AAC7B;;AAEA;EACE,yBAAyB;EACzB,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;EAC7B,cAAc;EACd,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;;;EAIE,qBAAqB;EACrB,uBAAuB;AACzB;;AAEA;;EAEE,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,2CAA2C;EAC3C,kBAAkB;EAClB,cAAc;EACd,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,aAAa;EACb,WAAW;EACX,wBAAwB;EACxB,mBAAmB;EACnB,yCAAyC;EACzC,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,qBAAqB;EACrB,UAAU;EACV,WAAW;EACX,sCAAsC;EACtC,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA,WAAW;AACX;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,sCAAsC;EACtC,YAAY;EACZ,0CAA0C;EAC1C,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,YAAY;EACZ,yBAAyB;EACzB,YAAY;EACZ,+BAA+B;AACjC;;AAEA;EACE,sCAAsC;EACtC,2BAA2B;EAC3B,yCAAyC;AAC3C;;AAEA;EACE,iBAAiB;AACnB;;AAEA,aAAa;AACb;EACE;IACE,eAAe;IACf,SAAS;IACT,eAAe;EACjB;;EAEA;IACE,mBAAmB;IACnB,sBAAsB;EACxB;;EAEA;IACE,eAAe;IACf,qBAAqB;EACvB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,aAAa;IACb,sBAAsB;EACxB;;EAEA;IACE,qBAAqB;IACrB,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,WAAW;EACb;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,WAAW;IACX,eAAe;IACf,kBAAkB;EACpB;;EAEA;IACE,sBAAsB;IACtB,WAAW;EACb;;EAEA;;IAEE,eAAe;EACjB;;EAEA;;IAEE,eAAe;IACf,WAAW;IACX,SAAS;EACX;;EAEA;IACE,aAAa;IACb,iBAAiB;EACnB;;EAEA;IACE,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,WAAW;EACb;AACF;;AAEA,YAAY;AACZ;EACE;IACE,aAAa;EACf;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,kBAAkB;EACpB;;EAEA;;IAEE,aAAa;EACf;;EAEA;;IAEE,iBAAiB;EACnB;;EAEA;IACE,kBAAkB;EACpB;;EAEA;IACE,cAAc;IACd,kBAAkB;EACpB;;EAEA;IACE,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,WAAW;EACb;AACF",sourcesContent:["/* 主题颜色变量 */\n:root {\n  --primary-color: #7c4dff;\n  --primary-hover: #651fff;\n  --primary-light: #e5ddff;\n  --secondary-color: #05c2ac;\n  --text-dark: #2d3748;\n  --text-light: #718096;\n  --bg-color: #f8fafc;\n  --bg-card: #ffffff;\n  --border-color: #e2e8f0;\n  --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);\n  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.1);\n  --border-radius: 12px;\n}\n\n/* 基础动画 */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n/* 渐变背景 */\nbody {\n  background: linear-gradient(135deg, #f7f9fc 0%, #eef1fa 100%);\n}\n\n.container {\n  max-width: 900px;\n  margin: 2rem auto;\n  padding: 2rem;\n  animation: fadeIn 0.5s ease-out;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 3rem;\n  padding-bottom: 2rem;\n  border-bottom: 1px solid var(--primary-light);\n  position: relative;\n}\n\n.header::after {\n  content: '';\n  position: absolute;\n  bottom: -1px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100px;\n  height: 3px;\n  background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));\n  border-radius: 3px;\n}\n\n.header h1 {\n  color: var(--primary-color);\n  font-size: 2.8rem;\n  margin-bottom: 0.8rem;\n  letter-spacing: -0.5px;\n  font-weight: 700;\n}\n\n.header p {\n  color: var(--text-light);\n  font-size: 1.2rem;\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.model-selector {\n  margin-bottom: 1.5rem;\n  background-color: var(--bg-card);\n  padding: 1.5rem;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-sm);\n  transition: box-shadow 0.3s ease;\n}\n\n.model-selector:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.model-selector label {\n  margin-right: 1rem;\n  font-weight: 600;\n  color: var(--text-dark);\n}\n\n.model-selector select {\n  padding: 0.7rem 1rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  min-width: 220px;\n  font-size: 1rem;\n  background-color: white;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  appearance: none;\n  background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 0.7rem top 50%;\n  background-size: 0.65rem auto;\n  padding-right: 1.8rem;\n}\n\n.model-selector select:hover,\n.model-selector select:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 3px var(--primary-light);\n  outline: none;\n}\n\n.prompt-form {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 2.5rem;\n  background-color: var(--bg-card);\n  padding: 1.8rem;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-sm);\n  transition: all 0.3s ease;\n}\n\n.prompt-form:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.prompt-form textarea {\n  width: 100%;\n  padding: 1rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  resize: vertical;\n  min-height: 120px;\n  font-size: 1rem;\n  font-family: inherit;\n  margin-bottom: 1rem;\n  transition: all 0.2s ease;\n}\n\n.prompt-form textarea:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 3px var(--primary-light);\n  outline: none;\n}\n\n.prompt-form button {\n  align-self: flex-end;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 140px;\n  padding: 0.7rem 1.2rem;\n  background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.prompt-form button:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(124, 77, 255, 0.3);\n}\n\n.prompt-form button:active:not(:disabled) {\n  transform: translateY(0);\n}\n\n.prompt-form button:disabled {\n  background: #cbd5e0;\n  cursor: not-allowed;\n}\n\n.loading {\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  border: 2px solid rgba(255, 255, 255, 0.5);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s ease-in-out infinite;\n  margin-left: 10px;\n}\n\n.error-message {\n  padding: 1.2rem;\n  background-color: #fff0f0;\n  border-left: 4px solid #e53e3e;\n  border-radius: 8px;\n  margin-bottom: 1.5rem;\n  color: #c53030;\n  animation: pulse 2s infinite;\n}\n\n.conversations {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.conversation-item {\n  background-color: var(--bg-card);\n  border-radius: var(--border-radius);\n  overflow: hidden;\n  box-shadow: var(--shadow-sm);\n  transition: all 0.3s ease;\n  animation: fadeIn 0.5s ease-out;\n}\n\n.conversation-item:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.prompt-container,\n.response-container {\n  padding: 1.8rem;\n}\n\n.prompt-container {\n  background-color: #f3f4f8;\n  border-bottom: 1px solid var(--border-color);\n  position: relative;\n}\n\n.prompt-container::before {\n  content: '问';\n  position: absolute;\n  right: 20px;\n  top: 15px;\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: rgba(0, 0, 0, 0.05);\n}\n\n.response-container {\n  position: relative;\n}\n\n.response-container::before {\n  content: '答';\n  position: absolute;\n  right: 20px;\n  top: 15px;\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: rgba(0, 0, 0, 0.05);\n}\n\n.prompt-container strong,\n.response-container strong {\n  display: block;\n  margin-bottom: 0.8rem;\n  color: var(--text-dark);\n  font-size: 1.1rem;\n  font-weight: 600;\n}\n\n.response-content {\n  line-height: 1.8;\n  margin-bottom: 1.5rem;\n  color: var(--text-dark);\n}\n\n.response-content code {\n  background-color: #f1f5f9;\n  padding: 0.2rem 0.4rem;\n  border-radius: 4px;\n  font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, monospace;\n  font-size: 0.9rem;\n  color: var(--primary-color);\n}\n\n.response-content pre {\n  background-color: #282c34;\n  color: #f8f8f2;\n  padding: 1.2rem;\n  border-radius: 8px;\n  overflow-x: auto;\n  margin: 1.2rem 0;\n}\n\n.response-content pre code {\n  background-color: transparent;\n  color: inherit;\n  padding: 0;\n}\n\n.response-content p {\n  margin-bottom: 1rem;\n}\n\n.response-content h1,\n.response-content h2,\n.response-content h3,\n.response-content h4 {\n  margin: 1.5rem 0 1rem;\n  color: var(--text-dark);\n}\n\n.response-content ul,\n.response-content ol {\n  margin-left: 1.5rem;\n  margin-bottom: 1rem;\n}\n\n.response-content blockquote {\n  border-left: 4px solid var(--primary-light);\n  padding-left: 1rem;\n  margin-left: 0;\n  margin-right: 0;\n  color: var(--text-light);\n}\n\n.response-metadata {\n  display: flex;\n  gap: 1.5rem;\n  color: var(--text-light);\n  font-size: 0.875rem;\n  border-top: 1px solid var(--border-color);\n  padding-top: 1rem;\n  margin-top: 1rem;\n}\n\n.response-metadata span {\n  display: flex;\n  align-items: center;\n}\n\n.response-metadata span::before {\n  content: '';\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  background-color: var(--primary-color);\n  border-radius: 50%;\n  margin-right: 8px;\n}\n\n/* 返回顶部按钮 */\n.back-to-top {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n  color: white;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border: none;\n  transition: all 0.3s ease;\n  z-index: 100;\n  animation: fadeIn 0.3s ease-out;\n}\n\n.back-to-top:hover {\n  background-color: var(--primary-hover);\n  transform: translateY(-5px);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n}\n\n.back-to-top i {\n  font-size: 1.2rem;\n}\n\n/* 移动端响应式设计 */\n@media (max-width: 768px) {\n  .container {\n    padding: 1.5rem;\n    margin: 0;\n    max-width: 100%;\n  }\n\n  .header {\n    margin-bottom: 2rem;\n    padding-bottom: 1.5rem;\n  }\n\n  .header h1 {\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n  }\n\n  .header p {\n    font-size: 1rem;\n  }\n\n  .model-selector {\n    padding: 1.2rem;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .model-selector label {\n    margin-bottom: 0.5rem;\n    margin-right: 0;\n  }\n\n  .model-selector select {\n    min-width: 100%;\n    width: 100%;\n  }\n\n  .prompt-form {\n    padding: 1.2rem;\n  }\n\n  .prompt-form textarea {\n    min-height: 100px;\n  }\n\n  .prompt-form button {\n    width: 100%;\n    min-width: auto;\n    align-self: center;\n  }\n\n  .response-metadata {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .prompt-container,\n  .response-container {\n    padding: 1.2rem;\n  }\n\n  .prompt-container::before,\n  .response-container::before {\n    font-size: 2rem;\n    right: 10px;\n    top: 10px;\n  }\n\n  .response-content pre {\n    padding: 1rem;\n    font-size: 0.9rem;\n  }\n\n  .back-to-top {\n    width: 45px;\n    height: 45px;\n    bottom: 15px;\n    right: 15px;\n  }\n}\n\n/* 适配小屏幕手机 */\n@media (max-width: 480px) {\n  .container {\n    padding: 1rem;\n  }\n\n  .header h1 {\n    font-size: 1.8rem;\n  }\n\n  .conversation-item {\n    border-radius: 8px;\n  }\n\n  .prompt-container,\n  .response-container {\n    padding: 1rem;\n  }\n\n  .prompt-container::before,\n  .response-container::before {\n    font-size: 1.5rem;\n  }\n\n  .response-content {\n    font-size: 0.95rem;\n  }\n\n  .response-content pre {\n    margin: 1rem 0;\n    font-size: 0.85rem;\n  }\n\n  .back-to-top {\n    width: 40px;\n    height: 40px;\n    bottom: 10px;\n    right: 10px;\n  }\n} "],sourceRoot:""}]);const d=c},659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},788:e=>{var t=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,n=/\n/g,r=/^\s*/,i=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,o=/^:\s*/,a=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,s=/^[;\s]*/,l=/^\s+|\s+$/g,u="";function c(e){return e?e.replace(l,u):u}e.exports=function(e,l){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];l=l||{};var f=1,d=1;function p(e){var t=e.match(n);t&&(f+=t.length);var r=e.lastIndexOf("\n");d=~r?e.length-r:d+e.length}function h(){var e={line:f,column:d};return function(t){return t.position=new m(e),b(),t}}function m(e){this.start=e,this.end={line:f,column:d},this.source=l.source}m.prototype.content=e;var y=[];function v(t){var n=new Error(l.source+":"+f+":"+d+": "+t);if(n.reason=t,n.filename=l.source,n.line=f,n.column=d,n.source=e,!l.silent)throw n;y.push(n)}function g(t){var n=t.exec(e);if(n){var r=n[0];return p(r),e=e.slice(r.length),n}}function b(){g(r)}function A(e){var t;for(e=e||[];t=k();)!1!==t&&e.push(t);return e}function k(){var t=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var n=2;u!=e.charAt(n)&&("*"!=e.charAt(n)||"/"!=e.charAt(n+1));)++n;if(n+=2,u===e.charAt(n-1))return v("End of comment missing");var r=e.slice(2,n-2);return d+=2,p(r),e=e.slice(n),d+=2,t({type:"comment",comment:r})}}function E(){var e=h(),n=g(i);if(n){if(k(),!g(o))return v("property missing ':'");var r=g(a),l=e({type:"declaration",property:c(n[0].replace(t,u)),value:r?c(r[0].replace(t,u)):u});return g(s),l}}return b(),function(){var e,t=[];for(A(t);e=E();)!1!==e&&(t.push(e),A(t));return t}()}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},848:(e,t,n)=>{"use strict";e.exports=n(20)},849:e=>{"use strict";var t=Object.prototype.hasOwnProperty,n=Object.prototype.toString,r=Object.defineProperty,i=Object.getOwnPropertyDescriptor,o=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===n.call(e)},a=function(e){if(!e||"[object Object]"!==n.call(e))return!1;var r,i=t.call(e,"constructor"),o=e.constructor&&e.constructor.prototype&&t.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!i&&!o)return!1;for(r in e);return void 0===r||t.call(e,r)},s=function(e,t){r&&"__proto__"===t.name?r(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},l=function(e,n){if("__proto__"===n){if(!t.call(e,n))return;if(i)return i(e,n).value}return e[n]};e.exports=function e(){var t,n,r,i,u,c,f=arguments[0],d=1,p=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},d=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});d<p;++d)if(null!=(t=arguments[d]))for(n in t)r=l(f,n),f!==(i=l(t,n))&&(h&&i&&(a(i)||(u=o(i)))?(u?(u=!1,c=r&&o(r)?r:[]):c=r&&a(r)?r:{},s(f,{name:n,newValue:e(h,c,i)})):void 0!==i&&s(f,{name:n,newValue:i}));return f}},917:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.camelCase=void 0;var n=/^--[a-zA-Z0-9_-]+$/,r=/-([a-z])/g,i=/^[^-]+$/,o=/^-(webkit|moz|ms|o|khtml)-/,a=/^-(ms)-/,s=function(e,t){return t.toUpperCase()},l=function(e,t){return"".concat(t,"-")};t.camelCase=function(e,t){return void 0===t&&(t={}),function(e){return!e||i.test(e)||n.test(e)}(e)?e:(e=e.toLowerCase(),(e=t.reactCompat?e.replace(a,l):e.replace(o,l)).replace(r,s))}},958:e=>{"use strict";e.exports="data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},982:(e,t,n)=>{"use strict";e.exports=n(463)}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e].call(o.exports,o,o.exports,i),o.exports}i.m=n,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.b=document.baseURI||self.location.href,i.nc=void 0,(()=>{"use strict";var e={};i.r(e),i.d(e,{boolean:()=>Dr,booleanish:()=>Br,commaOrSpaceSeparated:()=>Mr,commaSeparated:()=>Lr,number:()=>Rr,overloadedBoolean:()=>Pr,spaceSeparated:()=>Fr});var t={};i.r(t),i.d(t,{attentionMarkers:()=>da,contentInitial:()=>aa,disable:()=>pa,document:()=>oa,flow:()=>la,flowInitial:()=>sa,insideSpan:()=>fa,string:()=>ua,text:()=>ca});var n=i(848),r=i(540),o=i(338),a=function(e,t){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},a(e,t)};function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var l=function(){return l=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},l.apply(this,arguments)};function u(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function c(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}function d(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var p="Invariant Violation",h=Object.setPrototypeOf,m=void 0===h?function(e,t){return e.__proto__=t,e}:h,y=function(e){function t(n){void 0===n&&(n=p);var r=e.call(this,"number"==typeof n?p+": "+n+" (see https://github.com/apollographql/invariant-packages)":n)||this;return r.framesToPop=1,r.name=p,m(r,t.prototype),r}return s(t,e),t}(Error);function v(e,t){if(!e)throw new y(t)}var g,b=["debug","log","warn","error","silent"],A=b.indexOf("log");function k(e){return function(){if(b.indexOf(e)>=A)return(console[e]||console.log).apply(console,arguments)}}(g=v||(v={})).debug=k("debug"),g.log=k("log"),g.warn=k("warn"),g.error=k("error");var E="3.13.8";function x(e){try{return e()}catch(e){}}const w=x((function(){return globalThis}))||x((function(){return window}))||x((function(){return self}))||x((function(){return global}))||x((function(){return x.constructor("return this")()}));var C=new Map;function S(e){var t=C.get(e)||1;return C.set(e,t+1),"".concat(e,":").concat(t,":").concat(Math.random().toString(36).slice(2))}function _(e,t){void 0===t&&(t=0);var n=S("stringifyForDisplay");return JSON.stringify(e,(function(e,t){return void 0===t?n:t}),t).split(JSON.stringify(n)).join("<undefined>")}function T(e){return function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];if("number"==typeof t){var i=t;(t=B(i))||(t=P(i,n),n=[])}e.apply(void 0,[t].concat(n))}}var O=Object.assign((function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];e||v(e,B(t,n)||P(t,n))}),{debug:T(v.debug),log:T(v.log),warn:T(v.warn),error:T(v.error)});function I(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new y(B(e,t)||P(e,t))}var N=Symbol.for("ApolloErrorMessageHandler_"+E);function D(e){if("string"==typeof e)return e;try{return _(e,2).slice(0,1e3)}catch(e){return"<non-serializable>"}}function B(e,t){if(void 0===t&&(t=[]),e)return w[N]&&w[N](e,t.map(D))}function P(e,t){if(void 0===t&&(t=[]),e)return"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#".concat(encodeURIComponent(JSON.stringify({version:E,message:e,args:t.map(D)})))}globalThis.__DEV__;var R=i(243),F=i.t(R,2),L="ReactNative"==x((function(){return navigator.product})),M="function"==typeof WeakMap&&!(L&&!global.HermesInternal),z="function"==typeof WeakSet,j="function"==typeof Symbol&&"function"==typeof Symbol.for,V=j&&Symbol.asyncIterator,q="function"==typeof x((function(){return window.document.createElement})),U=x((function(){return navigator.userAgent.indexOf("jsdom")>=0}))||!1,Q=(q||L)&&!U,W=j?Symbol.for("__APOLLO_CONTEXT__"):"__APOLLO_CONTEXT__";function H(){O("createContext"in F,54);var e=R.createContext[W];return e||(Object.defineProperty(R.createContext,W,{value:e=R.createContext({}),enumerable:!1,writable:!1,configurable:!0}),e.displayName="ApolloContext"),e}function Y(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Object.create(null);return e.forEach((function(e){e&&Object.keys(e).forEach((function(t){var r=e[t];void 0!==r&&(n[t]=r)}))})),n}function $(e,t){return Y(e,t,t.variables&&{variables:Y(l(l({},e&&e.variables),t.variables))})}var K=!1,G=F.useSyncExternalStore||function(e,t,n){var r=t();!1===globalThis.__DEV__||K||r===t()||(K=!0,!1!==globalThis.__DEV__&&O.error(68));var i=R.useState({inst:{value:r,getSnapshot:t}}),o=i[0].inst,a=i[1];return Q?R.useLayoutEffect((function(){Object.assign(o,{value:r,getSnapshot:t}),X(o)&&a({inst:o})}),[e,r,t]):Object.assign(o,{value:r,getSnapshot:t}),R.useEffect((function(){return X(o)&&a({inst:o}),e((function(){X(o)&&a({inst:o})}))}),[e]),r};function X(e){var t=e.value,n=e.getSnapshot;try{return t!==n()}catch(e){return!0}}const{toString:J,hasOwnProperty:Z}=Object.prototype,ee=Function.prototype.toString,te=new Map;function ne(e,t){try{return ie(e,t)}finally{te.clear()}}const re=ne;function ie(e,t){if(e===t)return!0;const n=J.call(e);if(n!==J.call(t))return!1;switch(n){case"[object Array]":if(e.length!==t.length)return!1;case"[object Object]":{if(le(e,t))return!0;const n=oe(e),r=oe(t),i=n.length;if(i!==r.length)return!1;for(let e=0;e<i;++e)if(!Z.call(t,n[e]))return!1;for(let r=0;r<i;++r){const i=n[r];if(!ie(e[i],t[i]))return!1}return!0}case"[object Error]":return e.name===t.name&&e.message===t.message;case"[object Number]":if(e!=e)return t!=t;case"[object Boolean]":case"[object Date]":return+e==+t;case"[object RegExp]":case"[object String]":return e==`${t}`;case"[object Map]":case"[object Set]":{if(e.size!==t.size)return!1;if(le(e,t))return!0;const r=e.entries(),i="[object Map]"===n;for(;;){const e=r.next();if(e.done)break;const[n,o]=e.value;if(!t.has(n))return!1;if(i&&!ie(o,t.get(n)))return!1}return!0}case"[object Uint16Array]":case"[object Uint8Array]":case"[object Uint32Array]":case"[object Int32Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object ArrayBuffer]":e=new Uint8Array(e),t=new Uint8Array(t);case"[object DataView]":{let n=e.byteLength;if(n===t.byteLength)for(;n--&&e[n]===t[n];);return-1===n}case"[object AsyncFunction]":case"[object GeneratorFunction]":case"[object AsyncGeneratorFunction]":case"[object Function]":{const n=ee.call(e);return n===ee.call(t)&&!function(e,t){const n=e.length-t.length;return n>=0&&e.indexOf(t,n)===n}(n,se)}}return!1}function oe(e){return Object.keys(e).filter(ae,e)}function ae(e){return void 0!==this[e]}const se="{ [native code] }";function le(e,t){let n=te.get(e);if(n){if(n.has(t))return!0}else te.set(e,n=new Set);return n.add(t),!1}function ue(e){return null!==e&&"object"==typeof e}var ce=Symbol();function fe(e){return!!e.extensions&&Array.isArray(e.extensions[ce])}function de(e){return e.hasOwnProperty("graphQLErrors")}var pe,he=function(e){function t(n){var r,i,o=n.graphQLErrors,a=n.protocolErrors,s=n.clientErrors,l=n.networkError,u=n.errorMessage,c=n.extraInfo,f=e.call(this,u)||this;return f.name="ApolloError",f.graphQLErrors=o||[],f.protocolErrors=a||[],f.clientErrors=s||[],f.networkError=l||null,f.message=u||(i=d(d(d([],(r=f).graphQLErrors,!0),r.clientErrors,!0),r.protocolErrors,!0),r.networkError&&i.push(r.networkError),i.map((function(e){return ue(e)&&e.message||"Error message not found."})).join("\n")),f.extraInfo=c,f.cause=d(d(d([l],o||[],!0),a||[],!0),s||[],!0).find((function(e){return!!e}))||null,f.__proto__=t.prototype,f}return s(t,e),t}(Error);function me(e){return!!e&&e<7}function ye(e,t){if(!Boolean(e))throw new Error(t)}function ve(e){return ge(e,[])}function ge(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";const n=[...t,e];if(function(e){return"function"==typeof e.toJSON}(e)){const t=e.toJSON();if(t!==e)return"string"==typeof t?t:ge(t,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";const n=Math.min(10,e.length),r=e.length-n,i=[];for(let r=0;r<n;++r)i.push(ge(e[r],t));return 1===r?i.push("... 1 more item"):r>1&&i.push(`... ${r} more items`),"["+i.join(", ")+"]"}(e,n);return function(e,t){const n=Object.entries(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){const t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}(e)+"]";const r=n.map((([e,n])=>e+": "+ge(n,t)));return"{ "+r.join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}!function(e){e[e.loading=1]="loading",e[e.setVariables=2]="setVariables",e[e.fetchMore=3]="fetchMore",e[e.refetch=4]="refetch",e[e.poll=6]="poll",e[e.ready=7]="ready",e[e.error=8]="error"}(pe||(pe={}));class be{constructor(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}class Ae{constructor(e,t,n,r,i,o){this.kind=e,this.start=t,this.end=n,this.line=r,this.column=i,this.value=o,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}const ke={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},Ee=new Set(Object.keys(ke));function xe(e){const t=null==e?void 0:e.kind;return"string"==typeof t&&Ee.has(t)}var we,Ce,Se;!function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(we||(we={})),(Se=Ce||(Ce={})).NAME="Name",Se.DOCUMENT="Document",Se.OPERATION_DEFINITION="OperationDefinition",Se.VARIABLE_DEFINITION="VariableDefinition",Se.SELECTION_SET="SelectionSet",Se.FIELD="Field",Se.ARGUMENT="Argument",Se.FRAGMENT_SPREAD="FragmentSpread",Se.INLINE_FRAGMENT="InlineFragment",Se.FRAGMENT_DEFINITION="FragmentDefinition",Se.VARIABLE="Variable",Se.INT="IntValue",Se.FLOAT="FloatValue",Se.STRING="StringValue",Se.BOOLEAN="BooleanValue",Se.NULL="NullValue",Se.ENUM="EnumValue",Se.LIST="ListValue",Se.OBJECT="ObjectValue",Se.OBJECT_FIELD="ObjectField",Se.DIRECTIVE="Directive",Se.NAMED_TYPE="NamedType",Se.LIST_TYPE="ListType",Se.NON_NULL_TYPE="NonNullType",Se.SCHEMA_DEFINITION="SchemaDefinition",Se.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",Se.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",Se.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",Se.FIELD_DEFINITION="FieldDefinition",Se.INPUT_VALUE_DEFINITION="InputValueDefinition",Se.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",Se.UNION_TYPE_DEFINITION="UnionTypeDefinition",Se.ENUM_TYPE_DEFINITION="EnumTypeDefinition",Se.ENUM_VALUE_DEFINITION="EnumValueDefinition",Se.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",Se.DIRECTIVE_DEFINITION="DirectiveDefinition",Se.SCHEMA_EXTENSION="SchemaExtension",Se.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",Se.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",Se.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",Se.UNION_TYPE_EXTENSION="UnionTypeExtension",Se.ENUM_TYPE_EXTENSION="EnumTypeExtension",Se.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension";const _e=Object.freeze({});function Te(e,t,n=ke){const r=new Map;for(const e of Object.values(Ce))r.set(e,Oe(t,e));let i,o,a,s=Array.isArray(e),l=[e],u=-1,c=[],f=e;const d=[],p=[];do{u++;const e=u===l.length,v=e&&0!==c.length;if(e){if(o=0===p.length?void 0:d[d.length-1],f=a,a=p.pop(),v)if(s){f=f.slice();let e=0;for(const[t,n]of c){const r=t-e;null===n?(f.splice(r,1),e++):f[r]=n}}else{f={...f};for(const[e,t]of c)f[e]=t}u=i.index,l=i.keys,c=i.edits,s=i.inArray,i=i.prev}else if(a){if(o=s?u:l[u],f=a[o],null==f)continue;d.push(o)}let g;if(!Array.isArray(f)){var h,m;xe(f)||ye(!1,`Invalid AST Node: ${ve(f)}.`);const n=e?null===(h=r.get(f.kind))||void 0===h?void 0:h.leave:null===(m=r.get(f.kind))||void 0===m?void 0:m.enter;if(g=null==n?void 0:n.call(t,f,o,a,d,p),g===_e)break;if(!1===g){if(!e){d.pop();continue}}else if(void 0!==g&&(c.push([o,g]),!e)){if(!xe(g)){d.pop();continue}f=g}}var y;void 0===g&&v&&c.push([o,f]),e?d.pop():(i={inArray:s,index:u,keys:l,edits:c,prev:i},s=Array.isArray(f),l=s?f:null!==(y=n[f.kind])&&void 0!==y?y:[],u=-1,c=[],a&&p.push(a),a=f)}while(void 0!==i);return 0!==c.length?c[c.length-1][1]:e}function Oe(e,t){const n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function Ie(e,t){var n=t,r=[];return e.definitions.forEach((function(e){if("OperationDefinition"===e.kind)throw I(85,e.operation,e.name?" named '".concat(e.name.value,"'"):"");"FragmentDefinition"===e.kind&&r.push(e)})),void 0===n&&(O(1===r.length,86,r.length),n=r[0].name.value),l(l({},e),{definitions:d([{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:n}}]}}],e.definitions,!0)})}function Ne(e){void 0===e&&(e=[]);var t={};return e.forEach((function(e){t[e.name.value]=e})),t}function De(e,t){switch(e.kind){case"InlineFragment":return e;case"FragmentSpread":var n=e.name.value;if("function"==typeof t)return t(n);var r=t&&t[n];return O(r,87,n),r||null;default:return null}}function Be(){}const Pe=Be,Re="undefined"!=typeof WeakRef?WeakRef:function(e){return{deref:()=>e}},Fe="undefined"!=typeof WeakMap?WeakMap:Map,Le="undefined"!=typeof FinalizationRegistry?FinalizationRegistry:function(){return{register:Be,unregister:Be}};class Me{constructor(e=1/0,t=Pe){this.max=e,this.dispose=t,this.map=new Fe,this.newest=null,this.oldest=null,this.unfinalizedNodes=new Set,this.finalizationScheduled=!1,this.size=0,this.finalize=()=>{const e=this.unfinalizedNodes.values();for(let t=0;t<10024;t++){const t=e.next().value;if(!t)break;this.unfinalizedNodes.delete(t);const n=t.key;delete t.key,t.keyRef=new Re(n),this.registry.register(n,t,t)}this.unfinalizedNodes.size>0?queueMicrotask(this.finalize):this.finalizationScheduled=!1},this.registry=new Le(this.deleteNode.bind(this))}has(e){return this.map.has(e)}get(e){const t=this.getNode(e);return t&&t.value}getNode(e){const t=this.map.get(e);if(t&&t!==this.newest){const{older:e,newer:n}=t;n&&(n.older=e),e&&(e.newer=n),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=n)}return t}set(e,t){let n=this.getNode(e);return n?n.value=t:(n={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=n),this.newest=n,this.oldest=this.oldest||n,this.scheduleFinalization(n),this.map.set(e,n),this.size++,n.value)}clean(){for(;this.oldest&&this.size>this.max;)this.deleteNode(this.oldest)}deleteNode(e){e===this.newest&&(this.newest=e.older),e===this.oldest&&(this.oldest=e.newer),e.newer&&(e.newer.older=e.older),e.older&&(e.older.newer=e.newer),this.size--;const t=e.key||e.keyRef&&e.keyRef.deref();this.dispose(e.value,t),e.keyRef?this.registry.unregister(e):this.unfinalizedNodes.delete(e),t&&this.map.delete(t)}delete(e){const t=this.map.get(e);return!!t&&(this.deleteNode(t),!0)}scheduleFinalization(e){this.unfinalizedNodes.add(e),this.finalizationScheduled||(this.finalizationScheduled=!0,queueMicrotask(this.finalize))}}function ze(){}class je{constructor(e=1/0,t=ze){this.max=e,this.dispose=t,this.map=new Map,this.newest=null,this.oldest=null}has(e){return this.map.has(e)}get(e){const t=this.getNode(e);return t&&t.value}get size(){return this.map.size}getNode(e){const t=this.map.get(e);if(t&&t!==this.newest){const{older:e,newer:n}=t;n&&(n.older=e),e&&(e.newer=n),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=n)}return t}set(e,t){let n=this.getNode(e);return n?n.value=t:(n={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=n),this.newest=n,this.oldest=this.oldest||n,this.map.set(e,n),n.value)}clean(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)}delete(e){const t=this.map.get(e);return!!t&&(t===this.newest&&(this.newest=t.older),t===this.oldest&&(this.oldest=t.newer),t.newer&&(t.newer.older=t.older),t.older&&(t.older.newer=t.newer),this.map.delete(e),this.dispose(t.value,e),!0)}}var Ve=new WeakSet;function qe(e){e.size<=(e.max||-1)||Ve.has(e)||(Ve.add(e),setTimeout((function(){e.clean(),Ve.delete(e)}),100))}var Ue=function(e,t){var n=new Me(e,t);return n.set=function(e,t){var n=Me.prototype.set.call(this,e,t);return qe(this),n},n},Qe=function(e,t){var n=new je(e,t);return n.set=function(e,t){var n=je.prototype.set.call(this,e,t);return qe(this),n},n},We=Symbol.for("apollo.cacheSize"),He=l({},w[We]),Ye={};function $e(e,t){Ye[e]=t}var Ke=!1!==globalThis.__DEV__?function(){var e,t,n,r,i;if(!1===globalThis.__DEV__)throw new Error("only supported in development mode");return{limits:Object.fromEntries(Object.entries({parser:1e3,canonicalStringify:1e3,print:2e3,"documentTransform.cache":2e3,"queryManager.getDocumentInfo":2e3,"PersistedQueryLink.persistedQueryHashes":2e3,"fragmentRegistry.transform":2e3,"fragmentRegistry.lookup":1e3,"fragmentRegistry.findFragmentSpreads":4e3,"cache.fragmentQueryDocuments":1e3,"removeTypenameFromVariables.getVariableDefinitions":2e3,"inMemoryCache.maybeBroadcastWatch":5e3,"inMemoryCache.executeSelectionSet":5e4,"inMemoryCache.executeSubSelectedArray":1e4}).map((function(e){var t=e[0],n=e[1];return[t,He[t]||n]}))),sizes:l({print:null===(e=Ye.print)||void 0===e?void 0:e.call(Ye),parser:null===(t=Ye.parser)||void 0===t?void 0:t.call(Ye),canonicalStringify:null===(n=Ye.canonicalStringify)||void 0===n?void 0:n.call(Ye),links:rt(this.link),queryManager:{getDocumentInfo:this.queryManager.transformCache.size,documentTransforms:tt(this.queryManager.documentTransform)}},null===(i=(r=this.cache).getMemoryInternals)||void 0===i?void 0:i.call(r))}}:void 0,Ge=!1!==globalThis.__DEV__?function(){var e=this.config.fragments;return l(l({},Je.apply(this)),{addTypenameDocumentTransform:tt(this.addTypenameTransform),inMemoryCache:{executeSelectionSet:Ze(this.storeReader.executeSelectionSet),executeSubSelectedArray:Ze(this.storeReader.executeSubSelectedArray),maybeBroadcastWatch:Ze(this.maybeBroadcastWatch)},fragmentRegistry:{findFragmentSpreads:Ze(null==e?void 0:e.findFragmentSpreads),lookup:Ze(null==e?void 0:e.lookup),transform:Ze(null==e?void 0:e.transform)}})}:void 0,Xe=!1!==globalThis.__DEV__?Je:void 0;function Je(){return{cache:{fragmentQueryDocuments:Ze(this.getFragmentDoc)}}}function Ze(e){return function(e){return!!e&&"dirtyKey"in e}(e)?e.size:void 0}function et(e){return null!=e}function tt(e){return nt(e).map((function(e){return{cache:e}}))}function nt(e){return e?d(d([Ze(null==e?void 0:e.performWork)],nt(null==e?void 0:e.left),!0),nt(null==e?void 0:e.right),!0).filter(et):[]}function rt(e){var t;return e?d(d([null===(t=null==e?void 0:e.getMemoryInternals)||void 0===t?void 0:t.call(e)],rt(null==e?void 0:e.left),!0),rt(null==e?void 0:e.right),!0).filter(et):[]}var it,ot=Object.assign((function(e){return JSON.stringify(e,at)}),{reset:function(){it=new Qe(He.canonicalStringify||1e3)}});function at(e,t){if(t&&"object"==typeof t){var n=Object.getPrototypeOf(t);if(n===Object.prototype||null===n){var r=Object.keys(t);if(r.every(st))return t;var i=JSON.stringify(r),o=it.get(i);if(!o){r.sort();var a=JSON.stringify(r);o=it.get(a)||r,it.set(i,o),it.set(a,o)}var s=Object.create(n);return o.forEach((function(e){s[e]=t[e]})),s}}return t}function st(e,t,n){return 0===t||n[t-1]<=e}function lt(e){return{__ref:String(e)}}function ut(e){return Boolean(e&&"object"==typeof e&&"string"==typeof e.__ref)}function ct(e,t,n,r){if(function(e){return"IntValue"===e.kind}(n)||function(e){return"FloatValue"===e.kind}(n))e[t.value]=Number(n.value);else if(function(e){return"BooleanValue"===e.kind}(n)||function(e){return"StringValue"===e.kind}(n))e[t.value]=n.value;else if(function(e){return"ObjectValue"===e.kind}(n)){var i={};n.fields.map((function(e){return ct(i,e.name,e.value,r)})),e[t.value]=i}else if(function(e){return"Variable"===e.kind}(n)){var o=(r||{})[n.name.value];e[t.value]=o}else if(function(e){return"ListValue"===e.kind}(n))e[t.value]=n.values.map((function(e){var n={};return ct(n,t,e,r),n[t.value]}));else if(function(e){return"EnumValue"===e.kind}(n))e[t.value]=n.value;else{if(!function(e){return"NullValue"===e.kind}(n))throw I(96,t.value,n.kind);e[t.value]=null}}!1!==globalThis.__DEV__&&$e("canonicalStringify",(function(){return it.size})),ot.reset();var ft=["connection","include","skip","client","rest","export","nonreactive"],dt=ot,pt=Object.assign((function(e,t,n){if(t&&n&&n.connection&&n.connection.key){if(n.connection.filter&&n.connection.filter.length>0){var r=n.connection.filter?n.connection.filter:[];r.sort();var i={};return r.forEach((function(e){i[e]=t[e]})),"".concat(n.connection.key,"(").concat(dt(i),")")}return n.connection.key}var o=e;if(t){var a=dt(t);o+="(".concat(a,")")}return n&&Object.keys(n).forEach((function(e){-1===ft.indexOf(e)&&(n[e]&&Object.keys(n[e]).length?o+="@".concat(e,"(").concat(dt(n[e]),")"):o+="@".concat(e))})),o}),{setStringify:function(e){var t=dt;return dt=e,t}});function ht(e,t){if(e.arguments&&e.arguments.length){var n={};return e.arguments.forEach((function(e){var r=e.name,i=e.value;return ct(n,r,i,t)})),n}return null}function mt(e){return e.alias?e.alias.value:e.name.value}function yt(e,t,n){for(var r,i=0,o=t.selections;i<o.length;i++)if(vt(l=o[i])){if("__typename"===l.name.value)return e[mt(l)]}else r?r.push(l):r=[l];if("string"==typeof e.__typename)return e.__typename;if(r)for(var a=0,s=r;a<s.length;a++){var l,u=yt(e,De(l=s[a],n).selectionSet,n);if("string"==typeof u)return u}}function vt(e){return"Field"===e.kind}function gt(e){O(e&&"Document"===e.kind,88);var t=e.definitions.filter((function(e){return"FragmentDefinition"!==e.kind})).map((function(e){if("OperationDefinition"!==e.kind)throw I(89,e.kind);return e}));return O(t.length<=1,90,t.length),e}function bt(e){return gt(e),e.definitions.filter((function(e){return"OperationDefinition"===e.kind}))[0]}function At(e){return e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&!!e.name})).map((function(e){return e.name.value}))[0]||null}function kt(e){return e.definitions.filter((function(e){return"FragmentDefinition"===e.kind}))}function Et(e){var t=bt(e);return O(t&&"query"===t.operation,91),t}function xt(e){O("Document"===e.kind,92),O(e.definitions.length<=1,93);var t=e.definitions[0];return O("FragmentDefinition"===t.kind,94),t}function wt(e){var t;gt(e);for(var n=0,r=e.definitions;n<r.length;n++){var i=r[n];if("OperationDefinition"===i.kind){var o=i.operation;if("query"===o||"mutation"===o||"subscription"===o)return i}"FragmentDefinition"!==i.kind||t||(t=i)}if(t)return t;throw I(95)}function Ct(e){var t=Object.create(null),n=e&&e.variableDefinitions;return n&&n.length&&n.forEach((function(e){e.defaultValue&&ct(t,e.variable.name,e.defaultValue)})),t}var St=Object.prototype.toString;function _t(e){return Tt(e)}function Tt(e,t){switch(St.call(e)){case"[object Array]":if((t=t||new Map).has(e))return t.get(e);var n=e.slice(0);return t.set(e,n),n.forEach((function(e,r){n[r]=Tt(e,t)})),n;case"[object Object]":if((t=t||new Map).has(e))return t.get(e);var r=Object.create(Object.getPrototypeOf(e));return t.set(e,r),Object.keys(e).forEach((function(n){r[n]=Tt(e[n],t)})),r;default:return e}}function Ot(e,t,n){var r=[];e.forEach((function(e){return e[t]&&r.push(e)})),r.forEach((function(e){return e[t](n)}))}function It(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Nt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dt(e,t,n){return t&&Nt(e.prototype,t),n&&Nt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var Bt=function(){return"function"==typeof Symbol},Pt=function(e){return Bt()&&Boolean(Symbol[e])},Rt=function(e){return Pt(e)?Symbol[e]:"@@"+e};Bt()&&!Pt("observable")&&(Symbol.observable=Symbol("observable"));var Ft=Rt("iterator"),Lt=Rt("observable"),Mt=Rt("species");function zt(e,t){var n=e[t];if(null!=n){if("function"!=typeof n)throw new TypeError(n+" is not a function");return n}}function jt(e){var t=e.constructor;return void 0!==t&&null===(t=t[Mt])&&(t=void 0),void 0!==t?t:Gt}function Vt(e){return e instanceof Gt}function qt(e){qt.log?qt.log(e):setTimeout((function(){throw e}))}function Ut(e){Promise.resolve().then((function(){try{e()}catch(e){qt(e)}}))}function Qt(e){var t=e._cleanup;if(void 0!==t&&(e._cleanup=void 0,t))try{if("function"==typeof t)t();else{var n=zt(t,"unsubscribe");n&&n.call(t)}}catch(e){qt(e)}}function Wt(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function Ht(e,t,n){e._state="running";var r=e._observer;try{var i=zt(r,t);switch(t){case"next":i&&i.call(r,n);break;case"error":if(Wt(e),!i)throw n;i.call(r,n);break;case"complete":Wt(e),i&&i.call(r)}}catch(e){qt(e)}"closed"===e._state?Qt(e):"running"===e._state&&(e._state="ready")}function Yt(e,t,n){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:t,value:n}],void Ut((function(){return function(e){var t=e._queue;if(t){e._queue=void 0,e._state="ready";for(var n=0;n<t.length&&(Ht(e,t[n].type,t[n].value),"closed"!==e._state);++n);}}(e)}))):void Ht(e,t,n);e._queue.push({type:t,value:n})}}var $t=function(){function e(e,t){this._cleanup=void 0,this._observer=e,this._queue=void 0,this._state="initializing";var n=new Kt(this);try{this._cleanup=t.call(void 0,n)}catch(e){n.error(e)}"initializing"===this._state&&(this._state="ready")}return e.prototype.unsubscribe=function(){"closed"!==this._state&&(Wt(this),Qt(this))},Dt(e,[{key:"closed",get:function(){return"closed"===this._state}}]),e}(),Kt=function(){function e(e){this._subscription=e}var t=e.prototype;return t.next=function(e){Yt(this._subscription,"next",e)},t.error=function(e){Yt(this._subscription,"error",e)},t.complete=function(){Yt(this._subscription,"complete")},Dt(e,[{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),Gt=function(){function e(t){if(!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof t)throw new TypeError("Observable initializer must be a function");this._subscriber=t}var t=e.prototype;return t.subscribe=function(e){return"object"==typeof e&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new $t(e,this._subscriber)},t.forEach=function(e){var t=this;return new Promise((function(n,r){if("function"==typeof e)var i=t.subscribe({next:function(t){try{e(t,o)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n});else r(new TypeError(e+" is not a function"));function o(){i.unsubscribe(),n()}}))},t.map=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(jt(this))((function(n){return t.subscribe({next:function(t){try{t=e(t)}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})}))},t.filter=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(jt(this))((function(n){return t.subscribe({next:function(t){try{if(!e(t))return}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})}))},t.reduce=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=jt(this),r=arguments.length>1,i=!1,o=arguments[1];return new n((function(n){return t.subscribe({next:function(t){var a=!i;if(i=!0,!a||r)try{o=e(o,t)}catch(e){return n.error(e)}else o=t},error:function(e){n.error(e)},complete:function(){if(!i&&!r)return n.error(new TypeError("Cannot reduce an empty sequence"));n.next(o),n.complete()}})}))},t.concat=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=jt(this);return new i((function(t){var r,o=0;return function e(a){r=a.subscribe({next:function(e){t.next(e)},error:function(e){t.error(e)},complete:function(){o===n.length?(r=void 0,t.complete()):e(i.from(n[o++]))}})}(e),function(){r&&(r.unsubscribe(),r=void 0)}}))},t.flatMap=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=jt(this);return new n((function(r){var i=[],o=t.subscribe({next:function(t){if(e)try{t=e(t)}catch(e){return r.error(e)}var o=n.from(t).subscribe({next:function(e){r.next(e)},error:function(e){r.error(e)},complete:function(){var e=i.indexOf(o);e>=0&&i.splice(e,1),a()}});i.push(o)},error:function(e){r.error(e)},complete:function(){a()}});function a(){o.closed&&0===i.length&&r.complete()}return function(){i.forEach((function(e){return e.unsubscribe()})),o.unsubscribe()}}))},t[Lt]=function(){return this},e.from=function(t){var n="function"==typeof this?this:e;if(null==t)throw new TypeError(t+" is not an object");var r=zt(t,Lt);if(r){var i=r.call(t);if(Object(i)!==i)throw new TypeError(i+" is not an object");return Vt(i)&&i.constructor===n?i:new n((function(e){return i.subscribe(e)}))}if(Pt("iterator")&&(r=zt(t,Ft)))return new n((function(e){Ut((function(){if(!e.closed){for(var n,i=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return It(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?It(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(r.call(t));!(n=i()).done;){var o=n.value;if(e.next(o),e.closed)return}e.complete()}}))}));if(Array.isArray(t))return new n((function(e){Ut((function(){if(!e.closed){for(var n=0;n<t.length;++n)if(e.next(t[n]),e.closed)return;e.complete()}}))}));throw new TypeError(t+" is not observable")},e.of=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return new("function"==typeof this?this:e)((function(e){Ut((function(){if(!e.closed){for(var t=0;t<n.length;++t)if(e.next(n[t]),e.closed)return;e.complete()}}))}))},Dt(e,null,[{key:Mt,get:function(){return this}}]),e}();function Xt(e){function t(t){Object.defineProperty(e,t,{value:Gt})}return j&&Symbol.species&&t(Symbol.species),t("@@species"),e}function Jt(e,t){var n=e.directives;return!n||!n.length||function(e){var t=[];return e&&e.length&&e.forEach((function(e){if(function(e){var t=e.name.value;return"skip"===t||"include"===t}(e)){var n=e.arguments,r=e.name.value;O(n&&1===n.length,79,r);var i=n[0];O(i.name&&"if"===i.name.value,80,r);var o=i.value;O(o&&("Variable"===o.kind||"BooleanValue"===o.kind),81,r),t.push({directive:e,ifArgument:i})}})),t}(n).every((function(e){var n=e.directive,r=e.ifArgument,i=!1;return"Variable"===r.value.kind?(i=t&&t[r.value.name.value],O(void 0!==i,78,n.name.value)):i=r.value.value,"skip"===n.name.value?!i:i}))}function Zt(e,t,n){var r=new Set(e),i=r.size;return Te(t,{Directive:function(e){if(r.delete(e.name.value)&&(!n||!r.size))return _e}}),n?!r.size:r.size<i}function en(e){return e&&Zt(["client","export"],e,!0)}function tn(e){var t,n,r=null===(t=e.directives)||void 0===t?void 0:t.find((function(e){return"unmask"===e.name.value}));if(!r)return"mask";var i=null===(n=r.arguments)||void 0===n?void 0:n.find((function(e){return"mode"===e.name.value}));return!1!==globalThis.__DEV__&&i&&(i.value.kind===Ce.VARIABLE?!1!==globalThis.__DEV__&&O.warn(82):i.value.kind!==Ce.STRING?!1!==globalThis.__DEV__&&O.warn(83):"migrate"!==i.value.value&&!1!==globalThis.__DEV__&&O.warn(84,i.value.value)),i&&"value"in i.value&&"migrate"===i.value.value?"migrate":"unmask"}function nn(e,t,n,r){var i=t.data,o=u(t,["data"]),a=n.data,s=u(n,["data"]);return re(o,s)&&rn(wt(e).selectionSet,i,a,{fragmentMap:Ne(kt(e)),variables:r})}function rn(e,t,n,r){if(t===n)return!0;var i=new Set;return e.selections.every((function(e){if(i.has(e))return!0;if(i.add(e),!Jt(e,r.variables))return!0;if(on(e))return!0;if(vt(e)){var o=mt(e),a=t&&t[o],s=n&&n[o],l=e.selectionSet;if(!l)return re(a,s);var u=Array.isArray(a),c=Array.isArray(s);if(u!==c)return!1;if(u&&c){var f=a.length;if(s.length!==f)return!1;for(var d=0;d<f;++d)if(!rn(l,a[d],s[d],r))return!1;return!0}return rn(l,a,s,r)}var p=De(e,r.fragmentMap);return p?!!on(p)||rn(p.selectionSet,t,n,r):void 0}))}function on(e){return!!e.directives&&e.directives.some(an)}function an(e){return"nonreactive"===e.name.value}Bt()&&Object.defineProperty(Gt,Symbol("extensions"),{value:{symbol:Lt,hostReportError:qt},configurable:!0});const sn=()=>Object.create(null),{forEach:ln,slice:un}=Array.prototype,{hasOwnProperty:cn}=Object.prototype;class fn{constructor(e=!0,t=sn){this.weakness=e,this.makeData=t}lookup(){return this.lookupArray(arguments)}lookupArray(e){let t=this;return ln.call(e,(e=>t=t.getChildTrie(e))),cn.call(t,"data")?t.data:t.data=this.makeData(un.call(e))}peek(){return this.peekArray(arguments)}peekArray(e){let t=this;for(let n=0,r=e.length;t&&n<r;++n){const r=t.mapFor(e[n],!1);t=r&&r.get(e[n])}return t&&t.data}remove(){return this.removeArray(arguments)}removeArray(e){let t;if(e.length){const n=e[0],r=this.mapFor(n,!1),i=r&&r.get(n);i&&(t=i.removeArray(un.call(e,1)),i.data||i.weak||i.strong&&i.strong.size||r.delete(n))}else t=this.data,delete this.data;return t}getChildTrie(e){const t=this.mapFor(e,!0);let n=t.get(e);return n||t.set(e,n=new fn(this.weakness,this.makeData)),n}mapFor(e,t){return this.weakness&&function(e){switch(typeof e){case"object":if(null===e)break;case"function":return!0}return!1}(e)?this.weak||(t?this.weak=new WeakMap:void 0):this.strong||(t?this.strong=new Map:void 0)}}let dn=null;const pn={};let hn=1;function mn(e){try{return e()}catch(e){}}const yn="@wry/context:Slot",vn=mn((()=>globalThis))||mn((()=>global))||Object.create(null),gn=vn[yn]||Array[yn]||function(e){try{Object.defineProperty(vn,yn,{value:e,enumerable:!1,writable:!1,configurable:!0})}finally{return e}}(class{constructor(){this.id=["slot",hn++,Date.now(),Math.random().toString(36).slice(2)].join(":")}hasValue(){for(let e=dn;e;e=e.parent)if(this.id in e.slots){const t=e.slots[this.id];if(t===pn)break;return e!==dn&&(dn.slots[this.id]=t),!0}return dn&&(dn.slots[this.id]=pn),!1}getValue(){if(this.hasValue())return dn.slots[this.id]}withValue(e,t,n,r){const i={__proto__:null,[this.id]:e},o=dn;dn={parent:o,slots:i};try{return t.apply(r,n)}finally{dn=o}}static bind(e){const t=dn;return function(){const n=dn;try{return dn=t,e.apply(this,arguments)}finally{dn=n}}}static noContext(e,t,n){if(!dn)return e.apply(n,t);{const r=dn;try{return dn=null,e.apply(n,t)}finally{dn=r}}}}),{bind:bn,noContext:An}=gn,kn=new gn,{hasOwnProperty:En}=Object.prototype,xn=Array.from||function(e){const t=[];return e.forEach((e=>t.push(e))),t};function wn(e){const{unsubscribe:t}=e;"function"==typeof t&&(e.unsubscribe=void 0,t())}const Cn=[];function Sn(e,t){if(!e)throw new Error(t||"assertion failure")}function _n(e,t){const n=e.length;return n>0&&n===t.length&&e[n-1]===t[n-1]}function Tn(e){switch(e.length){case 0:throw new Error("unknown value");case 1:return e[0];case 2:throw e[1]}}function On(e){return e.slice(0)}class In{constructor(e){this.fn=e,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],this.deps=null,++In.count}peek(){if(1===this.value.length&&!Bn(this))return Nn(this),this.value[0]}recompute(e){return Sn(!this.recomputing,"already recomputing"),Nn(this),Bn(this)?function(e,t){return jn(e),kn.withValue(e,Dn,[e,t]),function(e,t){if("function"==typeof e.subscribe)try{wn(e),e.unsubscribe=e.subscribe.apply(null,t)}catch(t){return e.setDirty(),!1}return!0}(e,t)&&function(e){e.dirty=!1,Bn(e)||Rn(e)}(e),Tn(e.value)}(this,e):Tn(this.value)}setDirty(){this.dirty||(this.dirty=!0,Pn(this),wn(this))}dispose(){this.setDirty(),jn(this),Fn(this,((e,t)=>{e.setDirty(),Vn(e,this)}))}forget(){this.dispose()}dependOn(e){e.add(this),this.deps||(this.deps=Cn.pop()||new Set),this.deps.add(e)}forgetDeps(){this.deps&&(xn(this.deps).forEach((e=>e.delete(this))),this.deps.clear(),Cn.push(this.deps),this.deps=null)}}function Nn(e){const t=kn.getValue();if(t)return e.parents.add(t),t.childValues.has(e)||t.childValues.set(e,[]),Bn(e)?Ln(t,e):Mn(t,e),t}function Dn(e,t){e.recomputing=!0;const{normalizeResult:n}=e;let r;n&&1===e.value.length&&(r=On(e.value)),e.value.length=0;try{if(e.value[0]=e.fn.apply(null,t),n&&r&&!_n(r,e.value))try{e.value[0]=n(e.value[0],r[0])}catch(e){}}catch(t){e.value[1]=t}e.recomputing=!1}function Bn(e){return e.dirty||!(!e.dirtyChildren||!e.dirtyChildren.size)}function Pn(e){Fn(e,Ln)}function Rn(e){Fn(e,Mn)}function Fn(e,t){const n=e.parents.size;if(n){const r=xn(e.parents);for(let i=0;i<n;++i)t(r[i],e)}}function Ln(e,t){Sn(e.childValues.has(t)),Sn(Bn(t));const n=!Bn(e);if(e.dirtyChildren){if(e.dirtyChildren.has(t))return}else e.dirtyChildren=Cn.pop()||new Set;e.dirtyChildren.add(t),n&&Pn(e)}function Mn(e,t){Sn(e.childValues.has(t)),Sn(!Bn(t));const n=e.childValues.get(t);0===n.length?e.childValues.set(t,On(t.value)):_n(n,t.value)||e.setDirty(),zn(e,t),Bn(e)||Rn(e)}function zn(e,t){const n=e.dirtyChildren;n&&(n.delete(t),0===n.size&&(Cn.length<100&&Cn.push(n),e.dirtyChildren=null))}function jn(e){e.childValues.size>0&&e.childValues.forEach(((t,n)=>{Vn(e,n)})),e.forgetDeps(),Sn(null===e.dirtyChildren)}function Vn(e,t){t.parents.delete(e),e.childValues.delete(t),zn(e,t)}In.count=0;const qn={setDirty:!0,dispose:!0,forget:!0};function Un(e){const t=new Map,n=e&&e.subscribe;function r(e){const r=kn.getValue();if(r){let i=t.get(e);i||t.set(e,i=new Set),r.dependOn(i),"function"==typeof n&&(wn(i),i.unsubscribe=n(e))}}return r.dirty=function(e,n){const r=t.get(e);if(r){const i=n&&En.call(qn,n)?n:"setDirty";xn(r).forEach((e=>e[i]())),t.delete(e),wn(r)}},r}let Qn;function Wn(...e){return(Qn||(Qn=new fn("function"==typeof WeakMap))).lookupArray(e)}const Hn=new Set;function Yn(e,{max:t=Math.pow(2,16),keyArgs:n,makeCacheKey:r=Wn,normalizeResult:i,subscribe:o,cache:a=je}=Object.create(null)){const s="function"==typeof a?new a(t,(e=>e.dispose())):a,l=function(){const t=r.apply(null,n?n.apply(null,arguments):arguments);if(void 0===t)return e.apply(null,arguments);let a=s.get(t);a||(s.set(t,a=new In(e)),a.normalizeResult=i,a.subscribe=o,a.forget=()=>s.delete(t));const l=a.recompute(Array.prototype.slice.call(arguments));return s.set(t,a),Hn.add(s),kn.hasValue()||(Hn.forEach((e=>e.clean())),Hn.clear()),l};function u(e){const t=e&&s.get(e);t&&t.setDirty()}function c(e){const t=e&&s.get(e);if(t)return t.peek()}function f(e){return!!e&&s.delete(e)}return Object.defineProperty(l,"size",{get:()=>s.size,configurable:!1,enumerable:!1}),Object.freeze(l.options={max:t,keyArgs:n,makeCacheKey:r,normalizeResult:i,subscribe:o,cache:s}),l.dirtyKey=u,l.dirty=function(){u(r.apply(null,arguments))},l.peekKey=c,l.peek=function(){return c(r.apply(null,arguments))},l.forgetKey=f,l.forget=function(){return f(r.apply(null,arguments))},l.makeCacheKey=r,l.getKey=n?function(){return r.apply(null,n.apply(null,arguments))}:r,Object.freeze(l)}var $n,Kn,Gn=Object.assign,Xn=Object.hasOwnProperty,Jn=function(e){function t(n){var r=n.queryManager,i=n.queryInfo,o=n.options,a=this,s=t.inactiveOnCreation.getValue();(a=e.call(this,(function(e){s&&(r.queries.set(a.queryId,i),s=!1);try{var t=e._subscription._observer;t&&!t.error&&(t.error=Zn)}catch(e){}var n=!a.observers.size;a.observers.add(e);var o=a.last;return o&&o.error?e.error&&e.error(o.error):o&&o.result&&e.next&&e.next(a.maskResult(o.result)),n&&a.reobserve().catch((function(){})),function(){a.observers.delete(e)&&!a.observers.size&&a.tearDownQuery()}}))||this).observers=new Set,a.subscriptions=new Set,a.dirty=!1,a.queryInfo=i,a.queryManager=r,a.waitForOwnResult=tr(o.fetchPolicy),a.isTornDown=!1,a.subscribeToMore=a.subscribeToMore.bind(a),a.maskResult=a.maskResult.bind(a);var u=r.defaultOptions.watchQuery,c=(void 0===u?{}:u).fetchPolicy,f=void 0===c?"cache-first":c,d=o.fetchPolicy,p=void 0===d?f:d,h=o.initialFetchPolicy,m=void 0===h?"standby"===p?f:p:h;a.options=l(l({},o),{initialFetchPolicy:m,fetchPolicy:p}),a.queryId=i.queryId||r.generateQueryId();var y=bt(a.query);return a.queryName=y&&y.name&&y.name.value,a}return s(t,e),Object.defineProperty(t.prototype,"query",{get:function(){return this.lastQuery||this.options.query},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"variables",{get:function(){return this.options.variables},enumerable:!1,configurable:!0}),t.prototype.result=function(){var e=this;return new Promise((function(t,n){var r={next:function(n){t(n),e.observers.delete(r),e.observers.size||e.queryManager.removeQuery(e.queryId),setTimeout((function(){i.unsubscribe()}),0)},error:n},i=e.subscribe(r)}))},t.prototype.resetDiff=function(){this.queryInfo.resetDiff()},t.prototype.getCurrentFullResult=function(e){void 0===e&&(e=!0);var t=this.getLastResult(!0),n=this.queryInfo.networkStatus||t&&t.networkStatus||pe.ready,r=l(l({},t),{loading:me(n),networkStatus:n}),i=this.options.fetchPolicy,o=void 0===i?"cache-first":i;if(tr(o)||this.queryManager.getDocumentInfo(this.query).hasForcedResolvers);else if(this.waitForOwnResult)this.queryInfo.updateWatch();else{var a=this.queryInfo.getDiff();(a.complete||this.options.returnPartialData)&&(r.data=a.result),ne(r.data,{})&&(r.data=void 0),a.complete?(delete r.partial,!a.complete||r.networkStatus!==pe.loading||"cache-first"!==o&&"cache-only"!==o||(r.networkStatus=pe.ready,r.loading=!1)):r.partial=!0,r.networkStatus===pe.ready&&(r.error||r.errors)&&(r.networkStatus=pe.error),!1===globalThis.__DEV__||a.complete||this.options.partialRefetch||r.loading||r.data||r.error||er(a.missing)}return e&&this.updateLastResult(r),r},t.prototype.getCurrentResult=function(e){return void 0===e&&(e=!0),this.maskResult(this.getCurrentFullResult(e))},t.prototype.isDifferentFromLastResult=function(e,t){if(!this.last)return!0;var n=this.queryManager.getDocumentInfo(this.query),r=this.queryManager.dataMasking,i=r?n.nonReactiveQuery:this.query;return(r||n.hasNonreactiveDirective?!nn(i,this.last.result,e,this.variables):!ne(this.last.result,e))||t&&!ne(this.last.variables,t)},t.prototype.getLast=function(e,t){var n=this.last;if(n&&n[e]&&(!t||ne(n.variables,this.variables)))return n[e]},t.prototype.getLastResult=function(e){return this.getLast("result",e)},t.prototype.getLastError=function(e){return this.getLast("error",e)},t.prototype.resetLastResults=function(){delete this.last,this.isTornDown=!1},t.prototype.resetQueryStoreErrors=function(){this.queryManager.resetErrors(this.queryId)},t.prototype.refetch=function(e){var t,n={pollInterval:0},r=this.options.fetchPolicy;if(n.fetchPolicy="no-cache"===r?"no-cache":"network-only",!1!==globalThis.__DEV__&&e&&Xn.call(e,"variables")){var i=Et(this.query),o=i.variableDefinitions;o&&o.some((function(e){return"variables"===e.variable.name.value}))||!1!==globalThis.__DEV__&&O.warn(21,e,(null===(t=i.name)||void 0===t?void 0:t.value)||i)}return e&&!ne(this.options.variables,e)&&(n.variables=this.options.variables=l(l({},this.options.variables),e)),this.queryInfo.resetLastWrite(),this.reobserve(n,pe.refetch)},t.prototype.fetchMore=function(e){var t=this,n=l(l({},e.query?e:l(l(l(l({},this.options),{query:this.options.query}),e),{variables:l(l({},this.options.variables),e.variables)})),{fetchPolicy:"no-cache"});n.query=this.transformDocument(n.query);var r=this.queryManager.generateQueryId();this.lastQuery=e.query?this.transformDocument(this.options.query):n.query;var i=this.queryInfo,o=i.networkStatus;i.networkStatus=pe.fetchMore,n.notifyOnNetworkStatusChange&&this.observe();var a=new Set,s=null==e?void 0:e.updateQuery,u="no-cache"!==this.options.fetchPolicy;return u||O(s,22),this.queryManager.fetchQuery(r,n,pe.fetchMore).then((function(c){if(t.queryManager.removeQuery(r),i.networkStatus===pe.fetchMore&&(i.networkStatus=o),u)t.queryManager.cache.batch({update:function(r){var i=e.updateQuery;i?r.updateQuery({query:t.query,variables:t.variables,returnPartialData:!0,optimistic:!1},(function(e){return i(e,{fetchMoreResult:c.data,variables:n.variables})})):r.writeQuery({query:n.query,variables:n.variables,data:c.data})},onWatchUpdated:function(e){a.add(e.query)}});else{var f=t.getLast("result"),d=s(f.data,{fetchMoreResult:c.data,variables:n.variables});t.reportResult(l(l({},f),{networkStatus:o,loading:me(o),data:d}),t.variables)}return t.maskResult(c)})).finally((function(){u&&!a.has(t.query)&&t.reobserveCacheFirst()}))},t.prototype.subscribeToMore=function(e){var t=this,n=this.queryManager.startGraphQLSubscription({query:e.document,variables:e.variables,context:e.context}).subscribe({next:function(n){var r=e.updateQuery;r&&t.updateQuery((function(e,t){return r(e,l({subscriptionData:n},t))}))},error:function(t){e.onError?e.onError(t):!1!==globalThis.__DEV__&&O.error(23,t)}});return this.subscriptions.add(n),function(){t.subscriptions.delete(n)&&n.unsubscribe()}},t.prototype.setOptions=function(e){return this.reobserve(e)},t.prototype.silentSetOptions=function(e){var t=Y(this.options,e||{});Gn(this.options,t)},t.prototype.setVariables=function(e){return ne(this.variables,e)?this.observers.size?this.result():Promise.resolve():(this.options.variables=e,this.observers.size?this.reobserve({fetchPolicy:this.options.initialFetchPolicy,variables:e},pe.setVariables):Promise.resolve())},t.prototype.updateQuery=function(e){var t=this.queryManager,n=t.cache.diff({query:this.options.query,variables:this.variables,returnPartialData:!0,optimistic:!1}),r=n.result,i=n.complete,o=e(r,{variables:this.variables,complete:!!i,previousData:r});o&&(t.cache.writeQuery({query:this.options.query,data:o,variables:this.variables}),t.broadcastQueries())},t.prototype.startPolling=function(e){this.options.pollInterval=e,this.updatePolling()},t.prototype.stopPolling=function(){this.options.pollInterval=0,this.updatePolling()},t.prototype.applyNextFetchPolicy=function(e,t){if(t.nextFetchPolicy){var n=t.fetchPolicy,r=void 0===n?"cache-first":n,i=t.initialFetchPolicy,o=void 0===i?r:i;"standby"===r||("function"==typeof t.nextFetchPolicy?t.fetchPolicy=t.nextFetchPolicy(r,{reason:e,options:t,observable:this,initialFetchPolicy:o}):t.fetchPolicy="variables-changed"===e?o:t.nextFetchPolicy)}return t.fetchPolicy},t.prototype.fetch=function(e,t,n){var r=this.queryManager.getOrCreateQuery(this.queryId);return r.setObservableQuery(this),this.queryManager.fetchConcastWithInfo(r,e,t,n)},t.prototype.updatePolling=function(){var e=this;if(!this.queryManager.ssrMode){var t=this.pollingInfo,n=this.options.pollInterval;if(n&&this.hasObservers()){if(!t||t.interval!==n){O(n,24),(t||(this.pollingInfo={})).interval=n;var r=function(){var t,n;e.pollingInfo&&(me(e.queryInfo.networkStatus)||(null===(n=(t=e.options).skipPollAttempt)||void 0===n?void 0:n.call(t))?i():e.reobserve({fetchPolicy:"no-cache"===e.options.initialFetchPolicy?"no-cache":"network-only"},pe.poll).then(i,i))},i=function(){var t=e.pollingInfo;t&&(clearTimeout(t.timeout),t.timeout=setTimeout(r,t.interval))};i()}}else t&&(clearTimeout(t.timeout),delete this.pollingInfo)}},t.prototype.updateLastResult=function(e,t){void 0===t&&(t=this.variables);var n=this.getLastError();return n&&this.last&&!ne(t,this.last.variables)&&(n=void 0),this.last=l({result:this.queryManager.assumeImmutableResults?e:_t(e),variables:t},n?{error:n}:null)},t.prototype.reobserveAsConcast=function(e,t){var n=this;this.isTornDown=!1;var r=t===pe.refetch||t===pe.fetchMore||t===pe.poll,i=this.options.variables,o=this.options.fetchPolicy,a=Y(this.options,e||{}),s=r?a:Gn(this.options,a),u=this.transformDocument(s.query);this.lastQuery=u,r||(this.updatePolling(),!e||!e.variables||ne(e.variables,i)||"standby"===s.fetchPolicy||s.fetchPolicy!==o&&"function"!=typeof s.nextFetchPolicy||(this.applyNextFetchPolicy("variables-changed",s),void 0===t&&(t=pe.setVariables))),this.waitForOwnResult&&(this.waitForOwnResult=tr(s.fetchPolicy));var c=function(){n.concast===p&&(n.waitForOwnResult=!1)},f=s.variables&&l({},s.variables),d=this.fetch(s,t,u),p=d.concast,h=d.fromLink,m={next:function(e){ne(n.variables,f)&&(c(),n.reportResult(e,f))},error:function(e){ne(n.variables,f)&&(de(e)||(e=new he({networkError:e})),c(),n.reportError(e,f))}};return r||!h&&this.concast||(this.concast&&this.observer&&this.concast.removeObserver(this.observer),this.concast=p,this.observer=m),p.addObserver(m),p},t.prototype.reobserve=function(e,t){return(n=this.reobserveAsConcast(e,t).promise.then(this.maskResult)).catch((function(){})),n;var n},t.prototype.resubscribeAfterError=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.last;this.resetLastResults();var r=this.subscribe.apply(this,e);return this.last=n,r},t.prototype.observe=function(){this.reportResult(this.getCurrentFullResult(!1),this.variables)},t.prototype.reportResult=function(e,t){var n=this.getLastError(),r=this.isDifferentFromLastResult(e,t);(n||!e.partial||this.options.returnPartialData)&&this.updateLastResult(e,t),(n||r)&&Ot(this.observers,"next",this.maskResult(e))},t.prototype.reportError=function(e,t){var n=l(l({},this.getLastResult()),{error:e,errors:e.graphQLErrors,networkStatus:pe.error,loading:!1});this.updateLastResult(n,t),Ot(this.observers,"error",this.last.error=e)},t.prototype.hasObservers=function(){return this.observers.size>0},t.prototype.tearDownQuery=function(){this.isTornDown||(this.concast&&this.observer&&(this.concast.removeObserver(this.observer),delete this.concast,delete this.observer),this.stopPolling(),this.subscriptions.forEach((function(e){return e.unsubscribe()})),this.subscriptions.clear(),this.queryManager.stopQuery(this.queryId),this.observers.clear(),this.isTornDown=!0)},t.prototype.transformDocument=function(e){return this.queryManager.transform(e)},t.prototype.maskResult=function(e){return e&&"data"in e?l(l({},e),{data:this.queryManager.maskOperation({document:this.query,data:e.data,fetchPolicy:this.options.fetchPolicy,id:this.queryId})}):e},t.prototype.resetNotifications=function(){this.cancelNotifyTimeout(),this.dirty=!1},t.prototype.cancelNotifyTimeout=function(){this.notifyTimeout&&(clearTimeout(this.notifyTimeout),this.notifyTimeout=void 0)},t.prototype.scheduleNotify=function(){var e=this;this.dirty||(this.dirty=!0,this.notifyTimeout||(this.notifyTimeout=setTimeout((function(){return e.notify()}),0)))},t.prototype.notify=function(){this.cancelNotifyTimeout(),this.dirty&&("cache-only"!=this.options.fetchPolicy&&"cache-and-network"!=this.options.fetchPolicy&&me(this.queryInfo.networkStatus)||(this.queryInfo.getDiff().fromOptimisticTransaction?this.observe():this.reobserveCacheFirst())),this.dirty=!1},t.prototype.reobserveCacheFirst=function(){var e=this.options,t=e.fetchPolicy,n=e.nextFetchPolicy;return"cache-and-network"===t||"network-only"===t?this.reobserve({fetchPolicy:"cache-first",nextFetchPolicy:function(e,r){return this.nextFetchPolicy=n,"function"==typeof this.nextFetchPolicy?this.nextFetchPolicy(e,r):t}}):this.reobserve()},t.inactiveOnCreation=new gn,t}(Gt);function Zn(e){!1!==globalThis.__DEV__&&O.error(25,e.message,e.stack)}function er(e){!1!==globalThis.__DEV__&&e&&!1!==globalThis.__DEV__&&O.debug(26,e)}function tr(e){return"network-only"===e||"no-cache"===e||"standby"===e}function nr(e){var t;switch(e){case $n.Query:t="Query";break;case $n.Mutation:t="Mutation";break;case $n.Subscription:t="Subscription"}return t}function rr(e){Kn||(Kn=new Ue(He.parser||1e3));var t,n,r=Kn.get(e);if(r)return r;O(!!e&&!!e.kind,70,e);for(var i=[],o=[],a=[],s=[],l=0,u=e.definitions;l<u.length;l++){var c=u[l];if("FragmentDefinition"!==c.kind){if("OperationDefinition"===c.kind)switch(c.operation){case"query":o.push(c);break;case"mutation":a.push(c);break;case"subscription":s.push(c)}}else i.push(c)}O(!i.length||o.length||a.length||s.length,71),O(o.length+a.length+s.length<=1,72,e,o.length,s.length,a.length),n=o.length?$n.Query:$n.Mutation,o.length||a.length||(n=$n.Subscription);var f=o.length?o:a.length?a:s;O(1===f.length,73,e,f.length);var d=f[0];t=d.variableDefinitions||[];var p={name:d.name&&"Name"===d.name.kind?d.name.value:"data",type:n,variables:t};return Kn.set(e,p),p}Xt(Jn),function(e){e[e.Query=0]="Query",e[e.Mutation=1]="Mutation",e[e.Subscription=2]="Subscription"}($n||($n={})),rr.resetCache=function(){Kn=void 0},!1!==globalThis.__DEV__&&$e("parser",(function(){return Kn?Kn.size:0}));var ir=Array.isArray;function or(e){return Array.isArray(e)&&e.length>0}function ar(e){return!1!==globalThis.__DEV__&&(t=e,(n=new Set([t])).forEach((function(e){ue(e)&&function(e){if(!1!==globalThis.__DEV__&&!Object.isFrozen(e))try{Object.freeze(e)}catch(e){if(e instanceof TypeError)return null;throw e}return e}(e)===e&&Object.getOwnPropertyNames(e).forEach((function(t){ue(e[t])&&n.add(e[t])}))}))),e;var t,n}var sr=Object.prototype.hasOwnProperty;function lr(){}var ur=Symbol();function cr(e,t){var n=function(e){var t=R.useContext(H()),n=e||t.client;return O(!!n,58),n}(t.client),r=R.useContext(H()).renderPromises,i=!!r,o=n.disableNetworkFetches,a=!1!==t.ssr&&!t.skip,s=t.partialRefetch,u=fr(n,e,t,i),c=function(e,t,n,r,i){function o(o){var a;return function(e,t){var n=rr(e),r=nr(t),i=nr(n.type);O(n.type===t,74,r,r,i)}(t,$n.Query),{client:e,query:t,observable:r&&r.getSSRObservable(i())||Jn.inactiveOnCreation.withValue(!r,(function(){return e.watchQuery(dr(void 0,e,n,i()))})),resultData:{previousData:null===(a=null==o?void 0:o.resultData.current)||void 0===a?void 0:a.data}}}var a=R.useState(o),s=a[0],u=a[1];function c(e){var t,n;Object.assign(s.observable,((t={})[ur]=e,t));var r=s.resultData;u(l(l({},s),{query:e.query,resultData:Object.assign(r,{previousData:(null===(n=r.current)||void 0===n?void 0:n.data)||r.previousData,current:void 0})}))}if(e!==s.client||t!==s.query){var f=o(s);return u(f),[f,c]}return[s,c]}(n,e,t,r,u),f=c[0],d=f.observable,p=f.resultData,h=c[1],m=u(d);!function(e,t,n,r,i){var o;t[ur]&&!ne(t[ur],i)&&(t.reobserve(dr(t,n,r,i)),e.previousData=(null===(o=e.current)||void 0===o?void 0:o.data)||e.previousData,e.current=void 0),t[ur]=i}(p,d,n,t,m);var y=R.useMemo((function(){return function(e){return{refetch:e.refetch.bind(e),reobserve:e.reobserve.bind(e),fetchMore:e.fetchMore.bind(e),updateQuery:e.updateQuery.bind(e),startPolling:e.startPolling.bind(e),stopPolling:e.stopPolling.bind(e),subscribeToMore:e.subscribeToMore.bind(e)}}(d)}),[d]);!function(e,t,n){t&&n&&(t.registerSSRObservable(e),e.getCurrentResult().loading&&t.addObservableQueryPromise(e))}(d,r,a);var v=function(e,t,n,r,i,o,a,s,l){var u=R.useRef(l);R.useEffect((function(){u.current=l}));var c=!s&&!o||!1!==r.ssr||r.skip?r.skip||"standby"===i.fetchPolicy?gr:void 0:vr,f=e.previousData,d=R.useMemo((function(){return c&&yr(c,f,t,n)}),[n,t,c,f]);return G(R.useCallback((function(r){if(s)return function(){};var i=function(){var i=e.current,o=t.getCurrentResult();i&&i.loading===o.loading&&i.networkStatus===o.networkStatus&&ne(i.data,o.data)||pr(o,e,t,n,a,r,u.current)},o=function(s){if(l.current.unsubscribe(),l.current=t.resubscribeAfterError(i,o),!sr.call(s,"graphQLErrors"))throw s;var c=e.current;(!c||c&&c.loading||!ne(s,c.error))&&pr({data:c&&c.data,error:s,loading:!1,networkStatus:pe.error},e,t,n,a,r,u.current)},l={current:t.subscribe(i,o)};return function(){setTimeout((function(){return l.current.unsubscribe()}))}}),[o,s,t,e,a,n]),(function(){return d||hr(e,t,u.current,a,n)}),(function(){return d||hr(e,t,u.current,a,n)}))}(p,d,n,t,m,o,s,i,{onCompleted:t.onCompleted||lr,onError:t.onError||lr});return{result:v,obsQueryFields:y,observable:d,resultData:p,client:n,onQueryExecuted:h}}function fr(e,t,n,r){void 0===n&&(n={});var i=n.skip,o=(n.ssr,n.onCompleted,n.onError,n.defaultOptions),a=u(n,["skip","ssr","onCompleted","onError","defaultOptions"]);return function(n){var s=Object.assign(a,{query:t});return!r||"network-only"!==s.fetchPolicy&&"cache-and-network"!==s.fetchPolicy||(s.fetchPolicy="cache-first"),s.variables||(s.variables={}),i?(s.initialFetchPolicy=s.initialFetchPolicy||s.fetchPolicy||mr(o,e.defaultOptions),s.fetchPolicy="standby"):s.fetchPolicy||(s.fetchPolicy=(null==n?void 0:n.options.initialFetchPolicy)||mr(o,e.defaultOptions)),s}}function dr(e,t,n,r){var i=[],o=t.defaultOptions.watchQuery;return o&&i.push(o),n.defaultOptions&&i.push(n.defaultOptions),i.push(Y(e&&e.options,r)),i.reduce($)}function pr(e,t,n,r,i,o,a){var s=t.current;s&&s.data&&(t.previousData=s.data),!e.error&&or(e.errors)&&(e.error=new he({graphQLErrors:e.errors})),t.current=yr(function(e,t,n){return!e.partial||!n||e.loading||e.data&&0!==Object.keys(e.data).length||"cache-only"===t.options.fetchPolicy?e:(t.refetch(),l(l({},e),{loading:!0,networkStatus:pe.refetch}))}(e,n,i),t.previousData,n,r),o(),function(e,t,n){if(!e.loading){var r=function(e){return or(e.errors)?new he({graphQLErrors:e.errors}):e.error}(e);Promise.resolve().then((function(){r?n.onError(r):e.data&&t!==e.networkStatus&&e.networkStatus===pe.ready&&n.onCompleted(e.data)})).catch((function(e){!1!==globalThis.__DEV__&&O.warn(e)}))}}(e,null==s?void 0:s.networkStatus,a)}function hr(e,t,n,r,i){return e.current||pr(t.getCurrentResult(),e,t,i,r,(function(){}),n),e.current}function mr(e,t){var n;return(null==e?void 0:e.fetchPolicy)||(null===(n=null==t?void 0:t.watchQuery)||void 0===n?void 0:n.fetchPolicy)||"cache-first"}function yr(e,t,n,r){var i=e.data,o=(e.partial,u(e,["data","partial"]));return l(l({data:i},o),{client:r,observable:n,variables:n.variables,called:e!==vr&&e!==gr,previousData:t})}var vr=ar({loading:!0,data:void 0,error:void 0,networkStatus:pe.loading}),gr=ar({loading:!1,data:void 0,error:void 0,networkStatus:pe.ready}),br=q?R.useLayoutEffect:R.useEffect,Ar=["refetch","reobserve","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore"];const kr=/^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u,Er=/^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u,xr={};function wr(e,t){return((t||xr).jsx?Er:kr).test(e)}const Cr=/[ \t\n\f\r]/g;function Sr(e){return""===e.replace(Cr,"")}class _r{constructor(e,t,n){this.normal=t,this.property=e,n&&(this.space=n)}}function Tr(e,t){const n={},r={};for(const t of e)Object.assign(n,t.property),Object.assign(r,t.normal);return new _r(n,r,t)}function Or(e){return e.toLowerCase()}_r.prototype.normal={},_r.prototype.property={},_r.prototype.space=void 0;class Ir{constructor(e,t){this.attribute=t,this.property=e}}Ir.prototype.attribute="",Ir.prototype.booleanish=!1,Ir.prototype.boolean=!1,Ir.prototype.commaOrSpaceSeparated=!1,Ir.prototype.commaSeparated=!1,Ir.prototype.defined=!1,Ir.prototype.mustUseProperty=!1,Ir.prototype.number=!1,Ir.prototype.overloadedBoolean=!1,Ir.prototype.property="",Ir.prototype.spaceSeparated=!1,Ir.prototype.space=void 0;let Nr=0;const Dr=zr(),Br=zr(),Pr=zr(),Rr=zr(),Fr=zr(),Lr=zr(),Mr=zr();function zr(){return 2**++Nr}const jr=Object.keys(e);class Vr extends Ir{constructor(t,n,r,i){let o=-1;if(super(t,n),qr(this,"space",i),"number"==typeof r)for(;++o<jr.length;){const t=jr[o];qr(this,jr[o],(r&e[t])===e[t])}}}function qr(e,t,n){n&&(e[t]=n)}function Ur(e){const t={},n={};for(const[r,i]of Object.entries(e.properties)){const o=new Vr(r,e.transform(e.attributes||{},r),i,e.space);e.mustUseProperty&&e.mustUseProperty.includes(r)&&(o.mustUseProperty=!0),t[r]=o,n[Or(r)]=r,n[Or(o.attribute)]=r}return new _r(t,n,e.space)}Vr.prototype.defined=!0;const Qr=Ur({properties:{ariaActiveDescendant:null,ariaAtomic:Br,ariaAutoComplete:null,ariaBusy:Br,ariaChecked:Br,ariaColCount:Rr,ariaColIndex:Rr,ariaColSpan:Rr,ariaControls:Fr,ariaCurrent:null,ariaDescribedBy:Fr,ariaDetails:null,ariaDisabled:Br,ariaDropEffect:Fr,ariaErrorMessage:null,ariaExpanded:Br,ariaFlowTo:Fr,ariaGrabbed:Br,ariaHasPopup:null,ariaHidden:Br,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:Fr,ariaLevel:Rr,ariaLive:null,ariaModal:Br,ariaMultiLine:Br,ariaMultiSelectable:Br,ariaOrientation:null,ariaOwns:Fr,ariaPlaceholder:null,ariaPosInSet:Rr,ariaPressed:Br,ariaReadOnly:Br,ariaRelevant:null,ariaRequired:Br,ariaRoleDescription:Fr,ariaRowCount:Rr,ariaRowIndex:Rr,ariaRowSpan:Rr,ariaSelected:Br,ariaSetSize:Rr,ariaSort:null,ariaValueMax:Rr,ariaValueMin:Rr,ariaValueNow:Rr,ariaValueText:null,role:null},transform:(e,t)=>"role"===t?t:"aria-"+t.slice(4).toLowerCase()});function Wr(e,t){return t in e?e[t]:t}function Hr(e,t){return Wr(e,t.toLowerCase())}const Yr=Ur({attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:Lr,acceptCharset:Fr,accessKey:Fr,action:null,allow:null,allowFullScreen:Dr,allowPaymentRequest:Dr,allowUserMedia:Dr,alt:null,as:null,async:Dr,autoCapitalize:null,autoComplete:Fr,autoFocus:Dr,autoPlay:Dr,blocking:Fr,capture:null,charSet:null,checked:Dr,cite:null,className:Fr,cols:Rr,colSpan:null,content:null,contentEditable:Br,controls:Dr,controlsList:Fr,coords:Rr|Lr,crossOrigin:null,data:null,dateTime:null,decoding:null,default:Dr,defer:Dr,dir:null,dirName:null,disabled:Dr,download:Pr,draggable:Br,encType:null,enterKeyHint:null,fetchPriority:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:Dr,formTarget:null,headers:Fr,height:Rr,hidden:Pr,high:Rr,href:null,hrefLang:null,htmlFor:Fr,httpEquiv:Fr,id:null,imageSizes:null,imageSrcSet:null,inert:Dr,inputMode:null,integrity:null,is:null,isMap:Dr,itemId:null,itemProp:Fr,itemRef:Fr,itemScope:Dr,itemType:Fr,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:Dr,low:Rr,manifest:null,max:null,maxLength:Rr,media:null,method:null,min:null,minLength:Rr,multiple:Dr,muted:Dr,name:null,nonce:null,noModule:Dr,noValidate:Dr,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforeMatch:null,onBeforePrint:null,onBeforeToggle:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextLost:null,onContextMenu:null,onContextRestored:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onScrollEnd:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:Dr,optimum:Rr,pattern:null,ping:Fr,placeholder:null,playsInline:Dr,popover:null,popoverTarget:null,popoverTargetAction:null,poster:null,preload:null,readOnly:Dr,referrerPolicy:null,rel:Fr,required:Dr,reversed:Dr,rows:Rr,rowSpan:Rr,sandbox:Fr,scope:null,scoped:Dr,seamless:Dr,selected:Dr,shadowRootClonable:Dr,shadowRootDelegatesFocus:Dr,shadowRootMode:null,shape:null,size:Rr,sizes:null,slot:null,span:Rr,spellCheck:Br,src:null,srcDoc:null,srcLang:null,srcSet:null,start:Rr,step:null,style:null,tabIndex:Rr,target:null,title:null,translate:null,type:null,typeMustMatch:Dr,useMap:null,value:Br,width:Rr,wrap:null,writingSuggestions:null,align:null,aLink:null,archive:Fr,axis:null,background:null,bgColor:null,border:Rr,borderColor:null,bottomMargin:Rr,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:Dr,declare:Dr,event:null,face:null,frame:null,frameBorder:null,hSpace:Rr,leftMargin:Rr,link:null,longDesc:null,lowSrc:null,marginHeight:Rr,marginWidth:Rr,noResize:Dr,noHref:Dr,noShade:Dr,noWrap:Dr,object:null,profile:null,prompt:null,rev:null,rightMargin:Rr,rules:null,scheme:null,scrolling:Br,standby:null,summary:null,text:null,topMargin:Rr,valueType:null,version:null,vAlign:null,vLink:null,vSpace:Rr,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:Dr,disableRemotePlayback:Dr,prefix:null,property:null,results:Rr,security:null,unselectable:null},space:"html",transform:Hr}),$r=Ur({attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",transformOrigin:"transform-origin",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},properties:{about:Mr,accentHeight:Rr,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:Rr,amplitude:Rr,arabicForm:null,ascent:Rr,attributeName:null,attributeType:null,azimuth:Rr,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:Rr,by:null,calcMode:null,capHeight:Rr,className:Fr,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:Rr,diffuseConstant:Rr,direction:null,display:null,dur:null,divisor:Rr,dominantBaseline:null,download:Dr,dx:null,dy:null,edgeMode:null,editable:null,elevation:Rr,enableBackground:null,end:null,event:null,exponent:Rr,externalResourcesRequired:null,fill:null,fillOpacity:Rr,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:Lr,g2:Lr,glyphName:Lr,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:Rr,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:Rr,horizOriginX:Rr,horizOriginY:Rr,id:null,ideographic:Rr,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:Rr,k:Rr,k1:Rr,k2:Rr,k3:Rr,k4:Rr,kernelMatrix:Mr,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:Rr,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:Rr,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:Rr,overlineThickness:Rr,paintOrder:null,panose1:null,path:null,pathLength:Rr,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:Fr,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:Rr,pointsAtY:Rr,pointsAtZ:Rr,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:Mr,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:Mr,rev:Mr,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:Mr,requiredFeatures:Mr,requiredFonts:Mr,requiredFormats:Mr,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:Rr,specularExponent:Rr,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:Rr,strikethroughThickness:Rr,string:null,stroke:null,strokeDashArray:Mr,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:Rr,strokeOpacity:Rr,strokeWidth:null,style:null,surfaceScale:Rr,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:Mr,tabIndex:Rr,tableValues:null,target:null,targetX:Rr,targetY:Rr,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:Mr,to:null,transform:null,transformOrigin:null,u1:null,u2:null,underlinePosition:Rr,underlineThickness:Rr,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:Rr,values:null,vAlphabetic:Rr,vMathematical:Rr,vectorEffect:null,vHanging:Rr,vIdeographic:Rr,version:null,vertAdvY:Rr,vertOriginX:Rr,vertOriginY:Rr,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:Rr,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null},space:"svg",transform:Wr}),Kr=Ur({properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null},space:"xlink",transform:(e,t)=>"xlink:"+t.slice(5).toLowerCase()}),Gr=Ur({attributes:{xmlnsxlink:"xmlns:xlink"},properties:{xmlnsXLink:null,xmlns:null},space:"xmlns",transform:Hr}),Xr=Ur({properties:{xmlBase:null,xmlLang:null,xmlSpace:null},space:"xml",transform:(e,t)=>"xml:"+t.slice(3).toLowerCase()}),Jr=Tr([Qr,Yr,Kr,Gr,Xr],"html"),Zr=Tr([Qr,$r,Kr,Gr,Xr],"svg"),ei=/[A-Z]/g,ti=/-[a-z]/g,ni=/^data[-\w.:]+$/i;function ri(e){return"-"+e.toLowerCase()}function ii(e){return e.charAt(1).toUpperCase()}const oi={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"};var ai=i(229);const si=ui("end"),li=ui("start");function ui(e){return function(t){const n=t&&t.position&&t.position[e]||{};if("number"==typeof n.line&&n.line>0&&"number"==typeof n.column&&n.column>0)return{line:n.line,column:n.column,offset:"number"==typeof n.offset&&n.offset>-1?n.offset:void 0}}}function ci(e){return e&&"object"==typeof e?"position"in e||"type"in e?di(e.position):"start"in e||"end"in e?di(e):"line"in e||"column"in e?fi(e):"":""}function fi(e){return pi(e&&e.line)+":"+pi(e&&e.column)}function di(e){return fi(e&&e.start)+"-"+fi(e&&e.end)}function pi(e){return e&&"number"==typeof e?e:1}class hi extends Error{constructor(e,t,n){super(),"string"==typeof t&&(n=t,t=void 0);let r="",i={},o=!1;if(t&&(i="line"in t&&"column"in t||"start"in t&&"end"in t?{place:t}:"type"in t?{ancestors:[t],place:t.position}:{...t}),"string"==typeof e?r=e:!i.cause&&e&&(o=!0,r=e.message,i.cause=e),!i.ruleId&&!i.source&&"string"==typeof n){const e=n.indexOf(":");-1===e?i.ruleId=n:(i.source=n.slice(0,e),i.ruleId=n.slice(e+1))}if(!i.place&&i.ancestors&&i.ancestors){const e=i.ancestors[i.ancestors.length-1];e&&(i.place=e.position)}const a=i.place&&"start"in i.place?i.place.start:i.place;this.ancestors=i.ancestors||void 0,this.cause=i.cause||void 0,this.column=a?a.column:void 0,this.fatal=void 0,this.file,this.message=r,this.line=a?a.line:void 0,this.name=ci(i.place)||"1:1",this.place=i.place||void 0,this.reason=this.message,this.ruleId=i.ruleId||void 0,this.source=i.source||void 0,this.stack=o&&i.cause&&"string"==typeof i.cause.stack?i.cause.stack:"",this.actual,this.expected,this.note,this.url}}hi.prototype.file="",hi.prototype.name="",hi.prototype.reason="",hi.prototype.message="",hi.prototype.stack="",hi.prototype.column=void 0,hi.prototype.line=void 0,hi.prototype.ancestors=void 0,hi.prototype.cause=void 0,hi.prototype.fatal=void 0,hi.prototype.place=void 0,hi.prototype.ruleId=void 0,hi.prototype.source=void 0;const mi={}.hasOwnProperty,yi=new Map,vi=/[A-Z]/g,gi=new Set(["table","tbody","thead","tfoot","tr"]),bi=new Set(["td","th"]),Ai="https://github.com/syntax-tree/hast-util-to-jsx-runtime";function ki(e,t,n){return"element"===t.type?function(e,t,n){const r=e.schema;let i=r;"svg"===t.tagName.toLowerCase()&&"html"===r.space&&(i=Zr,e.schema=i),e.ancestors.push(t);const o=Si(e,t.tagName,!1),a=function(e,t){const n={};let r,i;for(i in t.properties)if("children"!==i&&mi.call(t.properties,i)){const o=Ci(e,i,t.properties[i]);if(o){const[i,a]=o;e.tableCellAlignToStyle&&"align"===i&&"string"==typeof a&&bi.has(t.tagName)?r=a:n[i]=a}}return r&&((n.style||(n.style={}))["css"===e.stylePropertyNameCase?"text-align":"textAlign"]=r),n}(e,t);let s=wi(e,t);return gi.has(t.tagName)&&(s=s.filter((function(e){return"string"!=typeof e||!("object"==typeof(t=e)?"text"===t.type&&Sr(t.value):Sr(t));var t}))),Ei(e,a,o,t),xi(a,s),e.ancestors.pop(),e.schema=r,e.create(t,o,a,n)}(e,t,n):"mdxFlowExpression"===t.type||"mdxTextExpression"===t.type?function(e,t){if(t.data&&t.data.estree&&e.evaluater){const n=t.data.estree.body[0];return n.type,e.evaluater.evaluateExpression(n.expression)}_i(e,t.position)}(e,t):"mdxJsxFlowElement"===t.type||"mdxJsxTextElement"===t.type?function(e,t,n){const r=e.schema;let i=r;"svg"===t.name&&"html"===r.space&&(i=Zr,e.schema=i),e.ancestors.push(t);const o=null===t.name?e.Fragment:Si(e,t.name,!0),a=function(e,t){const n={};for(const r of t.attributes)if("mdxJsxExpressionAttribute"===r.type)if(r.data&&r.data.estree&&e.evaluater){const t=r.data.estree.body[0];t.type;const i=t.expression;i.type;const o=i.properties[0];o.type,Object.assign(n,e.evaluater.evaluateExpression(o.argument))}else _i(e,t.position);else{const i=r.name;let o;if(r.value&&"object"==typeof r.value)if(r.value.data&&r.value.data.estree&&e.evaluater){const t=r.value.data.estree.body[0];t.type,o=e.evaluater.evaluateExpression(t.expression)}else _i(e,t.position);else o=null===r.value||r.value;n[i]=o}return n}(e,t),s=wi(e,t);return Ei(e,a,o,t),xi(a,s),e.ancestors.pop(),e.schema=r,e.create(t,o,a,n)}(e,t,n):"mdxjsEsm"===t.type?function(e,t){if(t.data&&t.data.estree&&e.evaluater)return e.evaluater.evaluateProgram(t.data.estree);_i(e,t.position)}(e,t):"root"===t.type?function(e,t,n){const r={};return xi(r,wi(e,t)),e.create(t,e.Fragment,r,n)}(e,t,n):"text"===t.type?function(e,t){return t.value}(0,t):void 0}function Ei(e,t,n,r){"string"!=typeof n&&n!==e.Fragment&&e.passNode&&(t.node=r)}function xi(e,t){if(t.length>0){const n=t.length>1?t:t[0];n&&(e.children=n)}}function wi(e,t){const n=[];let r=-1;const i=e.passKeys?new Map:yi;for(;++r<t.children.length;){const o=t.children[r];let a;if(e.passKeys){const e="element"===o.type?o.tagName:"mdxJsxFlowElement"===o.type||"mdxJsxTextElement"===o.type?o.name:void 0;if(e){const t=i.get(e)||0;a=e+"-"+t,i.set(e,t+1)}}const s=ki(e,o,a);void 0!==s&&n.push(s)}return n}function Ci(e,t,n){const r=function(e,t){const n=Or(t);let r=t,i=Ir;if(n in e.normal)return e.property[e.normal[n]];if(n.length>4&&"data"===n.slice(0,4)&&ni.test(t)){if("-"===t.charAt(4)){const e=t.slice(5).replace(ti,ii);r="data"+e.charAt(0).toUpperCase()+e.slice(1)}else{const e=t.slice(4);if(!ti.test(e)){let n=e.replace(ei,ri);"-"!==n.charAt(0)&&(n="-"+n),t="data"+n}}i=Vr}return new i(r,t)}(e.schema,t);if(!(null==n||"number"==typeof n&&Number.isNaN(n))){if(Array.isArray(n)&&(n=r.commaSeparated?function(e){const t={};return(""===e[e.length-1]?[...e,""]:e).join((t.padRight?" ":"")+","+(!1===t.padLeft?"":" ")).trim()}(n):n.join(" ").trim()),"style"===r.property){let t="object"==typeof n?n:function(e,t){try{return ai(t,{reactCompat:!0})}catch(t){if(e.ignoreInvalidStyle)return{};const n=t,r=new hi("Cannot parse `style` attribute",{ancestors:e.ancestors,cause:n,ruleId:"style",source:"hast-util-to-jsx-runtime"});throw r.file=e.filePath||void 0,r.url=Ai+"#cannot-parse-style-attribute",r}}(e,String(n));return"css"===e.stylePropertyNameCase&&(t=function(e){const t={};let n;for(n in e)mi.call(e,n)&&(t[Ti(n)]=e[n]);return t}(t)),["style",t]}return["react"===e.elementAttributeNameCase&&r.space?oi[r.property]||r.property:r.attribute,n]}}function Si(e,t,n){let r;if(n)if(t.includes(".")){const e=t.split(".");let n,i=-1;for(;++i<e.length;){const t=wr(e[i])?{type:"Identifier",name:e[i]}:{type:"Literal",value:e[i]};n=n?{type:"MemberExpression",object:n,property:t,computed:Boolean(i&&"Literal"===t.type),optional:!1}:t}r=n}else r=wr(t)&&!/^[a-z]/.test(t)?{type:"Identifier",name:t}:{type:"Literal",value:t};else r={type:"Literal",value:t};if("Literal"===r.type){const t=r.value;return mi.call(e.components,t)?e.components[t]:t}if(e.evaluater)return e.evaluater.evaluateExpression(r);_i(e)}function _i(e,t){const n=new hi("Cannot handle MDX estrees without `createEvaluater`",{ancestors:e.ancestors,place:t,ruleId:"mdx-estree",source:"hast-util-to-jsx-runtime"});throw n.file=e.filePath||void 0,n.url=Ai+"#cannot-handle-mdx-estrees-without-createevaluater",n}function Ti(e){let t=e.replace(vi,Oi);return"ms-"===t.slice(0,3)&&(t="-"+t),t}function Oi(e){return"-"+e.toLowerCase()}const Ii={action:["form"],cite:["blockquote","del","ins","q"],data:["object"],formAction:["button","input"],href:["a","area","base","link"],icon:["menuitem"],itemId:null,manifest:["html"],ping:["a","area"],poster:["video"],src:["audio","embed","iframe","img","input","script","source","track","video"]},Ni={};function Di(e,t,n){if(function(e){return Boolean(e&&"object"==typeof e)}(e)){if("value"in e)return"html"!==e.type||n?e.value:"";if(t&&"alt"in e&&e.alt)return e.alt;if("children"in e)return Bi(e.children,t,n)}return Array.isArray(e)?Bi(e,t,n):""}function Bi(e,t,n){const r=[];let i=-1;for(;++i<e.length;)r[i]=Di(e[i],t,n);return r.join("")}function Pi(e,t,n,r){const i=e.length;let o,a=0;if(t=t<0?-t>i?0:i+t:t>i?i:t,n=n>0?n:0,r.length<1e4)o=Array.from(r),o.unshift(t,n),e.splice(...o);else for(n&&e.splice(t,n);a<r.length;)o=r.slice(a,a+1e4),o.unshift(t,0),e.splice(...o),a+=1e4,t+=1e4}function Ri(e,t){return e.length>0?(Pi(e,e.length,0,t),e):t}class Fi{constructor(e){this.left=e?[...e]:[],this.right=[]}get(e){if(e<0||e>=this.left.length+this.right.length)throw new RangeError("Cannot access index `"+e+"` in a splice buffer of size `"+(this.left.length+this.right.length)+"`");return e<this.left.length?this.left[e]:this.right[this.right.length-e+this.left.length-1]}get length(){return this.left.length+this.right.length}shift(){return this.setCursor(0),this.right.pop()}slice(e,t){const n=null==t?Number.POSITIVE_INFINITY:t;return n<this.left.length?this.left.slice(e,n):e>this.left.length?this.right.slice(this.right.length-n+this.left.length,this.right.length-e+this.left.length).reverse():this.left.slice(e).concat(this.right.slice(this.right.length-n+this.left.length).reverse())}splice(e,t,n){const r=t||0;this.setCursor(Math.trunc(e));const i=this.right.splice(this.right.length-r,Number.POSITIVE_INFINITY);return n&&Li(this.left,n),i.reverse()}pop(){return this.setCursor(Number.POSITIVE_INFINITY),this.left.pop()}push(e){this.setCursor(Number.POSITIVE_INFINITY),this.left.push(e)}pushMany(e){this.setCursor(Number.POSITIVE_INFINITY),Li(this.left,e)}unshift(e){this.setCursor(0),this.right.push(e)}unshiftMany(e){this.setCursor(0),Li(this.right,e.reverse())}setCursor(e){if(!(e===this.left.length||e>this.left.length&&0===this.right.length||e<0&&0===this.left.length))if(e<this.left.length){const t=this.left.splice(e,Number.POSITIVE_INFINITY);Li(this.right,t.reverse())}else{const t=this.right.splice(this.left.length+this.right.length-e,Number.POSITIVE_INFINITY);Li(this.left,t.reverse())}}}function Li(e,t){let n=0;if(t.length<1e4)e.push(...t);else for(;n<t.length;)e.push(...t.slice(n,n+1e4)),n+=1e4}function Mi(e){const t={};let n,r,i,o,a,s,l,u=-1;const c=new Fi(e);for(;++u<c.length;){for(;u in t;)u=t[u];if(n=c.get(u),u&&"chunkFlow"===n[1].type&&"listItemPrefix"===c.get(u-1)[1].type&&(s=n[1]._tokenizer.events,i=0,i<s.length&&"lineEndingBlank"===s[i][1].type&&(i+=2),i<s.length&&"content"===s[i][1].type))for(;++i<s.length&&"content"!==s[i][1].type;)"chunkText"===s[i][1].type&&(s[i][1]._isInFirstContentOfListItem=!0,i++);if("enter"===n[0])n[1].contentType&&(Object.assign(t,zi(c,u)),u=t[u],l=!0);else if(n[1]._container){for(i=u,r=void 0;i--;)if(o=c.get(i),"lineEnding"===o[1].type||"lineEndingBlank"===o[1].type)"enter"===o[0]&&(r&&(c.get(r)[1].type="lineEndingBlank"),o[1].type="lineEnding",r=i);else if("linePrefix"!==o[1].type&&"listItemIndent"!==o[1].type)break;r&&(n[1].end={...c.get(r)[1].start},a=c.slice(r,u),a.unshift(n),c.splice(r,u-r+1,a))}}return Pi(e,0,Number.POSITIVE_INFINITY,c.slice(0)),!l}function zi(e,t){const n=e.get(t)[1],r=e.get(t)[2];let i=t-1;const o=[];let a=n._tokenizer;a||(a=r.parser[n.contentType](n.start),n._contentTypeTextTrailing&&(a._contentTypeTextTrailing=!0));const s=a.events,l=[],u={};let c,f,d=-1,p=n,h=0,m=0;const y=[m];for(;p;){for(;e.get(++i)[1]!==p;);o.push(i),p._tokenizer||(c=r.sliceStream(p),p.next||c.push(null),f&&a.defineSkip(p.start),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=!0),a.write(c),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=void 0)),f=p,p=p.next}for(p=n;++d<s.length;)"exit"===s[d][0]&&"enter"===s[d-1][0]&&s[d][1].type===s[d-1][1].type&&s[d][1].start.line!==s[d][1].end.line&&(m=d+1,y.push(m),p._tokenizer=void 0,p.previous=void 0,p=p.next);for(a.events=[],p?(p._tokenizer=void 0,p.previous=void 0):y.pop(),d=y.length;d--;){const t=s.slice(y[d],y[d+1]),n=o.pop();l.push([n,n+t.length-1]),e.splice(n,2,t)}for(l.reverse(),d=-1;++d<l.length;)u[h+l[d][0]]=h+l[d][1],h+=l[d][1]-l[d][0]-1;return u}const ji={}.hasOwnProperty;function Vi(e,t){let n;for(n in t){const r=(ji.call(e,n)?e[n]:void 0)||(e[n]={}),i=t[n];let o;if(i)for(o in i){ji.call(r,o)||(r[o]=[]);const e=i[o];qi(r[o],Array.isArray(e)?e:e?[e]:[])}}}function qi(e,t){let n=-1;const r=[];for(;++n<t.length;)("after"===t[n].add?e:r).push(t[n]);Pi(e,0,0,r)}const Ui=to(/[A-Za-z]/),Qi=to(/[\dA-Za-z]/),Wi=to(/[#-'*+\--9=?A-Z^-~]/);function Hi(e){return null!==e&&(e<32||127===e)}const Yi=to(/\d/),$i=to(/[\dA-Fa-f]/),Ki=to(/[!-/:-@[-`{-~]/);function Gi(e){return null!==e&&e<-2}function Xi(e){return null!==e&&(e<0||32===e)}function Ji(e){return-2===e||-1===e||32===e}const Zi=to(/\p{P}|\p{S}/u),eo=to(/\s/);function to(e){return function(t){return null!==t&&t>-1&&e.test(String.fromCharCode(t))}}function no(e,t,n,r){const i=r?r-1:Number.POSITIVE_INFINITY;let o=0;return function(r){return Ji(r)?(e.enter(n),a(r)):t(r)};function a(r){return Ji(r)&&o++<i?(e.consume(r),a):(e.exit(n),t(r))}}const ro={tokenize:function(e){const t=e.attempt(this.parser.constructs.contentInitial,(function(n){if(null!==n)return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),no(e,t,"linePrefix");e.consume(n)}),(function(t){return e.enter("paragraph"),r(t)}));let n;return t;function r(t){const r=e.enter("chunkText",{contentType:"text",previous:n});return n&&(n.next=r),n=r,i(t)}function i(t){return null===t?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(t)):Gi(t)?(e.consume(t),e.exit("chunkText"),r):(e.consume(t),i)}}},io={tokenize:function(e){const t=this,n=[];let r,i,o,a=0;return s;function s(r){if(a<n.length){const i=n[a];return t.containerState=i[1],e.attempt(i[0].continuation,l,u)(r)}return u(r)}function l(e){if(a++,t.containerState._closeFlow){t.containerState._closeFlow=void 0,r&&g();const n=t.events.length;let i,o=n;for(;o--;)if("exit"===t.events[o][0]&&"chunkFlow"===t.events[o][1].type){i=t.events[o][1].end;break}v(a);let s=n;for(;s<t.events.length;)t.events[s][1].end={...i},s++;return Pi(t.events,o+1,0,t.events.slice(n)),t.events.length=s,u(e)}return s(e)}function u(i){if(a===n.length){if(!r)return d(i);if(r.currentConstruct&&r.currentConstruct.concrete)return h(i);t.interrupt=Boolean(r.currentConstruct&&!r._gfmTableDynamicInterruptHack)}return t.containerState={},e.check(oo,c,f)(i)}function c(e){return r&&g(),v(a),d(e)}function f(e){return t.parser.lazy[t.now().line]=a!==n.length,o=t.now().offset,h(e)}function d(n){return t.containerState={},e.attempt(oo,p,h)(n)}function p(e){return a++,n.push([t.currentConstruct,t.containerState]),d(e)}function h(n){return null===n?(r&&g(),v(0),void e.consume(n)):(r=r||t.parser.flow(t.now()),e.enter("chunkFlow",{_tokenizer:r,contentType:"flow",previous:i}),m(n))}function m(n){return null===n?(y(e.exit("chunkFlow"),!0),v(0),void e.consume(n)):Gi(n)?(e.consume(n),y(e.exit("chunkFlow")),a=0,t.interrupt=void 0,s):(e.consume(n),m)}function y(e,n){const s=t.sliceStream(e);if(n&&s.push(null),e.previous=i,i&&(i.next=e),i=e,r.defineSkip(e.start),r.write(s),t.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<o&&(!r.events[e][1].end||r.events[e][1].end.offset>o))return;const n=t.events.length;let i,s,l=n;for(;l--;)if("exit"===t.events[l][0]&&"chunkFlow"===t.events[l][1].type){if(i){s=t.events[l][1].end;break}i=!0}for(v(a),e=n;e<t.events.length;)t.events[e][1].end={...s},e++;Pi(t.events,l+1,0,t.events.slice(n)),t.events.length=e}}function v(r){let i=n.length;for(;i-- >r;){const r=n[i];t.containerState=r[1],r[0].exit.call(t,e)}n.length=r}function g(){r.write([null]),i=void 0,r=void 0,t.containerState._closeFlow=void 0}}},oo={tokenize:function(e,t,n){return no(e,e.attempt(this.parser.constructs.document,t,n),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},ao={partial:!0,tokenize:function(e,t,n){return function(t){return Ji(t)?no(e,r,"linePrefix")(t):r(t)};function r(e){return null===e||Gi(e)?t(e):n(e)}}},so={resolve:function(e){return Mi(e),e},tokenize:function(e,t){let n;return function(t){return e.enter("content"),n=e.enter("chunkContent",{contentType:"content"}),r(t)};function r(t){return null===t?i(t):Gi(t)?e.check(lo,o,i)(t):(e.consume(t),r)}function i(n){return e.exit("chunkContent"),e.exit("content"),t(n)}function o(t){return e.consume(t),e.exit("chunkContent"),n.next=e.enter("chunkContent",{contentType:"content",previous:n}),n=n.next,r}}},lo={partial:!0,tokenize:function(e,t,n){const r=this;return function(t){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),no(e,i,"linePrefix")};function i(i){if(null===i||Gi(i))return n(i);const o=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&o&&"linePrefix"===o[1].type&&o[2].sliceSerialize(o[1],!0).length>=4?t(i):e.interrupt(r.parser.constructs.flow,n,t)(i)}}},uo={tokenize:function(e){const t=this,n=e.attempt(ao,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),t.currentConstruct=void 0,n;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,no(e,e.attempt(this.parser.constructs.flow,r,e.attempt(so,r)),"linePrefix")));return n;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),t.currentConstruct=void 0,n;e.consume(r)}}},co={resolveAll:mo()},fo=ho("string"),po=ho("text");function ho(e){return{resolveAll:mo("text"===e?yo:void 0),tokenize:function(t){const n=this,r=this.parser.constructs[e],i=t.attempt(r,o,a);return o;function o(e){return l(e)?i(e):a(e)}function a(e){if(null!==e)return t.enter("data"),t.consume(e),s;t.consume(e)}function s(e){return l(e)?(t.exit("data"),i(e)):(t.consume(e),s)}function l(e){if(null===e)return!0;const t=r[e];let i=-1;if(t)for(;++i<t.length;){const e=t[i];if(!e.previous||e.previous.call(n,n.previous))return!0}return!1}}}}function mo(e){return function(t,n){let r,i=-1;for(;++i<=t.length;)void 0===r?t[i]&&"data"===t[i][1].type&&(r=i,i++):t[i]&&"data"===t[i][1].type||(i!==r+2&&(t[r][1].end=t[i-1][1].end,t.splice(r+2,i-r-2),i=r+2),r=void 0);return e?e(t,n):t}}function yo(e,t){let n=0;for(;++n<=e.length;)if((n===e.length||"lineEnding"===e[n][1].type)&&"data"===e[n-1][1].type){const r=e[n-1][1],i=t.sliceStream(r);let o,a=i.length,s=-1,l=0;for(;a--;){const e=i[a];if("string"==typeof e){for(s=e.length;32===e.charCodeAt(s-1);)l++,s--;if(s)break;s=-1}else if(-2===e)o=!0,l++;else if(-1!==e){a++;break}}if(t._contentTypeTextTrailing&&n===e.length&&(l=0),l){const i={type:n===e.length||o||l<2?"lineSuffix":"hardBreakTrailing",start:{_bufferIndex:a?s:r.start._bufferIndex+s,_index:r.start._index+a,line:r.end.line,column:r.end.column-l,offset:r.end.offset-l},end:{...r.end}};r.end={...i.start},r.start.offset===r.end.offset?Object.assign(r,i):(e.splice(n,0,["enter",i,t],["exit",i,t]),n+=2)}n++}return e}const vo={name:"thematicBreak",tokenize:function(e,t,n){let r,i=0;return function(t){return e.enter("thematicBreak"),function(e){return r=e,o(e)}(t)};function o(o){return o===r?(e.enter("thematicBreakSequence"),a(o)):i>=3&&(null===o||Gi(o))?(e.exit("thematicBreak"),t(o)):n(o)}function a(t){return t===r?(e.consume(t),i++,a):(e.exit("thematicBreakSequence"),Ji(t)?no(e,o,"whitespace")(t):o(t))}}},go={continuation:{tokenize:function(e,t,n){const r=this;return r.containerState._closeFlow=void 0,e.check(ao,(function(n){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,no(e,t,"listItemIndent",r.containerState.size+1)(n)}),(function(n){return r.containerState.furtherBlankLines||!Ji(n)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,i(n)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(Ao,t,i)(n))}));function i(i){return r.containerState._closeFlow=!0,r.interrupt=void 0,no(e,e.attempt(go,t,n),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(i)}}},exit:function(e){e.exit(this.containerState.type)},name:"list",tokenize:function(e,t,n){const r=this,i=r.events[r.events.length-1];let o=i&&"linePrefix"===i[1].type?i[2].sliceSerialize(i[1],!0).length:0,a=0;return function(t){const i=r.containerState.type||(42===t||43===t||45===t?"listUnordered":"listOrdered");if("listUnordered"===i?!r.containerState.marker||t===r.containerState.marker:Yi(t)){if(r.containerState.type||(r.containerState.type=i,e.enter(i,{_container:!0})),"listUnordered"===i)return e.enter("listItemPrefix"),42===t||45===t?e.check(vo,n,l)(t):l(t);if(!r.interrupt||49===t)return e.enter("listItemPrefix"),e.enter("listItemValue"),s(t)}return n(t)};function s(t){return Yi(t)&&++a<10?(e.consume(t),s):(!r.interrupt||a<2)&&(r.containerState.marker?t===r.containerState.marker:41===t||46===t)?(e.exit("listItemValue"),l(t)):n(t)}function l(t){return e.enter("listItemMarker"),e.consume(t),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||t,e.check(ao,r.interrupt?n:u,e.attempt(bo,f,c))}function u(e){return r.containerState.initialBlankLine=!0,o++,f(e)}function c(t){return Ji(t)?(e.enter("listItemPrefixWhitespace"),e.consume(t),e.exit("listItemPrefixWhitespace"),f):n(t)}function f(n){return r.containerState.size=o+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,t(n)}}},bo={partial:!0,tokenize:function(e,t,n){const r=this;return no(e,(function(e){const i=r.events[r.events.length-1];return!Ji(e)&&i&&"listItemPrefixWhitespace"===i[1].type?t(e):n(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)}},Ao={partial:!0,tokenize:function(e,t,n){const r=this;return no(e,(function(e){const i=r.events[r.events.length-1];return i&&"listItemIndent"===i[1].type&&i[2].sliceSerialize(i[1],!0).length===r.containerState.size?t(e):n(e)}),"listItemIndent",r.containerState.size+1)}},ko={continuation:{tokenize:function(e,t,n){const r=this;return function(t){return Ji(t)?no(e,i,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(t):i(t)};function i(r){return e.attempt(ko,t,n)(r)}}},exit:function(e){e.exit("blockQuote")},name:"blockQuote",tokenize:function(e,t,n){const r=this;return function(t){if(62===t){const n=r.containerState;return n.open||(e.enter("blockQuote",{_container:!0}),n.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(t),e.exit("blockQuoteMarker"),i}return n(t)};function i(n){return Ji(n)?(e.enter("blockQuotePrefixWhitespace"),e.consume(n),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),t):(e.exit("blockQuotePrefix"),t(n))}}};function Eo(e,t,n,r,i,o,a,s,l){const u=l||Number.POSITIVE_INFINITY;let c=0;return function(t){return 60===t?(e.enter(r),e.enter(i),e.enter(o),e.consume(t),e.exit(o),f):null===t||32===t||41===t||Hi(t)?n(t):(e.enter(r),e.enter(a),e.enter(s),e.enter("chunkString",{contentType:"string"}),h(t))};function f(n){return 62===n?(e.enter(o),e.consume(n),e.exit(o),e.exit(i),e.exit(r),t):(e.enter(s),e.enter("chunkString",{contentType:"string"}),d(n))}function d(t){return 62===t?(e.exit("chunkString"),e.exit(s),f(t)):null===t||60===t||Gi(t)?n(t):(e.consume(t),92===t?p:d)}function p(t){return 60===t||62===t||92===t?(e.consume(t),d):d(t)}function h(i){return c||null!==i&&41!==i&&!Xi(i)?c<u&&40===i?(e.consume(i),c++,h):41===i?(e.consume(i),c--,h):null===i||32===i||40===i||Hi(i)?n(i):(e.consume(i),92===i?m:h):(e.exit("chunkString"),e.exit(s),e.exit(a),e.exit(r),t(i))}function m(t){return 40===t||41===t||92===t?(e.consume(t),h):h(t)}}function xo(e,t,n,r,i,o){const a=this;let s,l=0;return function(t){return e.enter(r),e.enter(i),e.consume(t),e.exit(i),e.enter(o),u};function u(f){return l>999||null===f||91===f||93===f&&!s||94===f&&!l&&"_hiddenFootnoteSupport"in a.parser.constructs?n(f):93===f?(e.exit(o),e.enter(i),e.consume(f),e.exit(i),e.exit(r),t):Gi(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),u):(e.enter("chunkString",{contentType:"string"}),c(f))}function c(t){return null===t||91===t||93===t||Gi(t)||l++>999?(e.exit("chunkString"),u(t)):(e.consume(t),s||(s=!Ji(t)),92===t?f:c)}function f(t){return 91===t||92===t||93===t?(e.consume(t),l++,c):c(t)}}function wo(e,t,n,r,i,o){let a;return function(t){return 34===t||39===t||40===t?(e.enter(r),e.enter(i),e.consume(t),e.exit(i),a=40===t?41:t,s):n(t)};function s(n){return n===a?(e.enter(i),e.consume(n),e.exit(i),e.exit(r),t):(e.enter(o),l(n))}function l(t){return t===a?(e.exit(o),s(a)):null===t?n(t):Gi(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),no(e,l,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),u(t))}function u(t){return t===a||null===t||Gi(t)?(e.exit("chunkString"),l(t)):(e.consume(t),92===t?c:u)}function c(t){return t===a||92===t?(e.consume(t),u):u(t)}}function Co(e,t){let n;return function r(i){return Gi(i)?(e.enter("lineEnding"),e.consume(i),e.exit("lineEnding"),n=!0,r):Ji(i)?no(e,r,n?"linePrefix":"lineSuffix")(i):t(i)}}function So(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const _o={name:"definition",tokenize:function(e,t,n){const r=this;let i;return function(t){return e.enter("definition"),function(t){return xo.call(r,e,o,n,"definitionLabel","definitionLabelMarker","definitionLabelString")(t)}(t)};function o(t){return i=So(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===t?(e.enter("definitionMarker"),e.consume(t),e.exit("definitionMarker"),a):n(t)}function a(t){return Xi(t)?Co(e,s)(t):s(t)}function s(t){return Eo(e,l,n,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString")(t)}function l(t){return e.attempt(To,u,u)(t)}function u(t){return Ji(t)?no(e,c,"whitespace")(t):c(t)}function c(o){return null===o||Gi(o)?(e.exit("definition"),r.parser.defined.push(i),t(o)):n(o)}}},To={partial:!0,tokenize:function(e,t,n){return function(t){return Xi(t)?Co(e,r)(t):n(t)};function r(t){return wo(e,i,n,"definitionTitle","definitionTitleMarker","definitionTitleString")(t)}function i(t){return Ji(t)?no(e,o,"whitespace")(t):o(t)}function o(e){return null===e||Gi(e)?t(e):n(e)}}},Oo={name:"codeIndented",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("codeIndented"),no(e,i,"linePrefix",5)(t)};function i(e){const t=r.events[r.events.length-1];return t&&"linePrefix"===t[1].type&&t[2].sliceSerialize(t[1],!0).length>=4?o(e):n(e)}function o(t){return null===t?s(t):Gi(t)?e.attempt(Io,o,s)(t):(e.enter("codeFlowValue"),a(t))}function a(t){return null===t||Gi(t)?(e.exit("codeFlowValue"),o(t)):(e.consume(t),a)}function s(n){return e.exit("codeIndented"),t(n)}}},Io={partial:!0,tokenize:function(e,t,n){const r=this;return i;function i(t){return r.parser.lazy[r.now().line]?n(t):Gi(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),i):no(e,o,"linePrefix",5)(t)}function o(e){const o=r.events[r.events.length-1];return o&&"linePrefix"===o[1].type&&o[2].sliceSerialize(o[1],!0).length>=4?t(e):Gi(e)?i(e):n(e)}}},No={name:"headingAtx",resolve:function(e,t){let n,r,i=e.length-2,o=3;return"whitespace"===e[o][1].type&&(o+=2),i-2>o&&"whitespace"===e[i][1].type&&(i-=2),"atxHeadingSequence"===e[i][1].type&&(o===i-1||i-4>o&&"whitespace"===e[i-2][1].type)&&(i-=o+1===i?2:4),i>o&&(n={type:"atxHeadingText",start:e[o][1].start,end:e[i][1].end},r={type:"chunkText",start:e[o][1].start,end:e[i][1].end,contentType:"text"},Pi(e,o,i-o+1,[["enter",n,t],["enter",r,t],["exit",r,t],["exit",n,t]])),e},tokenize:function(e,t,n){let r=0;return function(t){return e.enter("atxHeading"),function(t){return e.enter("atxHeadingSequence"),i(t)}(t)};function i(t){return 35===t&&r++<6?(e.consume(t),i):null===t||Xi(t)?(e.exit("atxHeadingSequence"),o(t)):n(t)}function o(n){return 35===n?(e.enter("atxHeadingSequence"),a(n)):null===n||Gi(n)?(e.exit("atxHeading"),t(n)):Ji(n)?no(e,o,"whitespace")(n):(e.enter("atxHeadingText"),s(n))}function a(t){return 35===t?(e.consume(t),a):(e.exit("atxHeadingSequence"),o(t))}function s(t){return null===t||35===t||Xi(t)?(e.exit("atxHeadingText"),o(t)):(e.consume(t),s)}}},Do={name:"setextUnderline",resolveTo:function(e,t){let n,r,i,o=e.length;for(;o--;)if("enter"===e[o][0]){if("content"===e[o][1].type){n=o;break}"paragraph"===e[o][1].type&&(r=o)}else"content"===e[o][1].type&&e.splice(o,1),i||"definition"!==e[o][1].type||(i=o);const a={type:"setextHeading",start:{...e[n][1].start},end:{...e[e.length-1][1].end}};return e[r][1].type="setextHeadingText",i?(e.splice(r,0,["enter",a,t]),e.splice(i+1,0,["exit",e[n][1],t]),e[n][1].end={...e[i][1].end}):e[n][1]=a,e.push(["exit",a,t]),e},tokenize:function(e,t,n){const r=this;let i;return function(t){let a,s=r.events.length;for(;s--;)if("lineEnding"!==r.events[s][1].type&&"linePrefix"!==r.events[s][1].type&&"content"!==r.events[s][1].type){a="paragraph"===r.events[s][1].type;break}return r.parser.lazy[r.now().line]||!r.interrupt&&!a?n(t):(e.enter("setextHeadingLine"),i=t,function(t){return e.enter("setextHeadingLineSequence"),o(t)}(t))};function o(t){return t===i?(e.consume(t),o):(e.exit("setextHeadingLineSequence"),Ji(t)?no(e,a,"lineSuffix")(t):a(t))}function a(r){return null===r||Gi(r)?(e.exit("setextHeadingLine"),t(r)):n(r)}}},Bo=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","search","section","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Po=["pre","script","style","textarea"],Ro={concrete:!0,name:"htmlFlow",resolveTo:function(e){let t=e.length;for(;t--&&("enter"!==e[t][0]||"htmlFlow"!==e[t][1].type););return t>1&&"linePrefix"===e[t-2][1].type&&(e[t][1].start=e[t-2][1].start,e[t+1][1].start=e[t-2][1].start,e.splice(t-2,2)),e},tokenize:function(e,t,n){const r=this;let i,o,a,s,l;return function(t){return function(t){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(t),u}(t)};function u(s){return 33===s?(e.consume(s),c):47===s?(e.consume(s),o=!0,p):63===s?(e.consume(s),i=3,r.interrupt?t:P):Ui(s)?(e.consume(s),a=String.fromCharCode(s),h):n(s)}function c(o){return 45===o?(e.consume(o),i=2,f):91===o?(e.consume(o),i=5,s=0,d):Ui(o)?(e.consume(o),i=4,r.interrupt?t:P):n(o)}function f(i){return 45===i?(e.consume(i),r.interrupt?t:P):n(i)}function d(i){return i==="CDATA[".charCodeAt(s++)?(e.consume(i),6===s?r.interrupt?t:S:d):n(i)}function p(t){return Ui(t)?(e.consume(t),a=String.fromCharCode(t),h):n(t)}function h(s){if(null===s||47===s||62===s||Xi(s)){const l=47===s,u=a.toLowerCase();return l||o||!Po.includes(u)?Bo.includes(a.toLowerCase())?(i=6,l?(e.consume(s),m):r.interrupt?t(s):S(s)):(i=7,r.interrupt&&!r.parser.lazy[r.now().line]?n(s):o?y(s):v(s)):(i=1,r.interrupt?t(s):S(s))}return 45===s||Qi(s)?(e.consume(s),a+=String.fromCharCode(s),h):n(s)}function m(i){return 62===i?(e.consume(i),r.interrupt?t:S):n(i)}function y(t){return Ji(t)?(e.consume(t),y):w(t)}function v(t){return 47===t?(e.consume(t),w):58===t||95===t||Ui(t)?(e.consume(t),g):Ji(t)?(e.consume(t),v):w(t)}function g(t){return 45===t||46===t||58===t||95===t||Qi(t)?(e.consume(t),g):b(t)}function b(t){return 61===t?(e.consume(t),A):Ji(t)?(e.consume(t),b):v(t)}function A(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),l=t,k):Ji(t)?(e.consume(t),A):E(t)}function k(t){return t===l?(e.consume(t),l=null,x):null===t||Gi(t)?n(t):(e.consume(t),k)}function E(t){return null===t||34===t||39===t||47===t||60===t||61===t||62===t||96===t||Xi(t)?b(t):(e.consume(t),E)}function x(e){return 47===e||62===e||Ji(e)?v(e):n(e)}function w(t){return 62===t?(e.consume(t),C):n(t)}function C(t){return null===t||Gi(t)?S(t):Ji(t)?(e.consume(t),C):n(t)}function S(t){return 45===t&&2===i?(e.consume(t),I):60===t&&1===i?(e.consume(t),N):62===t&&4===i?(e.consume(t),R):63===t&&3===i?(e.consume(t),P):93===t&&5===i?(e.consume(t),B):!Gi(t)||6!==i&&7!==i?null===t||Gi(t)?(e.exit("htmlFlowData"),_(t)):(e.consume(t),S):(e.exit("htmlFlowData"),e.check(Fo,F,_)(t))}function _(t){return e.check(Lo,T,F)(t)}function T(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),O}function O(t){return null===t||Gi(t)?_(t):(e.enter("htmlFlowData"),S(t))}function I(t){return 45===t?(e.consume(t),P):S(t)}function N(t){return 47===t?(e.consume(t),a="",D):S(t)}function D(t){if(62===t){const n=a.toLowerCase();return Po.includes(n)?(e.consume(t),R):S(t)}return Ui(t)&&a.length<8?(e.consume(t),a+=String.fromCharCode(t),D):S(t)}function B(t){return 93===t?(e.consume(t),P):S(t)}function P(t){return 62===t?(e.consume(t),R):45===t&&2===i?(e.consume(t),P):S(t)}function R(t){return null===t||Gi(t)?(e.exit("htmlFlowData"),F(t)):(e.consume(t),R)}function F(n){return e.exit("htmlFlow"),t(n)}}},Fo={partial:!0,tokenize:function(e,t,n){return function(r){return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),e.attempt(ao,t,n)}}},Lo={partial:!0,tokenize:function(e,t,n){const r=this;return function(t){return Gi(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),i):n(t)};function i(e){return r.parser.lazy[r.now().line]?n(e):t(e)}}},Mo={partial:!0,tokenize:function(e,t,n){const r=this;return function(t){return null===t?n(t):(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),i)};function i(e){return r.parser.lazy[r.now().line]?n(e):t(e)}}},zo={concrete:!0,name:"codeFenced",tokenize:function(e,t,n){const r=this,i={partial:!0,tokenize:function(e,t,n){let i=0;return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),a};function a(t){return e.enter("codeFencedFence"),Ji(t)?no(e,l,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(t):l(t)}function l(t){return t===o?(e.enter("codeFencedFenceSequence"),u(t)):n(t)}function u(t){return t===o?(i++,e.consume(t),u):i>=s?(e.exit("codeFencedFenceSequence"),Ji(t)?no(e,c,"whitespace")(t):c(t)):n(t)}function c(r){return null===r||Gi(r)?(e.exit("codeFencedFence"),t(r)):n(r)}}};let o,a=0,s=0;return function(t){return function(t){const n=r.events[r.events.length-1];return a=n&&"linePrefix"===n[1].type?n[2].sliceSerialize(n[1],!0).length:0,o=t,e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),l(t)}(t)};function l(t){return t===o?(s++,e.consume(t),l):s<3?n(t):(e.exit("codeFencedFenceSequence"),Ji(t)?no(e,u,"whitespace")(t):u(t))}function u(n){return null===n||Gi(n)?(e.exit("codeFencedFence"),r.interrupt?t(n):e.check(Mo,p,g)(n)):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),c(n))}function c(t){return null===t||Gi(t)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),u(t)):Ji(t)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),no(e,f,"whitespace")(t)):96===t&&t===o?n(t):(e.consume(t),c)}function f(t){return null===t||Gi(t)?u(t):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),d(t))}function d(t){return null===t||Gi(t)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),u(t)):96===t&&t===o?n(t):(e.consume(t),d)}function p(t){return e.attempt(i,g,h)(t)}function h(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),m}function m(t){return a>0&&Ji(t)?no(e,y,"linePrefix",a+1)(t):y(t)}function y(t){return null===t||Gi(t)?e.check(Mo,p,g)(t):(e.enter("codeFlowValue"),v(t))}function v(t){return null===t||Gi(t)?(e.exit("codeFlowValue"),y(t)):(e.consume(t),v)}function g(n){return e.exit("codeFenced"),t(n)}}},jo=document.createElement("i");function Vo(e){const t="&"+e+";";jo.innerHTML=t;const n=jo.textContent;return(59!==n.charCodeAt(n.length-1)||"semi"===e)&&n!==t&&n}const qo={name:"characterReference",tokenize:function(e,t,n){const r=this;let i,o,a=0;return function(t){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(t),e.exit("characterReferenceMarker"),s};function s(t){return 35===t?(e.enter("characterReferenceMarkerNumeric"),e.consume(t),e.exit("characterReferenceMarkerNumeric"),l):(e.enter("characterReferenceValue"),i=31,o=Qi,u(t))}function l(t){return 88===t||120===t?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(t),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),i=6,o=$i,u):(e.enter("characterReferenceValue"),i=7,o=Yi,u(t))}function u(s){if(59===s&&a){const i=e.exit("characterReferenceValue");return o!==Qi||Vo(r.sliceSerialize(i))?(e.enter("characterReferenceMarker"),e.consume(s),e.exit("characterReferenceMarker"),e.exit("characterReference"),t):n(s)}return o(s)&&a++<i?(e.consume(s),u):n(s)}}},Uo={name:"characterEscape",tokenize:function(e,t,n){return function(t){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(t),e.exit("escapeMarker"),r};function r(r){return Ki(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),t):n(r)}}},Qo={name:"lineEnding",tokenize:function(e,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),no(e,t,"linePrefix")}}};function Wo(e,t,n){const r=[];let i=-1;for(;++i<e.length;){const o=e[i].resolveAll;o&&!r.includes(o)&&(t=o(t,n),r.push(o))}return t}const Ho={name:"labelEnd",resolveAll:function(e){let t=-1;const n=[];for(;++t<e.length;){const r=e[t][1];if(n.push(e[t]),"labelImage"===r.type||"labelLink"===r.type||"labelEnd"===r.type){const e="labelImage"===r.type?4:2;r.type="data",t+=e}}return e.length!==n.length&&Pi(e,0,e.length,n),e},resolveTo:function(e,t){let n,r,i,o,a=e.length,s=0;for(;a--;)if(n=e[a][1],r){if("link"===n.type||"labelLink"===n.type&&n._inactive)break;"enter"===e[a][0]&&"labelLink"===n.type&&(n._inactive=!0)}else if(i){if("enter"===e[a][0]&&("labelImage"===n.type||"labelLink"===n.type)&&!n._balanced&&(r=a,"labelLink"!==n.type)){s=2;break}}else"labelEnd"===n.type&&(i=a);const l={type:"labelLink"===e[r][1].type?"link":"image",start:{...e[r][1].start},end:{...e[e.length-1][1].end}},u={type:"label",start:{...e[r][1].start},end:{...e[i][1].end}},c={type:"labelText",start:{...e[r+s+2][1].end},end:{...e[i-2][1].start}};return o=[["enter",l,t],["enter",u,t]],o=Ri(o,e.slice(r+1,r+s+3)),o=Ri(o,[["enter",c,t]]),o=Ri(o,Wo(t.parser.constructs.insideSpan.null,e.slice(r+s+4,i-3),t)),o=Ri(o,[["exit",c,t],e[i-2],e[i-1],["exit",u,t]]),o=Ri(o,e.slice(i+1)),o=Ri(o,[["exit",l,t]]),Pi(e,r,e.length,o),e},tokenize:function(e,t,n){const r=this;let i,o,a=r.events.length;for(;a--;)if(("labelImage"===r.events[a][1].type||"labelLink"===r.events[a][1].type)&&!r.events[a][1]._balanced){i=r.events[a][1];break}return function(t){return i?i._inactive?c(t):(o=r.parser.defined.includes(So(r.sliceSerialize({start:i.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelEnd"),s):n(t)};function s(t){return 40===t?e.attempt(Yo,u,o?u:c)(t):91===t?e.attempt($o,u,o?l:c)(t):o?u(t):c(t)}function l(t){return e.attempt(Ko,u,c)(t)}function u(e){return t(e)}function c(e){return i._balanced=!0,n(e)}}},Yo={tokenize:function(e,t,n){return function(t){return e.enter("resource"),e.enter("resourceMarker"),e.consume(t),e.exit("resourceMarker"),r};function r(t){return Xi(t)?Co(e,i)(t):i(t)}function i(t){return 41===t?u(t):Eo(e,o,a,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",32)(t)}function o(t){return Xi(t)?Co(e,s)(t):u(t)}function a(e){return n(e)}function s(t){return 34===t||39===t||40===t?wo(e,l,n,"resourceTitle","resourceTitleMarker","resourceTitleString")(t):u(t)}function l(t){return Xi(t)?Co(e,u)(t):u(t)}function u(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),t):n(r)}}},$o={tokenize:function(e,t,n){const r=this;return function(t){return xo.call(r,e,i,o,"reference","referenceMarker","referenceString")(t)};function i(e){return r.parser.defined.includes(So(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?t(e):n(e)}function o(e){return n(e)}}},Ko={tokenize:function(e,t,n){return function(t){return e.enter("reference"),e.enter("referenceMarker"),e.consume(t),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),t):n(r)}}},Go={name:"labelStartImage",resolveAll:Ho.resolveAll,tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(t),e.exit("labelImageMarker"),i};function i(t){return 91===t?(e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelImage"),o):n(t)}function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}}};function Xo(e){return null===e||Xi(e)||eo(e)?1:Zi(e)?2:void 0}const Jo={name:"attention",resolveAll:function(e,t){let n,r,i,o,a,s,l,u,c=-1;for(;++c<e.length;)if("enter"===e[c][0]&&"attentionSequence"===e[c][1].type&&e[c][1]._close)for(n=c;n--;)if("exit"===e[n][0]&&"attentionSequence"===e[n][1].type&&e[n][1]._open&&t.sliceSerialize(e[n][1]).charCodeAt(0)===t.sliceSerialize(e[c][1]).charCodeAt(0)){if((e[n][1]._close||e[c][1]._open)&&(e[c][1].end.offset-e[c][1].start.offset)%3&&!((e[n][1].end.offset-e[n][1].start.offset+e[c][1].end.offset-e[c][1].start.offset)%3))continue;s=e[n][1].end.offset-e[n][1].start.offset>1&&e[c][1].end.offset-e[c][1].start.offset>1?2:1;const f={...e[n][1].end},d={...e[c][1].start};Zo(f,-s),Zo(d,s),o={type:s>1?"strongSequence":"emphasisSequence",start:f,end:{...e[n][1].end}},a={type:s>1?"strongSequence":"emphasisSequence",start:{...e[c][1].start},end:d},i={type:s>1?"strongText":"emphasisText",start:{...e[n][1].end},end:{...e[c][1].start}},r={type:s>1?"strong":"emphasis",start:{...o.start},end:{...a.end}},e[n][1].end={...o.start},e[c][1].start={...a.end},l=[],e[n][1].end.offset-e[n][1].start.offset&&(l=Ri(l,[["enter",e[n][1],t],["exit",e[n][1],t]])),l=Ri(l,[["enter",r,t],["enter",o,t],["exit",o,t],["enter",i,t]]),l=Ri(l,Wo(t.parser.constructs.insideSpan.null,e.slice(n+1,c),t)),l=Ri(l,[["exit",i,t],["enter",a,t],["exit",a,t],["exit",r,t]]),e[c][1].end.offset-e[c][1].start.offset?(u=2,l=Ri(l,[["enter",e[c][1],t],["exit",e[c][1],t]])):u=0,Pi(e,n-1,c-n+3,l),c=n+l.length-u-2;break}for(c=-1;++c<e.length;)"attentionSequence"===e[c][1].type&&(e[c][1].type="data");return e},tokenize:function(e,t){const n=this.parser.constructs.attentionMarkers.null,r=this.previous,i=Xo(r);let o;return function(t){return o=t,e.enter("attentionSequence"),a(t)};function a(s){if(s===o)return e.consume(s),a;const l=e.exit("attentionSequence"),u=Xo(s),c=!u||2===u&&i||n.includes(s),f=!i||2===i&&u||n.includes(r);return l._open=Boolean(42===o?c:c&&(i||!f)),l._close=Boolean(42===o?f:f&&(u||!c)),t(s)}}};function Zo(e,t){e.column+=t,e.offset+=t,e._bufferIndex+=t}const ea={name:"autolink",tokenize:function(e,t,n){let r=0;return function(t){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),i};function i(t){return Ui(t)?(e.consume(t),o):64===t?n(t):l(t)}function o(e){return 43===e||45===e||46===e||Qi(e)?(r=1,a(e)):l(e)}function a(t){return 58===t?(e.consume(t),r=0,s):(43===t||45===t||46===t||Qi(t))&&r++<32?(e.consume(t),a):(r=0,l(t))}function s(r){return 62===r?(e.exit("autolinkProtocol"),e.enter("autolinkMarker"),e.consume(r),e.exit("autolinkMarker"),e.exit("autolink"),t):null===r||32===r||60===r||Hi(r)?n(r):(e.consume(r),s)}function l(t){return 64===t?(e.consume(t),u):Wi(t)?(e.consume(t),l):n(t)}function u(e){return Qi(e)?c(e):n(e)}function c(n){return 46===n?(e.consume(n),r=0,u):62===n?(e.exit("autolinkProtocol").type="autolinkEmail",e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.exit("autolink"),t):f(n)}function f(t){if((45===t||Qi(t))&&r++<63){const n=45===t?f:c;return e.consume(t),n}return n(t)}}},ta={name:"htmlText",tokenize:function(e,t,n){const r=this;let i,o,a;return function(t){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(t),s};function s(t){return 33===t?(e.consume(t),l):47===t?(e.consume(t),A):63===t?(e.consume(t),g):Ui(t)?(e.consume(t),x):n(t)}function l(t){return 45===t?(e.consume(t),u):91===t?(e.consume(t),o=0,p):Ui(t)?(e.consume(t),v):n(t)}function u(t){return 45===t?(e.consume(t),d):n(t)}function c(t){return null===t?n(t):45===t?(e.consume(t),f):Gi(t)?(a=c,D(t)):(e.consume(t),c)}function f(t){return 45===t?(e.consume(t),d):c(t)}function d(e){return 62===e?N(e):45===e?f(e):c(e)}function p(t){return t==="CDATA[".charCodeAt(o++)?(e.consume(t),6===o?h:p):n(t)}function h(t){return null===t?n(t):93===t?(e.consume(t),m):Gi(t)?(a=h,D(t)):(e.consume(t),h)}function m(t){return 93===t?(e.consume(t),y):h(t)}function y(t){return 62===t?N(t):93===t?(e.consume(t),y):h(t)}function v(t){return null===t||62===t?N(t):Gi(t)?(a=v,D(t)):(e.consume(t),v)}function g(t){return null===t?n(t):63===t?(e.consume(t),b):Gi(t)?(a=g,D(t)):(e.consume(t),g)}function b(e){return 62===e?N(e):g(e)}function A(t){return Ui(t)?(e.consume(t),k):n(t)}function k(t){return 45===t||Qi(t)?(e.consume(t),k):E(t)}function E(t){return Gi(t)?(a=E,D(t)):Ji(t)?(e.consume(t),E):N(t)}function x(t){return 45===t||Qi(t)?(e.consume(t),x):47===t||62===t||Xi(t)?w(t):n(t)}function w(t){return 47===t?(e.consume(t),N):58===t||95===t||Ui(t)?(e.consume(t),C):Gi(t)?(a=w,D(t)):Ji(t)?(e.consume(t),w):N(t)}function C(t){return 45===t||46===t||58===t||95===t||Qi(t)?(e.consume(t),C):S(t)}function S(t){return 61===t?(e.consume(t),_):Gi(t)?(a=S,D(t)):Ji(t)?(e.consume(t),S):w(t)}function _(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),i=t,T):Gi(t)?(a=_,D(t)):Ji(t)?(e.consume(t),_):(e.consume(t),O)}function T(t){return t===i?(e.consume(t),i=void 0,I):null===t?n(t):Gi(t)?(a=T,D(t)):(e.consume(t),T)}function O(t){return null===t||34===t||39===t||60===t||61===t||96===t?n(t):47===t||62===t||Xi(t)?w(t):(e.consume(t),O)}function I(e){return 47===e||62===e||Xi(e)?w(e):n(e)}function N(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),t):n(r)}function D(t){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),B}function B(t){return Ji(t)?no(e,P,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(t):P(t)}function P(t){return e.enter("htmlTextData"),a(t)}}},na={name:"labelStartLink",resolveAll:Ho.resolveAll,tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelLink"),i};function i(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}}},ra={name:"hardBreakEscape",tokenize:function(e,t,n){return function(t){return e.enter("hardBreakEscape"),e.consume(t),r};function r(r){return Gi(r)?(e.exit("hardBreakEscape"),t(r)):n(r)}}},ia={name:"codeText",previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type},resolve:function(e){let t,n,r=e.length-4,i=3;if(!("lineEnding"!==e[i][1].type&&"space"!==e[i][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(t=i;++t<r;)if("codeTextData"===e[t][1].type){e[i][1].type="codeTextPadding",e[r][1].type="codeTextPadding",i+=2,r-=2;break}for(t=i-1,r++;++t<=r;)void 0===n?t!==r&&"lineEnding"!==e[t][1].type&&(n=t):t!==r&&"lineEnding"!==e[t][1].type||(e[n][1].type="codeTextData",t!==n+2&&(e[n][1].end=e[t-1][1].end,e.splice(n+2,t-n-2),r-=t-n-2,t=n+2),n=void 0);return e},tokenize:function(e,t,n){let r,i,o=0;return function(t){return e.enter("codeText"),e.enter("codeTextSequence"),a(t)};function a(t){return 96===t?(e.consume(t),o++,a):(e.exit("codeTextSequence"),s(t))}function s(t){return null===t?n(t):32===t?(e.enter("space"),e.consume(t),e.exit("space"),s):96===t?(i=e.enter("codeTextSequence"),r=0,u(t)):Gi(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),s):(e.enter("codeTextData"),l(t))}function l(t){return null===t||32===t||96===t||Gi(t)?(e.exit("codeTextData"),s(t)):(e.consume(t),l)}function u(n){return 96===n?(e.consume(n),r++,u):r===o?(e.exit("codeTextSequence"),e.exit("codeText"),t(n)):(i.type="codeTextData",l(n))}}},oa={42:go,43:go,45:go,48:go,49:go,50:go,51:go,52:go,53:go,54:go,55:go,56:go,57:go,62:ko},aa={91:_o},sa={[-2]:Oo,[-1]:Oo,32:Oo},la={35:No,42:vo,45:[Do,vo],60:Ro,61:Do,95:vo,96:zo,126:zo},ua={38:qo,92:Uo},ca={[-5]:Qo,[-4]:Qo,[-3]:Qo,33:Go,38:qo,42:Jo,60:[ea,ta],91:na,92:[ra,Uo],93:Ho,95:Jo,96:ia},fa={null:[Jo,co]},da={null:[42,95]},pa={null:[]};function ha(e,t,n){let r={_bufferIndex:-1,_index:0,line:n&&n.line||1,column:n&&n.column||1,offset:n&&n.offset||0};const i={},o=[];let a=[],s=[],l=!0;const u={attempt:v((function(e,t){g(e,t.from)})),check:v(y),consume:function(e){Gi(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,b()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===a[r._index].length&&(r._bufferIndex=-1,r._index++)),c.previous=e,l=!0},enter:function(e,t){const n=t||{};return n.type=e,n.start=h(),c.events.push(["enter",n,c]),s.push(n),n},exit:function(e){const t=s.pop();return t.end=h(),c.events.push(["exit",t,c]),t},interrupt:v(y,{interrupt:!0})},c={code:null,containerState:{},defineSkip:function(e){i[e.line]=e.column,b()},events:[],now:h,parser:e,previous:null,sliceSerialize:function(e,t){return function(e,t){let n=-1;const r=[];let i;for(;++n<e.length;){const o=e[n];let a;if("string"==typeof o)a=o;else switch(o){case-5:a="\r";break;case-4:a="\n";break;case-3:a="\r\n";break;case-2:a=t?" ":"\t";break;case-1:if(!t&&i)continue;a=" ";break;default:a=String.fromCharCode(o)}i=-2===o,r.push(a)}return r.join("")}(p(e),t)},sliceStream:p,write:function(e){return a=Ri(a,e),function(){let e;for(;r._index<a.length;){const t=a[r._index];if("string"==typeof t)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<t.length;)m(t.charCodeAt(r._bufferIndex));else m(t)}}(),null!==a[a.length-1]?[]:(g(t,0),c.events=Wo(o,c.events,c),c.events)}};let f,d=t.tokenize.call(c,u);return t.resolveAll&&o.push(t),c;function p(e){return function(e,t){const n=t.start._index,r=t.start._bufferIndex,i=t.end._index,o=t.end._bufferIndex;let a;if(n===i)a=[e[n].slice(r,o)];else{if(a=e.slice(n,i),r>-1){const e=a[0];"string"==typeof e?a[0]=e.slice(r):a.shift()}o>0&&a.push(e[i].slice(0,o))}return a}(a,e)}function h(){const{_bufferIndex:e,_index:t,line:n,column:i,offset:o}=r;return{_bufferIndex:e,_index:t,line:n,column:i,offset:o}}function m(e){l=void 0,f=e,d=d(e)}function y(e,t){t.restore()}function v(e,t){return function(n,i,o){let a,f,d,p;return Array.isArray(n)?y(n):"tokenize"in n?y([n]):(m=n,function(e){const t=null!==e&&m[e],n=null!==e&&m.null;return y([...Array.isArray(t)?t:t?[t]:[],...Array.isArray(n)?n:n?[n]:[]])(e)});var m;function y(e){return a=e,f=0,0===e.length?o:v(e[f])}function v(e){return function(n){return p=function(){const e=h(),t=c.previous,n=c.currentConstruct,i=c.events.length,o=Array.from(s);return{from:i,restore:function(){r=e,c.previous=t,c.currentConstruct=n,c.events.length=i,s=o,b()}}}(),d=e,e.partial||(c.currentConstruct=e),e.name&&c.parser.constructs.disable.null.includes(e.name)?A():e.tokenize.call(t?Object.assign(Object.create(c),t):c,u,g,A)(n)}}function g(t){return l=!0,e(d,p),i}function A(e){return l=!0,p.restore(),++f<a.length?v(a[f]):o}}}function g(e,t){e.resolveAll&&!o.includes(e)&&o.push(e),e.resolve&&Pi(c.events,t,c.events.length-t,e.resolve(c.events.slice(t),c)),e.resolveTo&&(c.events=e.resolveTo(c.events,c))}function b(){r.line in i&&r.column<2&&(r.column=i[r.line],r.offset+=i[r.line]-1)}}const ma=/[\0\t\n\r]/g;function ya(e,t){const n=Number.parseInt(e,t);return n<9||11===n||n>13&&n<32||n>126&&n<160||n>55295&&n<57344||n>64975&&n<65008||!(65535&~n)||65534==(65535&n)||n>1114111?"�":String.fromCodePoint(n)}const va=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function ga(e,t,n){if(t)return t;if(35===n.charCodeAt(0)){const e=n.charCodeAt(1),t=120===e||88===e;return ya(n.slice(t?2:1),t?16:10)}return Vo(n)||e}const ba={}.hasOwnProperty;function Aa(e,n,r){return"string"!=typeof n&&(r=n,n=void 0),function(e){const t={transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:i(g),autolinkProtocol:c,autolinkEmail:c,atxHeading:i(m),blockQuote:i((function(){return{type:"blockquote",children:[]}})),characterEscape:c,characterReference:c,codeFenced:i(h),codeFencedFenceInfo:o,codeFencedFenceMeta:o,codeIndented:i(h,o),codeText:i((function(){return{type:"inlineCode",value:""}}),o),codeTextData:c,data:c,codeFlowValue:c,definition:i((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:o,definitionLabelString:o,definitionTitleString:o,emphasis:i((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:i(y),hardBreakTrailing:i(y),htmlFlow:i(v,o),htmlFlowData:c,htmlText:i(v,o),htmlTextData:c,image:i((function(){return{type:"image",title:null,url:"",alt:null}})),label:o,link:i(g),listItem:i((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){this.data.expectingFirstListItemValue&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),this.data.expectingFirstListItemValue=void 0)},listOrdered:i(b,(function(){this.data.expectingFirstListItemValue=!0})),listUnordered:i(b),paragraph:i((function(){return{type:"paragraph",children:[]}})),reference:function(){this.data.referenceType="collapsed"},referenceString:o,resourceDestinationString:o,resourceTitleString:o,setextHeading:i(m),strong:i((function(){return{type:"strong",children:[]}})),thematicBreak:i((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:s(),atxHeadingSequence:function(e){const t=this.stack[this.stack.length-1];if(!t.depth){const n=this.sliceSerialize(e).length;t.depth=n}},autolink:s(),autolinkEmail:function(e){f.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){f.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:s(),characterEscapeValue:f,characterReferenceMarkerHexadecimal:p,characterReferenceMarkerNumeric:p,characterReferenceValue:function(e){const t=this.sliceSerialize(e),n=this.data.characterReferenceType;let r;n?(r=ya(t,"characterReferenceMarkerNumeric"===n?10:16),this.data.characterReferenceType=void 0):r=Vo(t);this.stack[this.stack.length-1].value+=r},characterReference:function(e){this.stack.pop().position.end=ka(e.end)},codeFenced:s((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),this.data.flowCodeInside=void 0})),codeFencedFence:function(){this.data.flowCodeInside||(this.buffer(),this.data.flowCodeInside=!0)},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:f,codeIndented:s((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:s((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:f,data:f,definition:s(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=So(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:s(),hardBreakEscape:s(d),hardBreakTrailing:s(d),htmlFlow:s((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:f,htmlText:s((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:f,image:s((function(){const e=this.stack[this.stack.length-1];if(this.data.inReference){const t=this.data.referenceType||"shortcut";e.type+="Reference",e.referenceType=t,delete e.url,delete e.title}else delete e.identifier,delete e.label;this.data.referenceType=void 0})),label:function(){const e=this.stack[this.stack.length-1],t=this.resume(),n=this.stack[this.stack.length-1];if(this.data.inReference=!0,"link"===n.type){const t=e.children;n.children=t}else n.alt=t},labelText:function(e){const t=this.sliceSerialize(e),n=this.stack[this.stack.length-2];n.label=function(e){return e.replace(va,ga)}(t),n.identifier=So(t).toLowerCase()},lineEnding:function(e){const n=this.stack[this.stack.length-1];if(this.data.atHardBreak)return n.children[n.children.length-1].position.end=ka(e.end),void(this.data.atHardBreak=void 0);!this.data.setextHeadingSlurpLineEnding&&t.canContainEols.includes(n.type)&&(c.call(this,e),f.call(this,e))},link:s((function(){const e=this.stack[this.stack.length-1];if(this.data.inReference){const t=this.data.referenceType||"shortcut";e.type+="Reference",e.referenceType=t,delete e.url,delete e.title}else delete e.identifier,delete e.label;this.data.referenceType=void 0})),listItem:s(),listOrdered:s(),listUnordered:s(),paragraph:s(),referenceString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=So(this.sliceSerialize(e)).toLowerCase(),this.data.referenceType="full"},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){this.data.inReference=void 0},setextHeading:s((function(){this.data.setextHeadingSlurpLineEnding=void 0})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).codePointAt(0)?1:2},setextHeadingText:function(){this.data.setextHeadingSlurpLineEnding=!0},strong:s(),thematicBreak:s()}};Ea(t,(e||{}).mdastExtensions||[]);const n={};return function(e){let i={type:"root",children:[]};const s={stack:[i],tokenStack:[],config:t,enter:a,exit:l,buffer:o,resume:u,data:n},c=[];let f=-1;for(;++f<e.length;)"listOrdered"!==e[f][1].type&&"listUnordered"!==e[f][1].type||("enter"===e[f][0]?c.push(f):f=r(e,c.pop(),f));for(f=-1;++f<e.length;){const n=t[e[f][0]];ba.call(n,e[f][1].type)&&n[e[f][1].type].call(Object.assign({sliceSerialize:e[f][2].sliceSerialize},s),e[f][1])}if(s.tokenStack.length>0){const e=s.tokenStack[s.tokenStack.length-1];(e[1]||wa).call(s,void 0,e[0])}for(i.position={start:ka(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:ka(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},f=-1;++f<t.transforms.length;)i=t.transforms[f](i)||i;return i};function r(e,t,n){let r,i,o,a,s=t-1,l=-1,u=!1;for(;++s<=n;){const t=e[s];switch(t[1].type){case"listUnordered":case"listOrdered":case"blockQuote":"enter"===t[0]?l++:l--,a=void 0;break;case"lineEndingBlank":"enter"===t[0]&&(!r||a||l||o||(o=s),a=void 0);break;case"linePrefix":case"listItemValue":case"listItemMarker":case"listItemPrefix":case"listItemPrefixWhitespace":break;default:a=void 0}if(!l&&"enter"===t[0]&&"listItemPrefix"===t[1].type||-1===l&&"exit"===t[0]&&("listUnordered"===t[1].type||"listOrdered"===t[1].type)){if(r){let a=s;for(i=void 0;a--;){const t=e[a];if("lineEnding"===t[1].type||"lineEndingBlank"===t[1].type){if("exit"===t[0])continue;i&&(e[i][1].type="lineEndingBlank",u=!0),t[1].type="lineEnding",i=a}else if("linePrefix"!==t[1].type&&"blockQuotePrefix"!==t[1].type&&"blockQuotePrefixWhitespace"!==t[1].type&&"blockQuoteMarker"!==t[1].type&&"listItemIndent"!==t[1].type)break}o&&(!i||o<i)&&(r._spread=!0),r.end=Object.assign({},i?e[i][1].start:t[1].end),e.splice(i||s,0,["exit",r,t[2]]),s++,n++}if("listItemPrefix"===t[1].type){const i={type:"listItem",_spread:!1,start:Object.assign({},t[1].start),end:void 0};r=i,e.splice(s,0,["enter",i,t[2]]),s++,n++,o=void 0,a=!0}}}return e[t][1]._spread=u,n}function i(e,t){return function(n){a.call(this,e(n),n),t&&t.call(this,n)}}function o(){this.stack.push({type:"fragment",children:[]})}function a(e,t,n){this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push([t,n||void 0]),e.position={start:ka(t.start),end:void 0}}function s(e){return function(t){e&&e.call(this,t),l.call(this,t)}}function l(e,t){const n=this.stack.pop(),r=this.tokenStack.pop();if(!r)throw new Error("Cannot close `"+e.type+"` ("+ci({start:e.start,end:e.end})+"): it’s not open");r[0].type!==e.type&&(t?t.call(this,e,r[0]):(r[1]||wa).call(this,e,r[0])),n.position.end=ka(e.end)}function u(){return function(e){return Di(e,"boolean"!=typeof Ni.includeImageAlt||Ni.includeImageAlt,"boolean"!=typeof Ni.includeHtml||Ni.includeHtml)}(this.stack.pop())}function c(e){const t=this.stack[this.stack.length-1].children;let n=t[t.length-1];n&&"text"===n.type||(n={type:"text",value:""},n.position={start:ka(e.start),end:void 0},t.push(n)),this.stack.push(n)}function f(e){const t=this.stack.pop();t.value+=this.sliceSerialize(e),t.position.end=ka(e.end)}function d(){this.data.atHardBreak=!0}function p(e){this.data.characterReferenceType=e.type}function h(){return{type:"code",lang:null,meta:null,value:""}}function m(){return{type:"heading",depth:0,children:[]}}function y(){return{type:"break"}}function v(){return{type:"html",value:""}}function g(){return{type:"link",title:null,url:"",children:[]}}function b(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(r)(function(e){for(;!Mi(e););return e}(function(e){const n=function(e){const t={};let n=-1;for(;++n<e.length;)Vi(t,e[n]);return t}([t,...(e||{}).extensions||[]]),r={constructs:n,content:i(ro),defined:[],document:i(io),flow:i(uo),lazy:{},string:i(fo),text:i(po)};return r;function i(e){return function(t){return ha(r,e,t)}}}(r).document().write(function(){let e,t=1,n="",r=!0;return function(i,o,a){const s=[];let l,u,c,f,d;for(i=n+("string"==typeof i?i.toString():new TextDecoder(o||void 0).decode(i)),c=0,n="",r&&(65279===i.charCodeAt(0)&&c++,r=void 0);c<i.length;){if(ma.lastIndex=c,l=ma.exec(i),f=l&&void 0!==l.index?l.index:i.length,d=i.charCodeAt(f),!l){n=i.slice(c);break}if(10===d&&c===f&&e)s.push(-3),e=void 0;else switch(e&&(s.push(-5),e=void 0),c<f&&(s.push(i.slice(c,f)),t+=f-c),d){case 0:s.push(65533),t++;break;case 9:for(u=4*Math.ceil(t/4),s.push(-2);t++<u;)s.push(-1);break;case 10:s.push(-4),t=1;break;default:e=!0,t=1}c=f+1}return a&&(e&&s.push(-5),n&&s.push(n),s.push(null)),s}}()(e,n,!0))))}function ka(e){return{line:e.line,column:e.column,offset:e.offset}}function Ea(e,t){let n=-1;for(;++n<t.length;){const r=t[n];Array.isArray(r)?Ea(e,r):xa(e,r)}}function xa(e,t){let n;for(n in t)if(ba.call(t,n))switch(n){case"canContainEols":{const r=t[n];r&&e[n].push(...r);break}case"transforms":{const r=t[n];r&&e[n].push(...r);break}case"enter":case"exit":{const r=t[n];r&&Object.assign(e[n],r);break}}}function wa(e,t){throw e?new Error("Cannot close `"+e.type+"` ("+ci({start:e.start,end:e.end})+"): a different token (`"+t.type+"`, "+ci({start:t.start,end:t.end})+") is open"):new Error("Cannot close document, a token (`"+t.type+"`, "+ci({start:t.start,end:t.end})+") is still open")}function Ca(e){const t=this;t.parser=function(n){return Aa(n,{...t.data("settings"),...e,extensions:t.data("micromarkExtensions")||[],mdastExtensions:t.data("fromMarkdownExtensions")||[]})}}const Sa="object"==typeof self?self:globalThis,_a=e=>((e,t)=>{const n=(t,n)=>(e.set(n,t),t),r=i=>{if(e.has(i))return e.get(i);const[o,a]=t[i];switch(o){case 0:case-1:return n(a,i);case 1:{const e=n([],i);for(const t of a)e.push(r(t));return e}case 2:{const e=n({},i);for(const[t,n]of a)e[r(t)]=r(n);return e}case 3:return n(new Date(a),i);case 4:{const{source:e,flags:t}=a;return n(new RegExp(e,t),i)}case 5:{const e=n(new Map,i);for(const[t,n]of a)e.set(r(t),r(n));return e}case 6:{const e=n(new Set,i);for(const t of a)e.add(r(t));return e}case 7:{const{name:e,message:t}=a;return n(new Sa[e](t),i)}case 8:return n(BigInt(a),i);case"BigInt":return n(Object(BigInt(a)),i);case"ArrayBuffer":return n(new Uint8Array(a).buffer,a);case"DataView":{const{buffer:e}=new Uint8Array(a);return n(new DataView(e),a)}}return n(new Sa[o](a),i)};return r})(new Map,e)(0),Ta="",{toString:Oa}={},{keys:Ia}=Object,Na=e=>{const t=typeof e;if("object"!==t||!e)return[0,t];const n=Oa.call(e).slice(8,-1);switch(n){case"Array":return[1,Ta];case"Object":return[2,Ta];case"Date":return[3,Ta];case"RegExp":return[4,Ta];case"Map":return[5,Ta];case"Set":return[6,Ta];case"DataView":return[1,n]}return n.includes("Array")?[1,n]:n.includes("Error")?[7,n]:[2,n]},Da=([e,t])=>0===e&&("function"===t||"symbol"===t),Ba=(e,{json:t,lossy:n}={})=>{const r=[];return((e,t,n,r)=>{const i=(e,t)=>{const i=r.push(e)-1;return n.set(t,i),i},o=r=>{if(n.has(r))return n.get(r);let[a,s]=Na(r);switch(a){case 0:{let t=r;switch(s){case"bigint":a=8,t=r.toString();break;case"function":case"symbol":if(e)throw new TypeError("unable to serialize "+s);t=null;break;case"undefined":return i([-1],r)}return i([a,t],r)}case 1:{if(s){let e=r;return"DataView"===s?e=new Uint8Array(r.buffer):"ArrayBuffer"===s&&(e=new Uint8Array(r)),i([s,[...e]],r)}const e=[],t=i([a,e],r);for(const t of r)e.push(o(t));return t}case 2:{if(s)switch(s){case"BigInt":return i([s,r.toString()],r);case"Boolean":case"Number":case"String":return i([s,r.valueOf()],r)}if(t&&"toJSON"in r)return o(r.toJSON());const n=[],l=i([a,n],r);for(const t of Ia(r))!e&&Da(Na(r[t]))||n.push([o(t),o(r[t])]);return l}case 3:return i([a,r.toISOString()],r);case 4:{const{source:e,flags:t}=r;return i([a,{source:e,flags:t}],r)}case 5:{const t=[],n=i([a,t],r);for(const[n,i]of r)(e||!Da(Na(n))&&!Da(Na(i)))&&t.push([o(n),o(i)]);return n}case 6:{const t=[],n=i([a,t],r);for(const n of r)!e&&Da(Na(n))||t.push(o(n));return n}}const{message:l}=r;return i([a,{name:s,message:l}],r)};return o})(!(t||n),!!t,new Map,r)(e),r},Pa="function"==typeof structuredClone?(e,t)=>t&&("json"in t||"lossy"in t)?_a(Ba(e,t)):structuredClone(e):(e,t)=>_a(Ba(e,t));function Ra(e){const t=[];let n=-1,r=0,i=0;for(;++n<e.length;){const o=e.charCodeAt(n);let a="";if(37===o&&Qi(e.charCodeAt(n+1))&&Qi(e.charCodeAt(n+2)))i=2;else if(o<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(o))||(a=String.fromCharCode(o));else if(o>55295&&o<57344){const t=e.charCodeAt(n+1);o<56320&&t>56319&&t<57344?(a=String.fromCharCode(o,t),i=1):a="�"}else a=String.fromCharCode(o);a&&(t.push(e.slice(r,n),encodeURIComponent(a)),r=n+i+1,a=""),i&&(n+=i,i=0)}return t.join("")+e.slice(r)}function Fa(e,t){const n=[{type:"text",value:"↩"}];return t>1&&n.push({type:"element",tagName:"sup",properties:{},children:[{type:"text",value:String(t)}]}),n}function La(e,t){return"Back to reference "+(e+1)+(t>1?"-"+t:"")}const Ma=function(e){if(null==e)return ja;if("function"==typeof e)return za(e);if("object"==typeof e)return Array.isArray(e)?function(e){const t=[];let n=-1;for(;++n<e.length;)t[n]=Ma(e[n]);return za((function(...e){let n=-1;for(;++n<t.length;)if(t[n].apply(this,e))return!0;return!1}))}(e):function(e){const t=e;return za((function(n){const r=n;let i;for(i in e)if(r[i]!==t[i])return!1;return!0}))}(e);if("string"==typeof e)return function(e){return za((function(t){return t&&t.type===e}))}(e);throw new Error("Expected function, string, or object as test")};function za(e){return function(t,n,r){return Boolean(function(e){return null!==e&&"object"==typeof e&&"type"in e}(t)&&e.call(this,t,"number"==typeof n?n:void 0,r||void 0))}}function ja(){return!0}const Va=[],qa=!1;function Ua(e,t,n,r){let i,o,a;"function"==typeof t&&"function"!=typeof n?(o=void 0,a=t,i=n):(o=t,a=n,i=r),function(e,t,n,r){let i;"function"==typeof t&&"function"!=typeof n?(r=n,n=t):i=t;const o=Ma(i),a=r?-1:1;!function e(i,s,l){const u=i&&"object"==typeof i?i:{};if("string"==typeof u.type){const e="string"==typeof u.tagName?u.tagName:"string"==typeof u.name?u.name:void 0;Object.defineProperty(c,"name",{value:"node ("+i.type+(e?"<"+e+">":"")+")"})}return c;function c(){let u,c,f,d=Va;if((!t||o(i,s,l[l.length-1]||void 0))&&(d=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:null==e?Va:[e]}(n(i,l)),d[0]===qa))return d;if("children"in i&&i.children){const t=i;if(t.children&&"skip"!==d[0])for(c=(r?t.children.length:-1)+a,f=l.concat(t);c>-1&&c<t.children.length;){const n=t.children[c];if(u=e(n,c,f)(),u[0]===qa)return u;c="number"==typeof u[1]?u[1]:c+a}}return d}}(e,void 0,[])()}(e,o,(function(e,t){const n=t[t.length-1],r=n?n.children.indexOf(e):void 0;return a(e,r,n)}),i)}function Qa(e,t){const n=t.referenceType;let r="]";if("collapsed"===n?r+="[]":"full"===n&&(r+="["+(t.label||t.identifier)+"]"),"imageReference"===t.type)return[{type:"text",value:"!["+t.alt+r}];const i=e.all(t),o=i[0];o&&"text"===o.type?o.value="["+o.value:i.unshift({type:"text",value:"["});const a=i[i.length-1];return a&&"text"===a.type?a.value+=r:i.push({type:"text",value:r}),i}function Wa(e){const t=e.spread;return null==t?e.children.length>1:t}function Ha(e){const t=String(e),n=/\r?\n|\r/g;let r=n.exec(t),i=0;const o=[];for(;r;)o.push(Ya(t.slice(i,r.index),i>0,!0),r[0]),i=r.index+r[0].length,r=n.exec(t);return o.push(Ya(t.slice(i),i>0,!1)),o.join("")}function Ya(e,t,n){let r=0,i=e.length;if(t){let t=e.codePointAt(r);for(;9===t||32===t;)r++,t=e.codePointAt(r)}if(n){let t=e.codePointAt(i-1);for(;9===t||32===t;)i--,t=e.codePointAt(i-1)}return i>r?e.slice(r,i):""}const $a={blockquote:function(e,t){const n={type:"element",tagName:"blockquote",properties:{},children:e.wrap(e.all(t),!0)};return e.patch(t,n),e.applyData(t,n)},break:function(e,t){const n={type:"element",tagName:"br",properties:{},children:[]};return e.patch(t,n),[e.applyData(t,n),{type:"text",value:"\n"}]},code:function(e,t){const n=t.value?t.value+"\n":"",r={};t.lang&&(r.className=["language-"+t.lang]);let i={type:"element",tagName:"code",properties:r,children:[{type:"text",value:n}]};return t.meta&&(i.data={meta:t.meta}),e.patch(t,i),i=e.applyData(t,i),i={type:"element",tagName:"pre",properties:{},children:[i]},e.patch(t,i),i},delete:function(e,t){const n={type:"element",tagName:"del",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},emphasis:function(e,t){const n={type:"element",tagName:"em",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},footnoteReference:function(e,t){const n="string"==typeof e.options.clobberPrefix?e.options.clobberPrefix:"user-content-",r=String(t.identifier).toUpperCase(),i=Ra(r.toLowerCase()),o=e.footnoteOrder.indexOf(r);let a,s=e.footnoteCounts.get(r);void 0===s?(s=0,e.footnoteOrder.push(r),a=e.footnoteOrder.length):a=o+1,s+=1,e.footnoteCounts.set(r,s);const l={type:"element",tagName:"a",properties:{href:"#"+n+"fn-"+i,id:n+"fnref-"+i+(s>1?"-"+s:""),dataFootnoteRef:!0,ariaDescribedBy:["footnote-label"]},children:[{type:"text",value:String(a)}]};e.patch(t,l);const u={type:"element",tagName:"sup",properties:{},children:[l]};return e.patch(t,u),e.applyData(t,u)},heading:function(e,t){const n={type:"element",tagName:"h"+t.depth,properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},html:function(e,t){if(e.options.allowDangerousHtml){const n={type:"raw",value:t.value};return e.patch(t,n),e.applyData(t,n)}},imageReference:function(e,t){const n=String(t.identifier).toUpperCase(),r=e.definitionById.get(n);if(!r)return Qa(e,t);const i={src:Ra(r.url||""),alt:t.alt};null!==r.title&&void 0!==r.title&&(i.title=r.title);const o={type:"element",tagName:"img",properties:i,children:[]};return e.patch(t,o),e.applyData(t,o)},image:function(e,t){const n={src:Ra(t.url)};null!==t.alt&&void 0!==t.alt&&(n.alt=t.alt),null!==t.title&&void 0!==t.title&&(n.title=t.title);const r={type:"element",tagName:"img",properties:n,children:[]};return e.patch(t,r),e.applyData(t,r)},inlineCode:function(e,t){const n={type:"text",value:t.value.replace(/\r?\n|\r/g," ")};e.patch(t,n);const r={type:"element",tagName:"code",properties:{},children:[n]};return e.patch(t,r),e.applyData(t,r)},linkReference:function(e,t){const n=String(t.identifier).toUpperCase(),r=e.definitionById.get(n);if(!r)return Qa(e,t);const i={href:Ra(r.url||"")};null!==r.title&&void 0!==r.title&&(i.title=r.title);const o={type:"element",tagName:"a",properties:i,children:e.all(t)};return e.patch(t,o),e.applyData(t,o)},link:function(e,t){const n={href:Ra(t.url)};null!==t.title&&void 0!==t.title&&(n.title=t.title);const r={type:"element",tagName:"a",properties:n,children:e.all(t)};return e.patch(t,r),e.applyData(t,r)},listItem:function(e,t,n){const r=e.all(t),i=n?function(e){let t=!1;if("list"===e.type){t=e.spread||!1;const n=e.children;let r=-1;for(;!t&&++r<n.length;)t=Wa(n[r])}return t}(n):Wa(t),o={},a=[];if("boolean"==typeof t.checked){const e=r[0];let n;e&&"element"===e.type&&"p"===e.tagName?n=e:(n={type:"element",tagName:"p",properties:{},children:[]},r.unshift(n)),n.children.length>0&&n.children.unshift({type:"text",value:" "}),n.children.unshift({type:"element",tagName:"input",properties:{type:"checkbox",checked:t.checked,disabled:!0},children:[]}),o.className=["task-list-item"]}let s=-1;for(;++s<r.length;){const e=r[s];(i||0!==s||"element"!==e.type||"p"!==e.tagName)&&a.push({type:"text",value:"\n"}),"element"!==e.type||"p"!==e.tagName||i?a.push(e):a.push(...e.children)}const l=r[r.length-1];l&&(i||"element"!==l.type||"p"!==l.tagName)&&a.push({type:"text",value:"\n"});const u={type:"element",tagName:"li",properties:o,children:a};return e.patch(t,u),e.applyData(t,u)},list:function(e,t){const n={},r=e.all(t);let i=-1;for("number"==typeof t.start&&1!==t.start&&(n.start=t.start);++i<r.length;){const e=r[i];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){n.className=["contains-task-list"];break}}const o={type:"element",tagName:t.ordered?"ol":"ul",properties:n,children:e.wrap(r,!0)};return e.patch(t,o),e.applyData(t,o)},paragraph:function(e,t){const n={type:"element",tagName:"p",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},root:function(e,t){const n={type:"root",children:e.wrap(e.all(t))};return e.patch(t,n),e.applyData(t,n)},strong:function(e,t){const n={type:"element",tagName:"strong",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},table:function(e,t){const n=e.all(t),r=n.shift(),i=[];if(r){const n={type:"element",tagName:"thead",properties:{},children:e.wrap([r],!0)};e.patch(t.children[0],n),i.push(n)}if(n.length>0){const r={type:"element",tagName:"tbody",properties:{},children:e.wrap(n,!0)},o=li(t.children[1]),a=si(t.children[t.children.length-1]);o&&a&&(r.position={start:o,end:a}),i.push(r)}const o={type:"element",tagName:"table",properties:{},children:e.wrap(i,!0)};return e.patch(t,o),e.applyData(t,o)},tableCell:function(e,t){const n={type:"element",tagName:"td",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},tableRow:function(e,t,n){const r=n?n.children:void 0,i=0===(r?r.indexOf(t):1)?"th":"td",o=n&&"table"===n.type?n.align:void 0,a=o?o.length:t.children.length;let s=-1;const l=[];for(;++s<a;){const n=t.children[s],r={},a=o?o[s]:void 0;a&&(r.align=a);let u={type:"element",tagName:i,properties:r,children:[]};n&&(u.children=e.all(n),e.patch(n,u),u=e.applyData(n,u)),l.push(u)}const u={type:"element",tagName:"tr",properties:{},children:e.wrap(l,!0)};return e.patch(t,u),e.applyData(t,u)},text:function(e,t){const n={type:"text",value:Ha(String(t.value))};return e.patch(t,n),e.applyData(t,n)},thematicBreak:function(e,t){const n={type:"element",tagName:"hr",properties:{},children:[]};return e.patch(t,n),e.applyData(t,n)},toml:Ka,yaml:Ka,definition:Ka,footnoteDefinition:Ka};function Ka(){}const Ga={}.hasOwnProperty,Xa={};function Ja(e,t){e.position&&(t.position=function(e){const t=li(e),n=si(e);if(t&&n)return{start:t,end:n}}(e))}function Za(e,t){let n=t;if(e&&e.data){const t=e.data.hName,r=e.data.hChildren,i=e.data.hProperties;"string"==typeof t&&("element"===n.type?n.tagName=t:n={type:"element",tagName:t,properties:{},children:"children"in n?n.children:[n]}),"element"===n.type&&i&&Object.assign(n.properties,Pa(i)),"children"in n&&n.children&&null!=r&&(n.children=r)}return n}function es(e,t){const n=t.data||{},r=!("value"in t)||Ga.call(n,"hProperties")||Ga.call(n,"hChildren")?{type:"element",tagName:"div",properties:{},children:e.all(t)}:{type:"text",value:t.value};return e.patch(t,r),e.applyData(t,r)}function ts(e,t){const n=[];let r=-1;for(t&&n.push({type:"text",value:"\n"});++r<e.length;)r&&n.push({type:"text",value:"\n"}),n.push(e[r]);return t&&e.length>0&&n.push({type:"text",value:"\n"}),n}function ns(e){let t=0,n=e.charCodeAt(t);for(;9===n||32===n;)t++,n=e.charCodeAt(t);return e.slice(t)}function rs(e,t){const n=function(e,t){const n=t||Xa,r=new Map,i=new Map,o=new Map,a={...$a,...n.handlers},s={all:function(e){const t=[];if("children"in e){const n=e.children;let r=-1;for(;++r<n.length;){const i=s.one(n[r],e);if(i){if(r&&"break"===n[r-1].type&&(Array.isArray(i)||"text"!==i.type||(i.value=ns(i.value)),!Array.isArray(i)&&"element"===i.type)){const e=i.children[0];e&&"text"===e.type&&(e.value=ns(e.value))}Array.isArray(i)?t.push(...i):t.push(i)}}}return t},applyData:Za,definitionById:r,footnoteById:i,footnoteCounts:o,footnoteOrder:[],handlers:a,one:function(e,t){const n=e.type,r=s.handlers[n];if(Ga.call(s.handlers,n)&&r)return r(s,e,t);if(s.options.passThrough&&s.options.passThrough.includes(n)){if("children"in e){const{children:t,...n}=e,r=Pa(n);return r.children=s.all(e),r}return Pa(e)}return(s.options.unknownHandler||es)(s,e,t)},options:n,patch:Ja,wrap:ts};return Ua(e,(function(e){if("definition"===e.type||"footnoteDefinition"===e.type){const t="definition"===e.type?r:i,n=String(e.identifier).toUpperCase();t.has(n)||t.set(n,e)}})),s}(e,t),r=n.one(e,void 0),i=function(e){const t="string"==typeof e.options.clobberPrefix?e.options.clobberPrefix:"user-content-",n=e.options.footnoteBackContent||Fa,r=e.options.footnoteBackLabel||La,i=e.options.footnoteLabel||"Footnotes",o=e.options.footnoteLabelTagName||"h2",a=e.options.footnoteLabelProperties||{className:["sr-only"]},s=[];let l=-1;for(;++l<e.footnoteOrder.length;){const i=e.footnoteById.get(e.footnoteOrder[l]);if(!i)continue;const o=e.all(i),a=String(i.identifier).toUpperCase(),u=Ra(a.toLowerCase());let c=0;const f=[],d=e.footnoteCounts.get(a);for(;void 0!==d&&++c<=d;){f.length>0&&f.push({type:"text",value:" "});let e="string"==typeof n?n:n(l,c);"string"==typeof e&&(e={type:"text",value:e}),f.push({type:"element",tagName:"a",properties:{href:"#"+t+"fnref-"+u+(c>1?"-"+c:""),dataFootnoteBackref:"",ariaLabel:"string"==typeof r?r:r(l,c),className:["data-footnote-backref"]},children:Array.isArray(e)?e:[e]})}const p=o[o.length-1];if(p&&"element"===p.type&&"p"===p.tagName){const e=p.children[p.children.length-1];e&&"text"===e.type?e.value+=" ":p.children.push({type:"text",value:" "}),p.children.push(...f)}else o.push(...f);const h={type:"element",tagName:"li",properties:{id:t+"fn-"+u},children:e.wrap(o,!0)};e.patch(i,h),s.push(h)}if(0!==s.length)return{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:o,properties:{...Pa(a),id:"footnote-label"},children:[{type:"text",value:i}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:e.wrap(s,!0)},{type:"text",value:"\n"}]}}(n),o=Array.isArray(r)?{type:"root",children:r}:r||{type:"root",children:[]};return i&&o.children.push({type:"text",value:"\n"},i),o}function is(e,t){return e&&"run"in e?async function(n,r){const i=rs(n,{file:r,...t});await e.run(i,r)}:function(n,r){return rs(n,{file:r,...e||t})}}function os(e){if(e)throw e}var as=i(849);function ss(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}const ls=function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');ps(e);let n,r=0,i=-1,o=e.length;if(void 0===t||0===t.length||t.length>e.length){for(;o--;)if(47===e.codePointAt(o)){if(n){r=o+1;break}}else i<0&&(n=!0,i=o+1);return i<0?"":e.slice(r,i)}if(t===e)return"";let a=-1,s=t.length-1;for(;o--;)if(47===e.codePointAt(o)){if(n){r=o+1;break}}else a<0&&(n=!0,a=o+1),s>-1&&(e.codePointAt(o)===t.codePointAt(s--)?s<0&&(i=o):(s=-1,i=a));return r===i?i=a:i<0&&(i=e.length),e.slice(r,i)},us=function(e){if(ps(e),0===e.length)return".";let t,n=-1,r=e.length;for(;--r;)if(47===e.codePointAt(r)){if(t){n=r;break}}else t||(t=!0);return n<0?47===e.codePointAt(0)?"/":".":1===n&&47===e.codePointAt(0)?"//":e.slice(0,n)},cs=function(e){ps(e);let t,n=e.length,r=-1,i=0,o=-1,a=0;for(;n--;){const s=e.codePointAt(n);if(47!==s)r<0&&(t=!0,r=n+1),46===s?o<0?o=n:1!==a&&(a=1):o>-1&&(a=-1);else if(t){i=n+1;break}}return o<0||r<0||0===a||1===a&&o===r-1&&o===i+1?"":e.slice(o,r)},fs=function(...e){let t,n=-1;for(;++n<e.length;)ps(e[n]),e[n]&&(t=void 0===t?e[n]:t+"/"+e[n]);return void 0===t?".":function(e){ps(e);const t=47===e.codePointAt(0);let n=function(e,t){let n,r,i="",o=0,a=-1,s=0,l=-1;for(;++l<=e.length;){if(l<e.length)n=e.codePointAt(l);else{if(47===n)break;n=47}if(47===n){if(a===l-1||1===s);else if(a!==l-1&&2===s){if(i.length<2||2!==o||46!==i.codePointAt(i.length-1)||46!==i.codePointAt(i.length-2))if(i.length>2){if(r=i.lastIndexOf("/"),r!==i.length-1){r<0?(i="",o=0):(i=i.slice(0,r),o=i.length-1-i.lastIndexOf("/")),a=l,s=0;continue}}else if(i.length>0){i="",o=0,a=l,s=0;continue}t&&(i=i.length>0?i+"/..":"..",o=2)}else i.length>0?i+="/"+e.slice(a+1,l):i=e.slice(a+1,l),o=l-a-1;a=l,s=0}else 46===n&&s>-1?s++:s=-1}return i}(e,!t);return 0!==n.length||t||(n="."),n.length>0&&47===e.codePointAt(e.length-1)&&(n+="/"),t?"/"+n:n}(t)},ds="/";function ps(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const hs=function(){return"/"};function ms(e){return Boolean(null!==e&&"object"==typeof e&&"href"in e&&e.href&&"protocol"in e&&e.protocol&&void 0===e.auth)}const ys=["history","path","basename","stem","extname","dirname"];class vs{constructor(e){let t;t=e?ms(e)?{path:e}:"string"==typeof e||function(e){return Boolean(e&&"object"==typeof e&&"byteLength"in e&&"byteOffset"in e)}(e)?{value:e}:e:{},this.cwd="cwd"in t?"":hs(),this.data={},this.history=[],this.messages=[],this.value,this.map,this.result,this.stored;let n,r=-1;for(;++r<ys.length;){const e=ys[r];e in t&&void 0!==t[e]&&null!==t[e]&&(this[e]="history"===e?[...t[e]]:t[e])}for(n in t)ys.includes(n)||(this[n]=t[n])}get basename(){return"string"==typeof this.path?ls(this.path):void 0}set basename(e){bs(e,"basename"),gs(e,"basename"),this.path=fs(this.dirname||"",e)}get dirname(){return"string"==typeof this.path?us(this.path):void 0}set dirname(e){As(this.basename,"dirname"),this.path=fs(e||"",this.basename)}get extname(){return"string"==typeof this.path?cs(this.path):void 0}set extname(e){if(gs(e,"extname"),As(this.dirname,"extname"),e){if(46!==e.codePointAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=fs(this.dirname,this.stem+(e||""))}get path(){return this.history[this.history.length-1]}set path(e){ms(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!ms(e)){const t=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw t.code="ERR_INVALID_ARG_TYPE",t}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const t=e.pathname;let n=-1;for(;++n<t.length;)if(37===t.codePointAt(n)&&50===t.codePointAt(n+1)){const e=t.codePointAt(n+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(t)}(e)}(e)),bs(e,"path"),this.path!==e&&this.history.push(e)}get stem(){return"string"==typeof this.path?ls(this.path,this.extname):void 0}set stem(e){bs(e,"stem"),gs(e,"stem"),this.path=fs(this.dirname||"",e+(this.extname||""))}fail(e,t,n){const r=this.message(e,t,n);throw r.fatal=!0,r}info(e,t,n){const r=this.message(e,t,n);return r.fatal=void 0,r}message(e,t,n){const r=new hi(e,t,n);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}toString(e){return void 0===this.value?"":"string"==typeof this.value?this.value:new TextDecoder(e||void 0).decode(this.value)}}function gs(e,t){if(e&&e.includes(ds))throw new Error("`"+t+"` cannot be a path: did not expect `"+ds+"`")}function bs(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function As(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}const ks=function(e){const t=this.constructor.prototype,n=t[e],r=function(){return n.apply(r,arguments)};return Object.setPrototypeOf(r,t),r},Es={}.hasOwnProperty;class xs extends ks{constructor(){super("copy"),this.Compiler=void 0,this.Parser=void 0,this.attachers=[],this.compiler=void 0,this.freezeIndex=-1,this.frozen=void 0,this.namespace={},this.parser=void 0,this.transformers=function(){const e=[],t={run:function(...t){let n=-1;const r=t.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function i(o,...a){const s=e[++n];let l=-1;if(o)r(o);else{for(;++l<t.length;)null!==a[l]&&void 0!==a[l]||(a[l]=t[l]);t=a,s?function(e,t){let n;return function(...t){const o=e.length>t.length;let a;o&&t.push(r);try{a=e.apply(this,t)}catch(e){if(o&&n)throw e;return r(e)}o||(a&&a.then&&"function"==typeof a.then?a.then(i,r):a instanceof Error?r(a):i(a))};function r(e,...r){n||(n=!0,t(e,...r))}function i(e){r(null,e)}}(s,i)(...a):r(null,...a)}}(null,...t)},use:function(n){if("function"!=typeof n)throw new TypeError("Expected `middelware` to be a function, not "+n);return e.push(n),t}};return t}()}copy(){const e=new xs;let t=-1;for(;++t<this.attachers.length;){const n=this.attachers[t];e.use(...n)}return e.data(as(!0,{},this.namespace)),e}data(e,t){return"string"==typeof e?2===arguments.length?(_s("data",this.frozen),this.namespace[e]=t,this):Es.call(this.namespace,e)&&this.namespace[e]||void 0:e?(_s("data",this.frozen),this.namespace=e,this):this.namespace}freeze(){if(this.frozen)return this;const e=this;for(;++this.freezeIndex<this.attachers.length;){const[t,...n]=this.attachers[this.freezeIndex];if(!1===n[0])continue;!0===n[0]&&(n[0]=void 0);const r=t.call(e,...n);"function"==typeof r&&this.transformers.use(r)}return this.frozen=!0,this.freezeIndex=Number.POSITIVE_INFINITY,this}parse(e){this.freeze();const t=Is(e),n=this.parser||this.Parser;return Cs("parse",n),n(String(t),t)}process(e,t){const n=this;return this.freeze(),Cs("process",this.parser||this.Parser),Ss("process",this.compiler||this.Compiler),t?r(void 0,t):new Promise(r);function r(r,i){const o=Is(e),a=n.parse(o);function s(e,n){e||!n?i(e):r?r(n):t(void 0,n)}n.run(a,o,(function(e,t,r){if(e||!t||!r)return s(e);const i=t,o=n.stringify(i,r);var a;"string"==typeof(a=o)||function(e){return Boolean(e&&"object"==typeof e&&"byteLength"in e&&"byteOffset"in e)}(a)?r.value=o:r.result=o,s(e,r)}))}}processSync(e){let t,n=!1;return this.freeze(),Cs("processSync",this.parser||this.Parser),Ss("processSync",this.compiler||this.Compiler),this.process(e,(function(e,r){n=!0,os(e),t=r})),Os("processSync","process",n),t}run(e,t,n){Ts(e),this.freeze();const r=this.transformers;return n||"function"!=typeof t||(n=t,t=void 0),n?i(void 0,n):new Promise(i);function i(i,o){const a=Is(t);r.run(e,a,(function(t,r,a){const s=r||e;t?o(t):i?i(s):n(void 0,s,a)}))}}runSync(e,t){let n,r=!1;return this.run(e,t,(function(e,t){os(e),n=t,r=!0})),Os("runSync","run",r),n}stringify(e,t){this.freeze();const n=Is(t),r=this.compiler||this.Compiler;return Ss("stringify",r),Ts(e),r(e,n)}use(e,...t){const n=this.attachers,r=this.namespace;if(_s("use",this.frozen),null==e);else if("function"==typeof e)s(e,t);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?a(e):o(e)}return this;function i(e){if("function"==typeof e)s(e,[]);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[t,...n]=e;s(t,n)}else o(e)}}function o(e){if(!("plugins"in e)&&!("settings"in e))throw new Error("Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither");a(e.plugins),e.settings&&(r.settings=as(!0,r.settings,e.settings))}function a(e){let t=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++t<e.length;)i(e[t])}}function s(e,t){let r=-1,i=-1;for(;++r<n.length;)if(n[r][0]===e){i=r;break}if(-1===i)n.push([e,...t]);else if(t.length>0){let[r,...o]=t;const a=n[i][1];ss(a)&&ss(r)&&(r=as(!0,a,r)),n[i]=[e,r,...o]}}}}const ws=(new xs).freeze();function Cs(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `parser`")}function Ss(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `compiler`")}function _s(e,t){if(t)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function Ts(e){if(!ss(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function Os(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}function Is(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new vs(e)}const Ns=[],Ds={allowDangerousHtml:!0},Bs=/^(https?|ircs?|mailto|xmpp)$/i,Ps=[{from:"astPlugins",id:"remove-buggy-html-in-markdown-parser"},{from:"allowDangerousHtml",id:"remove-buggy-html-in-markdown-parser"},{from:"allowNode",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"allowElement"},{from:"allowedTypes",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"allowedElements"},{from:"disallowedTypes",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"disallowedElements"},{from:"escapeHtml",id:"remove-buggy-html-in-markdown-parser"},{from:"includeElementIndex",id:"#remove-includeelementindex"},{from:"includeNodeIndex",id:"change-includenodeindex-to-includeelementindex"},{from:"linkTarget",id:"remove-linktarget"},{from:"plugins",id:"change-plugins-to-remarkplugins",to:"remarkPlugins"},{from:"rawSourcePos",id:"#remove-rawsourcepos"},{from:"renderers",id:"change-renderers-to-components",to:"components"},{from:"source",id:"change-source-to-children",to:"children"},{from:"sourcePos",id:"#remove-sourcepos"},{from:"transformImageUri",id:"#add-urltransform",to:"urlTransform"},{from:"transformLinkUri",id:"#add-urltransform",to:"urlTransform"}];function Rs(e){const t=function(e){const t=e.rehypePlugins||Ns,n=e.remarkPlugins||Ns,r=e.remarkRehypeOptions?{...e.remarkRehypeOptions,...Ds}:Ds;return ws().use(Ca).use(n).use(is,r).use(t)}(e),r=function(e){const t=e.children||"",n=new vs;return"string"==typeof t&&(n.value=t),n}(e);return function(e,t){const r=t.allowedElements,i=t.allowElement,o=t.components,a=t.disallowedElements,s=t.skipHtml,l=t.unwrapDisallowed,u=t.urlTransform||Fs;for(const e of Ps)Object.hasOwn(t,e.from)&&(e.from,e.to&&e.to,e.id);return t.className&&(e={type:"element",tagName:"div",properties:{className:t.className},children:"root"===e.type?e.children:[e]}),Ua(e,(function(e,t,n){if("raw"===e.type&&n&&"number"==typeof t)return s?n.children.splice(t,1):n.children[t]={type:"text",value:e.value},t;if("element"===e.type){let t;for(t in Ii)if(Object.hasOwn(Ii,t)&&Object.hasOwn(e.properties,t)){const n=e.properties[t],r=Ii[t];(null===r||r.includes(e.tagName))&&(e.properties[t]=u(String(n||""),t,e))}}if("element"===e.type){let o=r?!r.includes(e.tagName):!!a&&a.includes(e.tagName);if(!o&&i&&"number"==typeof t&&(o=!i(e,t,n)),o&&n&&"number"==typeof t)return l&&e.children?n.children.splice(t,1,...e.children):n.children.splice(t,1),t}})),function(e,t){if(!t||void 0===t.Fragment)throw new TypeError("Expected `Fragment` in options");const n=t.filePath||void 0;let r;if(t.development){if("function"!=typeof t.jsxDEV)throw new TypeError("Expected `jsxDEV` in options when `development: true`");r=function(e,t){return function(n,r,i,o){const a=Array.isArray(i.children),s=li(n);return t(r,i,o,a,{columnNumber:s?s.column-1:void 0,fileName:e,lineNumber:s?s.line:void 0},void 0)}}(n,t.jsxDEV)}else{if("function"!=typeof t.jsx)throw new TypeError("Expected `jsx` in production options");if("function"!=typeof t.jsxs)throw new TypeError("Expected `jsxs` in production options");i=t.jsx,o=t.jsxs,r=function(e,t,n,r){const a=Array.isArray(n.children)?o:i;return r?a(t,n,r):a(t,n)}}var i,o;const a={Fragment:t.Fragment,ancestors:[],components:t.components||{},create:r,elementAttributeNameCase:t.elementAttributeNameCase||"react",evaluater:t.createEvaluater?t.createEvaluater():void 0,filePath:n,ignoreInvalidStyle:t.ignoreInvalidStyle||!1,passKeys:!1!==t.passKeys,passNode:t.passNode||!1,schema:"svg"===t.space?Zr:Jr,stylePropertyNameCase:t.stylePropertyNameCase||"dom",tableCellAlignToStyle:!1!==t.tableCellAlignToStyle},s=ki(a,e,void 0);return s&&"string"!=typeof s?s:a.create(e,a.Fragment,{children:s||void 0},void 0)}(e,{Fragment:n.Fragment,components:o,ignoreInvalidStyle:!0,jsx:n.jsx,jsxs:n.jsxs,passKeys:!0,passNode:!0})}(t.runSync(t.parse(r),r),e)}function Fs(e){const t=e.indexOf(":"),n=e.indexOf("?"),r=e.indexOf("#"),i=e.indexOf("/");return-1===t||-1!==i&&t>i||-1!==n&&t>n||-1!==r&&t>r||Bs.test(e.slice(0,t))?e:""}function Ls(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}const Ms=/\r\n|[\n\r]/g;function zs(e,t){let n=0,r=1;for(const i of e.body.matchAll(Ms)){if("number"==typeof i.index||Ls(!1),i.index>=t)break;n=i.index+i[0].length,r+=1}return{line:r,column:t+1-n}}function js(e,t){const n=e.locationOffset.column-1,r="".padStart(n)+e.body,i=t.line-1,o=e.locationOffset.line-1,a=t.line+o,s=1===t.line?n:0,l=t.column+s,u=`${e.name}:${a}:${l}\n`,c=r.split(/\r\n|[\n\r]/g),f=c[i];if(f.length>120){const e=Math.floor(l/80),t=l%80,n=[];for(let e=0;e<f.length;e+=80)n.push(f.slice(e,e+80));return u+Vs([[`${a} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return u+Vs([[a-1+" |",c[i-1]],[`${a} |`,f],["|","^".padStart(l)],[`${a+1} |`,c[i+1]]])}function Vs(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}class qs extends Error{constructor(e,...t){var n,r,i;const{nodes:o,source:a,positions:s,path:l,originalError:u,extensions:c}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=l?l:void 0,this.originalError=null!=u?u:void 0,this.nodes=Us(Array.isArray(o)?o:o?[o]:void 0);const f=Us(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=a?a:null==f||null===(r=f[0])||void 0===r?void 0:r.source,this.positions=null!=s?s:null==f?void 0:f.map((e=>e.start)),this.locations=s&&a?s.map((e=>zs(a,e))):null==f?void 0:f.map((e=>zs(e.source,e.start)));const d="object"==typeof(p=null==u?void 0:u.extensions)&&null!==p?null==u?void 0:u.extensions:void 0;var p;this.extensions=null!==(i=null!=c?c:d)&&void 0!==i?i:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=u&&u.stack?Object.defineProperty(this,"stack",{value:u.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,qs):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const n of this.nodes)n.loc&&(e+="\n\n"+js((t=n.loc).source,zs(t.source,t.start)));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+js(this.source,t);var t;return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function Us(e){return void 0===e||0===e.length?void 0:e}function Qs(e,t,n){return new qs(`Syntax Error: ${n}`,{source:e,positions:[t]})}var Ws,Hs,Ys;function $s(e){return 9===e||32===e}function Ks(e){return e>=48&&e<=57}function Gs(e){return e>=97&&e<=122||e>=65&&e<=90}function Xs(e){return Gs(e)||95===e}function Js(e){var t;let n=Number.MAX_SAFE_INTEGER,r=null,i=-1;for(let t=0;t<e.length;++t){var o;const a=e[t],s=Zs(a);s!==a.length&&(r=null!==(o=r)&&void 0!==o?o:t,i=t,0!==t&&s<n&&(n=s))}return e.map(((e,t)=>0===t?e:e.slice(n))).slice(null!==(t=r)&&void 0!==t?t:0,i+1)}function Zs(e){let t=0;for(;t<e.length&&$s(e.charCodeAt(t));)++t;return t}!function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(Ws||(Ws={})),(Ys=Hs||(Hs={})).SOF="<SOF>",Ys.EOF="<EOF>",Ys.BANG="!",Ys.DOLLAR="$",Ys.AMP="&",Ys.PAREN_L="(",Ys.PAREN_R=")",Ys.SPREAD="...",Ys.COLON=":",Ys.EQUALS="=",Ys.AT="@",Ys.BRACKET_L="[",Ys.BRACKET_R="]",Ys.BRACE_L="{",Ys.PIPE="|",Ys.BRACE_R="}",Ys.NAME="Name",Ys.INT="Int",Ys.FLOAT="Float",Ys.STRING="String",Ys.BLOCK_STRING="BlockString",Ys.COMMENT="Comment";class el{constructor(e){const t=new Ae(Hs.SOF,0,0,0,0);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let e=this.token;if(e.kind!==Hs.EOF)do{if(e.next)e=e.next;else{const t=sl(this,e.end);e.next=t,t.prev=e,e=t}}while(e.kind===Hs.COMMENT);return e}}function tl(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function nl(e,t){return rl(e.charCodeAt(t))&&il(e.charCodeAt(t+1))}function rl(e){return e>=55296&&e<=56319}function il(e){return e>=56320&&e<=57343}function ol(e,t){const n=e.source.body.codePointAt(t);if(void 0===n)return Hs.EOF;if(n>=32&&n<=126){const e=String.fromCodePoint(n);return'"'===e?"'\"'":`"${e}"`}return"U+"+n.toString(16).toUpperCase().padStart(4,"0")}function al(e,t,n,r,i){const o=e.line,a=1+n-e.lineStart;return new Ae(t,n,r,o,a,i)}function sl(e,t){const n=e.source.body,r=n.length;let i=t;for(;i<r;){const t=n.charCodeAt(i);switch(t){case 65279:case 9:case 32:case 44:++i;continue;case 10:++i,++e.line,e.lineStart=i;continue;case 13:10===n.charCodeAt(i+1)?i+=2:++i,++e.line,e.lineStart=i;continue;case 35:return ll(e,i);case 33:return al(e,Hs.BANG,i,i+1);case 36:return al(e,Hs.DOLLAR,i,i+1);case 38:return al(e,Hs.AMP,i,i+1);case 40:return al(e,Hs.PAREN_L,i,i+1);case 41:return al(e,Hs.PAREN_R,i,i+1);case 46:if(46===n.charCodeAt(i+1)&&46===n.charCodeAt(i+2))return al(e,Hs.SPREAD,i,i+3);break;case 58:return al(e,Hs.COLON,i,i+1);case 61:return al(e,Hs.EQUALS,i,i+1);case 64:return al(e,Hs.AT,i,i+1);case 91:return al(e,Hs.BRACKET_L,i,i+1);case 93:return al(e,Hs.BRACKET_R,i,i+1);case 123:return al(e,Hs.BRACE_L,i,i+1);case 124:return al(e,Hs.PIPE,i,i+1);case 125:return al(e,Hs.BRACE_R,i,i+1);case 34:return 34===n.charCodeAt(i+1)&&34===n.charCodeAt(i+2)?vl(e,i):fl(e,i)}if(Ks(t)||45===t)return ul(e,i,t);if(Xs(t))return gl(e,i);throw Qs(e.source,i,39===t?"Unexpected single quote character ('), did you mean to use a double quote (\")?":tl(t)||nl(n,i)?`Unexpected character: ${ol(e,i)}.`:`Invalid character: ${ol(e,i)}.`)}return al(e,Hs.EOF,r,r)}function ll(e,t){const n=e.source.body,r=n.length;let i=t+1;for(;i<r;){const e=n.charCodeAt(i);if(10===e||13===e)break;if(tl(e))++i;else{if(!nl(n,i))break;i+=2}}return al(e,Hs.COMMENT,t,i,n.slice(t+1,i))}function ul(e,t,n){const r=e.source.body;let i=t,o=n,a=!1;if(45===o&&(o=r.charCodeAt(++i)),48===o){if(o=r.charCodeAt(++i),Ks(o))throw Qs(e.source,i,`Invalid number, unexpected digit after 0: ${ol(e,i)}.`)}else i=cl(e,i,o),o=r.charCodeAt(i);if(46===o&&(a=!0,o=r.charCodeAt(++i),i=cl(e,i,o),o=r.charCodeAt(i)),69!==o&&101!==o||(a=!0,o=r.charCodeAt(++i),43!==o&&45!==o||(o=r.charCodeAt(++i)),i=cl(e,i,o),o=r.charCodeAt(i)),46===o||Xs(o))throw Qs(e.source,i,`Invalid number, expected digit but got: ${ol(e,i)}.`);return al(e,a?Hs.FLOAT:Hs.INT,t,i,r.slice(t,i))}function cl(e,t,n){if(!Ks(n))throw Qs(e.source,t,`Invalid number, expected digit but got: ${ol(e,t)}.`);const r=e.source.body;let i=t+1;for(;Ks(r.charCodeAt(i));)++i;return i}function fl(e,t){const n=e.source.body,r=n.length;let i=t+1,o=i,a="";for(;i<r;){const r=n.charCodeAt(i);if(34===r)return a+=n.slice(o,i),al(e,Hs.STRING,t,i+1,a);if(92!==r){if(10===r||13===r)break;if(tl(r))++i;else{if(!nl(n,i))throw Qs(e.source,i,`Invalid character within String: ${ol(e,i)}.`);i+=2}}else{a+=n.slice(o,i);const t=117===n.charCodeAt(i+1)?123===n.charCodeAt(i+2)?dl(e,i):pl(e,i):yl(e,i);a+=t.value,i+=t.size,o=i}}throw Qs(e.source,i,"Unterminated string.")}function dl(e,t){const n=e.source.body;let r=0,i=3;for(;i<12;){const e=n.charCodeAt(t+i++);if(125===e){if(i<5||!tl(r))break;return{value:String.fromCodePoint(r),size:i}}if(r=r<<4|ml(e),r<0)break}throw Qs(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+i)}".`)}function pl(e,t){const n=e.source.body,r=hl(n,t+2);if(tl(r))return{value:String.fromCodePoint(r),size:6};if(rl(r)&&92===n.charCodeAt(t+6)&&117===n.charCodeAt(t+7)){const e=hl(n,t+8);if(il(e))return{value:String.fromCodePoint(r,e),size:12}}throw Qs(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+6)}".`)}function hl(e,t){return ml(e.charCodeAt(t))<<12|ml(e.charCodeAt(t+1))<<8|ml(e.charCodeAt(t+2))<<4|ml(e.charCodeAt(t+3))}function ml(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function yl(e,t){const n=e.source.body;switch(n.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:"\n",size:2};case 114:return{value:"\r",size:2};case 116:return{value:"\t",size:2}}throw Qs(e.source,t,`Invalid character escape sequence: "${n.slice(t,t+2)}".`)}function vl(e,t){const n=e.source.body,r=n.length;let i=e.lineStart,o=t+3,a=o,s="";const l=[];for(;o<r;){const r=n.charCodeAt(o);if(34===r&&34===n.charCodeAt(o+1)&&34===n.charCodeAt(o+2)){s+=n.slice(a,o),l.push(s);const r=al(e,Hs.BLOCK_STRING,t,o+3,Js(l).join("\n"));return e.line+=l.length-1,e.lineStart=i,r}if(92!==r||34!==n.charCodeAt(o+1)||34!==n.charCodeAt(o+2)||34!==n.charCodeAt(o+3))if(10!==r&&13!==r)if(tl(r))++o;else{if(!nl(n,o))throw Qs(e.source,o,`Invalid character within String: ${ol(e,o)}.`);o+=2}else s+=n.slice(a,o),l.push(s),13===r&&10===n.charCodeAt(o+1)?o+=2:++o,s="",a=o,i=o;else s+=n.slice(a,o),a=o+1,o+=4}throw Qs(e.source,o,"Unterminated string.")}function gl(e,t){const n=e.source.body,r=n.length;let i=t+1;for(;i<r&&(Gs(o=n.charCodeAt(i))||Ks(o)||95===o);)++i;var o;return al(e,Hs.NAME,t,i,n.slice(t,i))}const bl=globalThis.process?function(e,t){return e instanceof t}:function(e,t){if(e instanceof t)return!0;if("object"==typeof e&&null!==e){var n;const r=t.prototype[Symbol.toStringTag];if(r===(Symbol.toStringTag in e?e[Symbol.toStringTag]:null===(n=e.constructor)||void 0===n?void 0:n.name)){const t=ve(e);throw new Error(`Cannot use ${r} "${t}" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`)}}return!1};class Al{constructor(e,t="GraphQL request",n={line:1,column:1}){"string"==typeof e||ye(!1,`Body must be a string. Received: ${ve(e)}.`),this.body=e,this.name=t,this.locationOffset=n,this.locationOffset.line>0||ye(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||ye(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}class kl{constructor(e,t={}){const n=function(e){return bl(e,Al)}(e)?e:new Al(e);this._lexer=new el(n),this._options=t,this._tokenCounter=0}get tokenCount(){return this._tokenCounter}parseName(){const e=this.expectToken(Hs.NAME);return this.node(e,{kind:Ce.NAME,value:e.value})}parseDocument(){return this.node(this._lexer.token,{kind:Ce.DOCUMENT,definitions:this.many(Hs.SOF,this.parseDefinition,Hs.EOF)})}parseDefinition(){if(this.peek(Hs.BRACE_L))return this.parseOperationDefinition();const e=this.peekDescription(),t=e?this._lexer.lookahead():this._lexer.token;if(t.kind===Hs.NAME){switch(t.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(e)throw Qs(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(t.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(t)}parseOperationDefinition(){const e=this._lexer.token;if(this.peek(Hs.BRACE_L))return this.node(e,{kind:Ce.OPERATION_DEFINITION,operation:we.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const t=this.parseOperationType();let n;return this.peek(Hs.NAME)&&(n=this.parseName()),this.node(e,{kind:Ce.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const e=this.expectToken(Hs.NAME);switch(e.value){case"query":return we.QUERY;case"mutation":return we.MUTATION;case"subscription":return we.SUBSCRIPTION}throw this.unexpected(e)}parseVariableDefinitions(){return this.optionalMany(Hs.PAREN_L,this.parseVariableDefinition,Hs.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:Ce.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(Hs.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(Hs.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const e=this._lexer.token;return this.expectToken(Hs.DOLLAR),this.node(e,{kind:Ce.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:Ce.SELECTION_SET,selections:this.many(Hs.BRACE_L,this.parseSelection,Hs.BRACE_R)})}parseSelection(){return this.peek(Hs.SPREAD)?this.parseFragment():this.parseField()}parseField(){const e=this._lexer.token,t=this.parseName();let n,r;return this.expectOptionalToken(Hs.COLON)?(n=t,r=this.parseName()):r=t,this.node(e,{kind:Ce.FIELD,alias:n,name:r,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(Hs.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(e){const t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(Hs.PAREN_L,t,Hs.PAREN_R)}parseArgument(e=!1){const t=this._lexer.token,n=this.parseName();return this.expectToken(Hs.COLON),this.node(t,{kind:Ce.ARGUMENT,name:n,value:this.parseValueLiteral(e)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const e=this._lexer.token;this.expectToken(Hs.SPREAD);const t=this.expectOptionalKeyword("on");return!t&&this.peek(Hs.NAME)?this.node(e,{kind:Ce.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(e,{kind:Ce.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const e=this._lexer.token;return this.expectKeyword("fragment"),!0===this._options.allowLegacyFragmentVariables?this.node(e,{kind:Ce.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(e,{kind:Ce.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()}parseValueLiteral(e){const t=this._lexer.token;switch(t.kind){case Hs.BRACKET_L:return this.parseList(e);case Hs.BRACE_L:return this.parseObject(e);case Hs.INT:return this.advanceLexer(),this.node(t,{kind:Ce.INT,value:t.value});case Hs.FLOAT:return this.advanceLexer(),this.node(t,{kind:Ce.FLOAT,value:t.value});case Hs.STRING:case Hs.BLOCK_STRING:return this.parseStringLiteral();case Hs.NAME:switch(this.advanceLexer(),t.value){case"true":return this.node(t,{kind:Ce.BOOLEAN,value:!0});case"false":return this.node(t,{kind:Ce.BOOLEAN,value:!1});case"null":return this.node(t,{kind:Ce.NULL});default:return this.node(t,{kind:Ce.ENUM,value:t.value})}case Hs.DOLLAR:if(e){if(this.expectToken(Hs.DOLLAR),this._lexer.token.kind===Hs.NAME){const e=this._lexer.token.value;throw Qs(this._lexer.source,t.start,`Unexpected variable "$${e}" in constant value.`)}throw this.unexpected(t)}return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const e=this._lexer.token;return this.advanceLexer(),this.node(e,{kind:Ce.STRING,value:e.value,block:e.kind===Hs.BLOCK_STRING})}parseList(e){return this.node(this._lexer.token,{kind:Ce.LIST,values:this.any(Hs.BRACKET_L,(()=>this.parseValueLiteral(e)),Hs.BRACKET_R)})}parseObject(e){return this.node(this._lexer.token,{kind:Ce.OBJECT,fields:this.any(Hs.BRACE_L,(()=>this.parseObjectField(e)),Hs.BRACE_R)})}parseObjectField(e){const t=this._lexer.token,n=this.parseName();return this.expectToken(Hs.COLON),this.node(t,{kind:Ce.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e)})}parseDirectives(e){const t=[];for(;this.peek(Hs.AT);)t.push(this.parseDirective(e));return t}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(e){const t=this._lexer.token;return this.expectToken(Hs.AT),this.node(t,{kind:Ce.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e)})}parseTypeReference(){const e=this._lexer.token;let t;if(this.expectOptionalToken(Hs.BRACKET_L)){const n=this.parseTypeReference();this.expectToken(Hs.BRACKET_R),t=this.node(e,{kind:Ce.LIST_TYPE,type:n})}else t=this.parseNamedType();return this.expectOptionalToken(Hs.BANG)?this.node(e,{kind:Ce.NON_NULL_TYPE,type:t}):t}parseNamedType(){return this.node(this._lexer.token,{kind:Ce.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(Hs.STRING)||this.peek(Hs.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");const n=this.parseConstDirectives(),r=this.many(Hs.BRACE_L,this.parseOperationTypeDefinition,Hs.BRACE_R);return this.node(e,{kind:Ce.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:r})}parseOperationTypeDefinition(){const e=this._lexer.token,t=this.parseOperationType();this.expectToken(Hs.COLON);const n=this.parseNamedType();return this.node(e,{kind:Ce.OPERATION_TYPE_DEFINITION,operation:t,type:n})}parseScalarTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");const n=this.parseName(),r=this.parseConstDirectives();return this.node(e,{kind:Ce.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:r})}parseObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");const n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:Ce.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(Hs.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(Hs.BRACE_L,this.parseFieldDefinition,Hs.BRACE_R)}parseFieldDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseArgumentDefs();this.expectToken(Hs.COLON);const i=this.parseTypeReference(),o=this.parseConstDirectives();return this.node(e,{kind:Ce.FIELD_DEFINITION,description:t,name:n,arguments:r,type:i,directives:o})}parseArgumentDefs(){return this.optionalMany(Hs.PAREN_L,this.parseInputValueDef,Hs.PAREN_R)}parseInputValueDef(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(Hs.COLON);const r=this.parseTypeReference();let i;this.expectOptionalToken(Hs.EQUALS)&&(i=this.parseConstValueLiteral());const o=this.parseConstDirectives();return this.node(e,{kind:Ce.INPUT_VALUE_DEFINITION,description:t,name:n,type:r,defaultValue:i,directives:o})}parseInterfaceTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");const n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:Ce.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o})}parseUnionTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseUnionMemberTypes();return this.node(e,{kind:Ce.UNION_TYPE_DEFINITION,description:t,name:n,directives:r,types:i})}parseUnionMemberTypes(){return this.expectOptionalToken(Hs.EQUALS)?this.delimitedMany(Hs.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();return this.node(e,{kind:Ce.ENUM_TYPE_DEFINITION,description:t,name:n,directives:r,values:i})}parseEnumValuesDefinition(){return this.optionalMany(Hs.BRACE_L,this.parseEnumValueDefinition,Hs.BRACE_R)}parseEnumValueDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseEnumValueName(),r=this.parseConstDirectives();return this.node(e,{kind:Ce.ENUM_VALUE_DEFINITION,description:t,name:n,directives:r})}parseEnumValueName(){if("true"===this._lexer.token.value||"false"===this._lexer.token.value||"null"===this._lexer.token.value)throw Qs(this._lexer.source,this._lexer.token.start,`${El(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();return this.node(e,{kind:Ce.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:r,fields:i})}parseInputFieldsDefinition(){return this.optionalMany(Hs.BRACE_L,this.parseInputValueDef,Hs.BRACE_R)}parseTypeSystemExtension(){const e=this._lexer.lookahead();if(e.kind===Hs.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)}parseSchemaExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const t=this.parseConstDirectives(),n=this.optionalMany(Hs.BRACE_L,this.parseOperationTypeDefinition,Hs.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return this.node(e,{kind:Ce.SCHEMA_EXTENSION,directives:t,operationTypes:n})}parseScalarTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const t=this.parseName(),n=this.parseConstDirectives();if(0===n.length)throw this.unexpected();return this.node(e,{kind:Ce.SCALAR_TYPE_EXTENSION,name:t,directives:n})}parseObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:Ce.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}parseInterfaceTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:Ce.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}parseUnionTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseUnionMemberTypes();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:Ce.UNION_TYPE_EXTENSION,name:t,directives:n,types:r})}parseEnumTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseEnumValuesDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:Ce.ENUM_TYPE_EXTENSION,name:t,directives:n,values:r})}parseInputObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseInputFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:Ce.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:r})}parseDirectiveDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(Hs.AT);const n=this.parseName(),r=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const o=this.parseDirectiveLocations();return this.node(e,{kind:Ce.DIRECTIVE_DEFINITION,description:t,name:n,arguments:r,repeatable:i,locations:o})}parseDirectiveLocations(){return this.delimitedMany(Hs.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const e=this._lexer.token,t=this.parseName();if(Object.prototype.hasOwnProperty.call(Ws,t.value))return t;throw this.unexpected(e)}node(e,t){return!0!==this._options.noLocation&&(t.loc=new be(e,this._lexer.lastToken,this._lexer.source)),t}peek(e){return this._lexer.token.kind===e}expectToken(e){const t=this._lexer.token;if(t.kind===e)return this.advanceLexer(),t;throw Qs(this._lexer.source,t.start,`Expected ${xl(e)}, found ${El(t)}.`)}expectOptionalToken(e){return this._lexer.token.kind===e&&(this.advanceLexer(),!0)}expectKeyword(e){const t=this._lexer.token;if(t.kind!==Hs.NAME||t.value!==e)throw Qs(this._lexer.source,t.start,`Expected "${e}", found ${El(t)}.`);this.advanceLexer()}expectOptionalKeyword(e){const t=this._lexer.token;return t.kind===Hs.NAME&&t.value===e&&(this.advanceLexer(),!0)}unexpected(e){const t=null!=e?e:this._lexer.token;return Qs(this._lexer.source,t.start,`Unexpected ${El(t)}.`)}any(e,t,n){this.expectToken(e);const r=[];for(;!this.expectOptionalToken(n);)r.push(t.call(this));return r}optionalMany(e,t,n){if(this.expectOptionalToken(e)){const e=[];do{e.push(t.call(this))}while(!this.expectOptionalToken(n));return e}return[]}many(e,t,n){this.expectToken(e);const r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}delimitedMany(e,t){this.expectOptionalToken(e);const n=[];do{n.push(t.call(this))}while(this.expectOptionalToken(e));return n}advanceLexer(){const{maxTokens:e}=this._options,t=this._lexer.advance();if(t.kind!==Hs.EOF&&(++this._tokenCounter,void 0!==e&&this._tokenCounter>e))throw Qs(this._lexer.source,t.start,`Document contains more that ${e} tokens. Parsing aborted.`)}}function El(e){const t=e.value;return xl(e.kind)+(null!=t?` "${t}"`:"")}function xl(e){return function(e){return e===Hs.BANG||e===Hs.DOLLAR||e===Hs.AMP||e===Hs.PAREN_L||e===Hs.PAREN_R||e===Hs.SPREAD||e===Hs.COLON||e===Hs.EQUALS||e===Hs.AT||e===Hs.BRACKET_L||e===Hs.BRACKET_R||e===Hs.BRACE_L||e===Hs.PIPE||e===Hs.BRACE_R}(e)?`"${e}"`:e}var wl=new Map,Cl=new Map,Sl=!0,_l=!1;function Tl(e){return e.replace(/[\s,]+/g," ").trim()}function Ol(e){var t,n,r,i=Tl(e);if(!wl.has(i)){var o=function(e,t){const n=new kl(e,t),r=n.parseDocument();return Object.defineProperty(r,"tokenCount",{enumerable:!1,value:n.tokenCount}),r}(e,{experimentalFragmentVariables:_l,allowLegacyFragmentVariables:_l});if(!o||"Document"!==o.kind)throw new Error("Not a valid GraphQL document.");wl.set(i,function(e){var t=new Set(e.definitions);t.forEach((function(e){e.loc&&delete e.loc,Object.keys(e).forEach((function(n){var r=e[n];r&&"object"==typeof r&&t.add(r)}))}));var n=e.loc;return n&&(delete n.startToken,delete n.endToken),e}((t=o,n=new Set,r=[],t.definitions.forEach((function(e){if("FragmentDefinition"===e.kind){var t=e.name.value,i=Tl((a=e.loc).source.body.substring(a.start,a.end)),o=Cl.get(t);o&&!o.has(i)?Sl&&console.warn("Warning: fragment with name "+t+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"):o||Cl.set(t,o=new Set),o.add(i),n.has(i)||(n.add(i),r.push(e))}else r.push(e);var a})),l(l({},t),{definitions:r}))))}return wl.get(i)}function Il(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"string"==typeof e&&(e=[e]);var r=e[0];return t.forEach((function(t,n){t&&"Document"===t.kind?r+=t.loc.source.body:r+=t,r+=e[n+1]})),Ol(r)}var Nl,Dl=Il;(Nl=Il||(Il={})).gql=Dl,Nl.resetCaches=function(){wl.clear(),Cl.clear()},Nl.disableFragmentWarnings=function(){Sl=!1},Nl.enableExperimentalFragmentVariables=function(){_l=!0},Nl.disableExperimentalFragmentVariables=function(){_l=!1},Il.default=Il;var Bl,Pl,Rl,Fl=Il(Bl||(Pl=["\n  query AskOpenAI($prompt: String!, $model: String) {\n    askOpenAI(prompt: $prompt, model: $model) {\n      text\n      usage {\n        promptTokens\n        completionTokens\n        totalTokens\n      }\n      metadata {\n        model\n        finishReason\n      }\n    }\n  }\n"],Rl=["\n  query AskOpenAI($prompt: String!, $model: String) {\n    askOpenAI(prompt: $prompt, model: $model) {\n      text\n      usage {\n        promptTokens\n        completionTokens\n        totalTokens\n      }\n      metadata {\n        model\n        finishReason\n      }\n    }\n  }\n"],Object.defineProperty?Object.defineProperty(Pl,"raw",{value:Rl}):Pl.raw=Rl,Bl=Pl)),Ll=i(72),Ml=i.n(Ll),zl=i(825),jl=i.n(zl),Vl=i(659),ql=i.n(Vl),Ul=i(56),Ql=i.n(Ul),Wl=i(159),Hl=i.n(Wl),Yl=i(113),$l=i.n(Yl),Kl=i(581),Gl={};Gl.styleTagTransform=$l(),Gl.setAttributes=Ql(),Gl.insert=ql().bind(null,"head"),Gl.domAPI=jl(),Gl.insertStyleElement=Hl(),Ml()(Kl.A,Gl),Kl.A&&Kl.A.locals&&Kl.A.locals;var Xl=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};function Jl(e,t){return t?t(e):Gt.of()}function Zl(e){return"function"==typeof e?new tu(e):e}function eu(e){return e.request.length<=1}var tu=function(){function e(e){e&&(this.request=e)}return e.empty=function(){return new e((function(){return Gt.of()}))},e.from=function(t){return 0===t.length?e.empty():t.map(Zl).reduce((function(e,t){return e.concat(t)}))},e.split=function(t,n,r){var i,o=Zl(n),a=Zl(r||new e(Jl));return i=eu(o)&&eu(a)?new e((function(e){return t(e)?o.request(e)||Gt.of():a.request(e)||Gt.of()})):new e((function(e,n){return t(e)?o.request(e,n)||Gt.of():a.request(e,n)||Gt.of()})),Object.assign(i,{left:o,right:a})},e.execute=function(e,t){return e.request(function(e,t){var n=l({},e);return Object.defineProperty(t,"setContext",{enumerable:!1,value:function(e){n=l(l({},n),"function"==typeof e?e(n):e)}}),Object.defineProperty(t,"getContext",{enumerable:!1,value:function(){return l({},n)}}),t}(t.context,function(e){var t={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return t.operationName||(t.operationName="string"!=typeof t.query?At(t.query)||void 0:""),t}(function(e){for(var t=["query","operationName","variables","extensions","context"],n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];if(t.indexOf(i)<0)throw I(46,i)}return e}(t))))||Gt.of()},e.concat=function(t,n){var r=Zl(t);if(eu(r))return!1!==globalThis.__DEV__&&O.warn(38,r),r;var i,o=Zl(n);return i=eu(o)?new e((function(e){return r.request(e,(function(e){return o.request(e)||Gt.of()}))||Gt.of()})):new e((function(e,t){return r.request(e,(function(e){return o.request(e,t)||Gt.of()}))||Gt.of()})),Object.assign(i,{left:r,right:o})},e.prototype.split=function(t,n,r){return this.concat(e.split(t,n,r||new e(Jl)))},e.prototype.concat=function(t){return e.concat(this,t)},e.prototype.request=function(e,t){throw I(39)},e.prototype.onError=function(e,t){if(t&&t.error)return t.error(e),!1;throw e},e.prototype.setOnError=function(e){return this.onError=e,this},e}(),nu=function(e,t){var n;try{n=JSON.stringify(e)}catch(e){var r=I(42,t,e.message);throw r.parseError=e,r}return n};function ru(e){var t={next:function(){return e.read()}};return V&&(t[Symbol.asyncIterator]=function(){return this}),t}function iu(e){var t,n,r,i,o=e;if(e.body&&(o=e.body),i=o,V&&i[Symbol.asyncIterator])return function(e){var t,n=e[Symbol.asyncIterator]();return(t={next:function(){return n.next()}})[Symbol.asyncIterator]=function(){return this},t}(o);if(function(e){return!!e.getReader}(o))return ru(o.getReader());if(function(e){return!!e.stream}(o))return ru(o.stream().getReader());if(function(e){return!!e.arrayBuffer}(o))return t=o.arrayBuffer(),n=!1,r={next:function(){return n?Promise.resolve({value:void 0,done:!0}):(n=!0,new Promise((function(e,n){t.then((function(t){e({value:t,done:!1})})).catch(n)})))}},V&&(r[Symbol.asyncIterator]=function(){return this}),r;if(function(e){return!!e.pipe}(o))return function(e){var t=null,n=null,r=!1,i=[],o=[];function a(e){if(!n){if(o.length){var t=o.shift();if(Array.isArray(t)&&t[0])return t[0]({value:e,done:!1})}i.push(e)}}function s(e){n=e,o.slice().forEach((function(t){t[1](e)})),!t||t()}function l(){r=!0,o.slice().forEach((function(e){e[0]({value:void 0,done:!0})})),!t||t()}t=function(){t=null,e.removeListener("data",a),e.removeListener("error",s),e.removeListener("end",l),e.removeListener("finish",l),e.removeListener("close",l)},e.on("data",a),e.on("error",s),e.on("end",l),e.on("finish",l),e.on("close",l);var u={next:function(){return new Promise((function(e,t){return n?t(n):i.length?e({value:i.shift(),done:!1}):r?e({value:void 0,done:!0}):void o.push([e,t])}))}};return V&&(u[Symbol.asyncIterator]=function(){return this}),u}(o);throw new Error("Unknown body type for responseIterator. Please pass a streamable response.")}var ou=function(e,t,n){var r=new Error(n);throw r.name="ServerError",r.response=e,r.statusCode=e.status,r.result=t,r},au=Object.prototype.hasOwnProperty;function su(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return lu(e)}function lu(e){var t=e[0]||{},n=e.length;if(n>1)for(var r=new cu,i=1;i<n;++i)t=r.merge(t,e[i]);return t}var uu=function(e,t,n){return this.merge(e[n],t[n])},cu=function(){function e(e){void 0===e&&(e=uu),this.reconciler=e,this.isObject=ue,this.pastCopies=new Set}return e.prototype.merge=function(e,t){for(var n=this,r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];return ue(t)&&ue(e)?(Object.keys(t).forEach((function(i){if(au.call(e,i)){var o=e[i];if(t[i]!==o){var a=n.reconciler.apply(n,d([e,t,i],r,!1));a!==o&&((e=n.shallowCopyForMerge(e))[i]=a)}}else(e=n.shallowCopyForMerge(e))[i]=t[i]})),e):t},e.prototype.shallowCopyForMerge=function(e){return ue(e)&&(this.pastCopies.has(e)||(e=Array.isArray(e)?e.slice(0):l({__proto__:Object.getPrototypeOf(e)},e),this.pastCopies.add(e))),e},e}();function fu(e){return"incremental"in e}function du(e){return ue(e)&&"payload"in e}function pu(e,t){var n=e,r=new cu;return fu(t)&&or(t.incremental)&&t.incremental.forEach((function(e){for(var t=e.data,i=e.path,o=i.length-1;o>=0;--o){var a=i[o],s=isNaN(+a)?{}:[];s[a]=t,t=s}n=r.merge(n,t)})),n}var hu=Object.prototype.hasOwnProperty;function mu(e){var t={};return e.split("\n").forEach((function(e){var n=e.indexOf(":");if(n>-1){var r=e.slice(0,n).trim().toLowerCase(),i=e.slice(n+1).trim();t[r]=i}})),t}function yu(e,t){e.status>=300&&ou(e,function(){try{return JSON.parse(t)}catch(e){return t}}(),"Response not successful: Received status code ".concat(e.status));try{return JSON.parse(t)}catch(r){var n=r;throw n.name="ServerParseError",n.response=e,n.statusCode=e.status,n.bodyText=t,n}}const vu=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function gu(e){return bu[e.charCodeAt(0)]}const bu=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"],Au={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>ku(e.definitions,"\n\n")},OperationDefinition:{leave(e){const t=xu("(",ku(e.variableDefinitions,", "),")"),n=ku([e.operation,ku([e.name,t]),ku(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:r})=>e+": "+t+xu(" = ",n)+xu(" ",ku(r," "))},SelectionSet:{leave:({selections:e})=>Eu(e)},Field:{leave({alias:e,name:t,arguments:n,directives:r,selectionSet:i}){const o=xu("",e,": ")+t;let a=o+xu("(",ku(n,", "),")");return a.length>80&&(a=o+xu("(\n",wu(ku(n,"\n")),"\n)")),ku([a,ku(r," "),i]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+xu(" ",ku(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>ku(["...",xu("on ",e),ku(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:r,selectionSet:i})=>`fragment ${e}${xu("(",ku(n,", "),")")} on ${t} ${xu("",ku(r," ")," ")}`+i},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?function(e){const t=e.replace(/"""/g,'\\"""'),n=t.split(/\r\n|[\n\r]/g),r=1===n.length,i=n.length>1&&n.slice(1).every((e=>0===e.length||$s(e.charCodeAt(0)))),o=t.endsWith('\\"""'),a=e.endsWith('"')&&!o,s=e.endsWith("\\"),l=a||s,u=!r||e.length>70||l||i||o;let c="";const f=r&&$s(e.charCodeAt(0));return(u&&!f||i)&&(c+="\n"),c+=t,(u||l)&&(c+="\n"),'"""'+c+'"""'}(e):`"${e.replace(vu,gu)}"`},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+ku(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+ku(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+xu("(",ku(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>xu("",e,"\n")+ku(["schema",ku(t," "),Eu(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>xu("",e,"\n")+ku(["scalar",t,ku(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:r,fields:i})=>xu("",e,"\n")+ku(["type",t,xu("implements ",ku(n," & ")),ku(r," "),Eu(i)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:r,directives:i})=>xu("",e,"\n")+t+(Cu(n)?xu("(\n",wu(ku(n,"\n")),"\n)"):xu("(",ku(n,", "),")"))+": "+r+xu(" ",ku(i," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:r,directives:i})=>xu("",e,"\n")+ku([t+": "+n,xu("= ",r),ku(i," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:r,fields:i})=>xu("",e,"\n")+ku(["interface",t,xu("implements ",ku(n," & ")),ku(r," "),Eu(i)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:r})=>xu("",e,"\n")+ku(["union",t,ku(n," "),xu("= ",ku(r," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:r})=>xu("",e,"\n")+ku(["enum",t,ku(n," "),Eu(r)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>xu("",e,"\n")+ku([t,ku(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:r})=>xu("",e,"\n")+ku(["input",t,ku(n," "),Eu(r)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:r,locations:i})=>xu("",e,"\n")+"directive @"+t+(Cu(n)?xu("(\n",wu(ku(n,"\n")),"\n)"):xu("(",ku(n,", "),")"))+(r?" repeatable":"")+" on "+ku(i," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>ku(["extend schema",ku(e," "),Eu(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>ku(["extend scalar",e,ku(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:r})=>ku(["extend type",e,xu("implements ",ku(t," & ")),ku(n," "),Eu(r)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:r})=>ku(["extend interface",e,xu("implements ",ku(t," & ")),ku(n," "),Eu(r)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>ku(["extend union",e,ku(t," "),xu("= ",ku(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>ku(["extend enum",e,ku(t," "),Eu(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>ku(["extend input",e,ku(t," "),Eu(n)]," ")}};function ku(e,t=""){var n;return null!==(n=null==e?void 0:e.filter((e=>e)).join(t))&&void 0!==n?n:""}function Eu(e){return xu("{\n",wu(ku(e,"\n")),"\n}")}function xu(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function wu(e){return xu("  ",e.replace(/\n/g,"\n  "))}function Cu(e){var t;return null!==(t=null==e?void 0:e.some((e=>e.includes("\n"))))&&void 0!==t&&t}var Su,_u=Object.assign((function(e){var t=Su.get(e);return t||(t=function(e){return Te(e,Au)}(e),Su.set(e,t)),t}),{reset:function(){Su=new Ue(He.print||2e3)}});_u.reset(),!1!==globalThis.__DEV__&&$e("print",(function(){return Su?Su.size:0}));var Tu={http:{includeQuery:!0,includeExtensions:!1,preserveHeaderCase:!1},headers:{accept:"*/*","content-type":"application/json"},options:{method:"POST"}},Ou=function(e,t){return t(e)};function Iu(e){return new Gt((function(t){t.error(e)}))}var Nu={kind:Ce.FIELD,name:{kind:Ce.NAME,value:"__typename"}};function Du(e,t){return!e||e.selectionSet.selections.every((function(e){return e.kind===Ce.FRAGMENT_SPREAD&&Du(t[e.name.value],t)}))}function Bu(e){return Du(bt(e)||xt(e),Ne(kt(e)))?null:e}function Pu(e){var t=new Map;return function(n){void 0===n&&(n=e);var r=t.get(n);return r||t.set(n,r={variables:new Set,fragmentSpreads:new Set}),r}}function Ru(e,t){gt(t);for(var n=Pu(""),r=Pu(""),i=function(e){for(var t=0,i=void 0;t<e.length&&(i=e[t]);++t)if(!ir(i)){if(i.kind===Ce.OPERATION_DEFINITION)return n(i.name&&i.name.value);if(i.kind===Ce.FRAGMENT_DEFINITION)return r(i.name.value)}return!1!==globalThis.__DEV__&&O.error(97),null},o=0,a=t.definitions.length-1;a>=0;--a)t.definitions[a].kind===Ce.OPERATION_DEFINITION&&++o;var s,u,c,f=(s=e,u=new Map,c=new Map,s.forEach((function(e){e&&(e.name?u.set(e.name,e):e.test&&c.set(e.test,e))})),function(e){var t=u.get(e.name.value);return!t&&c.size&&c.forEach((function(n,r){r(e)&&(t=n)})),t}),d=function(e){return or(e)&&e.map(f).some((function(e){return e&&e.remove}))},p=new Map,h=!1,m={enter:function(e){if(d(e.directives))return h=!0,null}},y=Te(t,{Field:m,InlineFragment:m,VariableDefinition:{enter:function(){return!1}},Variable:{enter:function(e,t,n,r,o){var a=i(o);a&&a.variables.add(e.name.value)}},FragmentSpread:{enter:function(e,t,n,r,o){if(d(e.directives))return h=!0,null;var a=i(o);a&&a.fragmentSpreads.add(e.name.value)}},FragmentDefinition:{enter:function(e,t,n,r){p.set(JSON.stringify(r),e)},leave:function(e,t,n,i){return e===p.get(JSON.stringify(i))?e:o>0&&e.selectionSet.selections.every((function(e){return e.kind===Ce.FIELD&&"__typename"===e.name.value}))?(r(e.name.value).removed=!0,h=!0,null):void 0}},Directive:{leave:function(e){if(f(e))return h=!0,null}}});if(!h)return t;var v=function(e){return e.transitiveVars||(e.transitiveVars=new Set(e.variables),e.removed||e.fragmentSpreads.forEach((function(t){v(r(t)).transitiveVars.forEach((function(t){e.transitiveVars.add(t)}))}))),e},g=new Set;y.definitions.forEach((function(e){e.kind===Ce.OPERATION_DEFINITION?v(n(e.name&&e.name.value)).fragmentSpreads.forEach((function(e){g.add(e)})):e.kind!==Ce.FRAGMENT_DEFINITION||0!==o||r(e.name.value).removed||g.add(e.name.value)})),g.forEach((function(e){v(r(e)).fragmentSpreads.forEach((function(e){g.add(e)}))}));var b={enter:function(e){if(t=e.name.value,!g.has(t)||r(t).removed)return null;var t}};return Bu(Te(y,{FragmentSpread:b,FragmentDefinition:b,OperationDefinition:{leave:function(e){if(e.variableDefinitions){var t=v(n(e.name&&e.name.value)).transitiveVars;if(t.size<e.variableDefinitions.length)return l(l({},e),{variableDefinitions:e.variableDefinitions.filter((function(e){return t.has(e.variable.name.value)}))})}}}}))}var Fu=Object.assign((function(e){return Te(e,{SelectionSet:{enter:function(e,t,n){if(!n||n.kind!==Ce.OPERATION_DEFINITION){var r=e.selections;if(r&&!r.some((function(e){return vt(e)&&("__typename"===e.name.value||0===e.name.value.lastIndexOf("__",0))}))){var i=n;if(!(vt(i)&&i.directives&&i.directives.some((function(e){return"export"===e.name.value}))))return l(l({},e),{selections:d(d([],r,!0),[Nu],!1)})}}}}})}),{added:function(e){return e===Nu}});function Lu(e){return"query"===wt(e).operation?e:Te(e,{OperationDefinition:{enter:function(e){return l(l({},e),{operation:"query"})}}})}function Mu(e){return gt(e),Ru([{test:function(e){return"client"===e.name.value},remove:!0}],e)}function zu(e){return gt(e),Te(e,{FragmentSpread:function(e){var t;if(!(null===(t=e.directives)||void 0===t?void 0:t.some((function(e){return"unmask"===e.name.value}))))return l(l({},e),{directives:d(d([],e.directives||[],!0),[{kind:Ce.DIRECTIVE,name:{kind:Ce.NAME,value:"nonreactive"}}],!1)})}})}var ju=x((function(){return fetch})),Vu=function(e){void 0===e&&(e={});var t=e.uri,n=void 0===t?"/graphql":t,r=e.fetch,i=e.print,o=void 0===i?Ou:i,a=e.includeExtensions,s=e.preserveHeaderCase,d=e.useGETForQueries,p=e.includeUnusedVariables,h=void 0!==p&&p,m=u(e,["uri","fetch","print","includeExtensions","preserveHeaderCase","useGETForQueries","includeUnusedVariables"]);!1!==globalThis.__DEV__&&function(e){if(!e&&"undefined"==typeof fetch)throw I(40)}(r||ju);var y={http:{includeExtensions:a,preserveHeaderCase:s},options:m.fetchOptions,credentials:m.credentials,headers:m.headers};return new tu((function(e){var t=function(e,t){return e.getContext().uri||("function"==typeof t?t(e):t||"/graphql")}(e,n),i=e.getContext(),a={};if(i.clientAwareness){var s=i.clientAwareness,u=s.name,p=s.version;u&&(a["apollographql-client-name"]=u),p&&(a["apollographql-client-version"]=p)}var m=l(l({},a),i.headers),v={http:i.http,options:i.fetchOptions,credentials:i.credentials,headers:m};if(Zt(["client"],e.query)){var g=Mu(e.query);if(!g)return Iu(new Error("HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`."));e.query=g}var b,A,k,E,w,C=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={},o={};n.forEach((function(e){i=l(l(l({},i),e.options),{headers:l(l({},i.headers),e.headers)}),e.credentials&&(i.credentials=e.credentials),o=l(l({},o),e.http)})),i.headers&&(i.headers=function(e,t){if(!t){var n={};return Object.keys(Object(e)).forEach((function(t){n[t.toLowerCase()]=e[t]})),n}var r={};Object.keys(Object(e)).forEach((function(t){r[t.toLowerCase()]={originalName:t,value:e[t]}}));var i={};return Object.keys(r).forEach((function(e){i[r[e].originalName]=r[e].value})),i}(i.headers,o.preserveHeaderCase));var a=e.operationName,s=e.extensions,u=e.variables,c=e.query,f={operationName:a,variables:u};return o.includeExtensions&&(f.extensions=s),o.includeQuery&&(f.query=t(c,_u)),{options:i,body:f}}(e,o,Tu,y,v),S=C.options,_=C.body;_.variables&&!h&&(_.variables=(b=_.variables,A=e.query,k=l({},b),E=new Set(Object.keys(b)),Te(A,{Variable:function(e,t,n){n&&"VariableDefinition"!==n.kind&&E.delete(e.name.value)}}),E.forEach((function(e){delete k[e]})),k)),S.signal||"undefined"==typeof AbortController||(w=new AbortController,S.signal=w.signal);var T,I="OperationDefinition"===(T=wt(e.query)).kind&&"subscription"===T.operation,N=Zt(["defer"],e.query);if(d&&!e.query.definitions.some((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation}))&&(S.method="GET"),N||I){S.headers=S.headers||{};var D="multipart/mixed;";I&&N&&!1!==globalThis.__DEV__&&O.warn(41),I?D+="boundary=graphql;subscriptionSpec=1.0,application/json":N&&(D+="deferSpec=20220824,application/json"),S.headers.accept=D}if("GET"===S.method){var B=function(e,t){var n=[],r=function(e,t){n.push("".concat(e,"=").concat(encodeURIComponent(t)))};if("query"in t&&r("query",t.query),t.operationName&&r("operationName",t.operationName),t.variables){var i=void 0;try{i=nu(t.variables,"Variables map")}catch(e){return{parseError:e}}r("variables",i)}if(t.extensions){var o=void 0;try{o=nu(t.extensions,"Extensions map")}catch(e){return{parseError:e}}r("extensions",o)}var a="",s=e,l=e.indexOf("#");-1!==l&&(a=e.substr(l),s=e.substr(0,l));var u=-1===s.indexOf("?")?"?":"&";return{newURI:s+u+n.join("&")+a}}(t,_),P=B.newURI,R=B.parseError;if(R)return Iu(R);t=P}else try{S.body=nu(_,"Payload")}catch(R){return Iu(R)}return new Gt((function(n){var i=r||x((function(){return fetch}))||ju,o=n.next.bind(n);return i(t,S).then((function(t){var n;e.setContext({response:t});var r,i=null===(n=t.headers)||void 0===n?void 0:n.get("content-type");return null!==i&&/^multipart\/mixed/i.test(i)?function(e,t){return c(this,void 0,void 0,(function(){var n,r,i,o,a,s,u,c,d,p,h,m,y,v,g,b,A,k,E,x,w,C,S,_;return f(this,(function(f){switch(f.label){case 0:if(void 0===TextDecoder)throw new Error("TextDecoder must be defined in the environment: please import a polyfill.");n=new TextDecoder("utf-8"),r=null===(_=e.headers)||void 0===_?void 0:_.get("content-type"),i="boundary=",o=(null==r?void 0:r.includes(i))?null==r?void 0:r.substring((null==r?void 0:r.indexOf(i))+9).replace(/['"]/g,"").replace(/\;(.*)/gm,"").trim():"-",a="\r\n--".concat(o),s="",u=iu(e),c=!0,f.label=1;case 1:return c?[4,u.next()]:[3,3];case 2:for(d=f.sent(),p=d.value,h=d.done,m="string"==typeof p?p:n.decode(p),y=s.length-a.length+1,c=!h,v=(s+=m).indexOf(a,y);v>-1;){if(g=void 0,C=[s.slice(0,v),s.slice(v+a.length)],s=C[1],b=(g=C[0]).indexOf("\r\n\r\n"),A=mu(g.slice(0,b)),(k=A["content-type"])&&-1===k.toLowerCase().indexOf("application/json"))throw new Error("Unsupported patch content type: application/json is required.");if(E=g.slice(b))if(x=yu(e,E),Object.keys(x).length>1||"data"in x||"incremental"in x||"errors"in x||"payload"in x)if(du(x)){if(w={},"payload"in x){if(1===Object.keys(x).length&&null===x.payload)return[2];w=l({},x.payload)}"errors"in x&&(w=l(l({},w),{extensions:l(l({},"extensions"in w?w.extensions:null),(S={},S[ce]=x.errors,S))})),t(w)}else t(x);else if(1===Object.keys(x).length&&"hasNext"in x&&!x.hasNext)return[2];v=s.indexOf(a)}return[3,1];case 3:return[2]}}))}))}(t,o):(r=e,function(e){return e.text().then((function(t){return yu(e,t)})).then((function(t){return Array.isArray(t)||hu.call(t,"data")||hu.call(t,"errors")||ou(e,t,"Server response was missing for query '".concat(Array.isArray(r)?r.map((function(e){return e.operationName})):r.operationName,"'.")),t}))})(t).then(o)})).then((function(){w=void 0,n.complete()})).catch((function(e){w=void 0,function(e,t){e.result&&e.result.errors&&e.result.data&&t.next(e.result),t.error(e)}(e,n)})),function(){w&&w.abort()}}))}))},qu=function(e){function t(t){void 0===t&&(t={});var n=e.call(this,Vu(t).request)||this;return n.options=t,n}return s(t,e),t}(tu),Uu=tu.execute;function Qu(e){return e}var Wu=function(){function e(e,t){void 0===t&&(t=Object.create(null)),this.resultCache=z?new WeakSet:new Set,this.transform=e,t.getCacheKey&&(this.getCacheKey=t.getCacheKey),this.cached=!1!==t.cache,this.resetCache()}return e.prototype.getCacheKey=function(e){return[e]},e.identity=function(){return new e(Qu,{cache:!1})},e.split=function(t,n,r){return void 0===r&&(r=e.identity()),Object.assign(new e((function(e){return(t(e)?n:r).transformDocument(e)}),{cache:!1}),{left:n,right:r})},e.prototype.resetCache=function(){var t=this;if(this.cached){var n=new fn(M);this.performWork=Yn(e.prototype.performWork.bind(this),{makeCacheKey:function(e){var r=t.getCacheKey(e);if(r)return O(Array.isArray(r),77),n.lookupArray(r)},max:He["documentTransform.cache"],cache:Me})}},e.prototype.performWork=function(e){return gt(e),this.transform(e)},e.prototype.transformDocument=function(e){if(this.resultCache.has(e))return e;var t=this.performWork(e);return this.resultCache.add(t),t},e.prototype.concat=function(t){var n=this;return Object.assign(new e((function(e){return t.transformDocument(n.transformDocument(e))}),{cache:!1}),{left:this,right:t})},e}();function Hu(e,t,n){return new Gt((function(r){var i={then:function(e){return new Promise((function(t){return t(e())}))}};function o(e,t){return function(n){if(e){var o=function(){return r.closed?0:e(n)};i=i.then(o,o).then((function(e){return r.next(e)}),(function(e){return r.error(e)}))}else r[t](n)}}var a={next:o(t,"next"),error:o(n,"error"),complete:function(){i.then((function(){return r.complete()}))}},s=e.subscribe(a);return function(){return s.unsubscribe()}}))}function Yu(e){return or($u(e))}function $u(e){var t=or(e.errors)?e.errors.slice(0):[];return fu(e)&&or(e.incremental)&&e.incremental.forEach((function(e){e.errors&&t.push.apply(t,e.errors)})),t}function Ku(e){return e&&"function"==typeof e.then}var Gu=function(e){function t(t){var n=e.call(this,(function(e){return n.addObserver(e),function(){return n.removeObserver(e)}}))||this;return n.observers=new Set,n.promise=new Promise((function(e,t){n.resolve=e,n.reject=t})),n.handlers={next:function(e){null!==n.sub&&(n.latest=["next",e],n.notify("next",e),Ot(n.observers,"next",e))},error:function(e){var t=n.sub;null!==t&&(t&&setTimeout((function(){return t.unsubscribe()})),n.sub=null,n.latest=["error",e],n.reject(e),n.notify("error",e),Ot(n.observers,"error",e))},complete:function(){var e=n,t=e.sub,r=e.sources;if(null!==t){var i=(void 0===r?[]:r).shift();i?Ku(i)?i.then((function(e){return n.sub=e.subscribe(n.handlers)}),n.handlers.error):n.sub=i.subscribe(n.handlers):(t&&setTimeout((function(){return t.unsubscribe()})),n.sub=null,n.latest&&"next"===n.latest[0]?n.resolve(n.latest[1]):n.resolve(),n.notify("complete"),Ot(n.observers,"complete"))}}},n.nextResultListeners=new Set,n.cancel=function(e){n.reject(e),n.sources=[],n.handlers.error(e)},n.promise.catch((function(e){})),"function"==typeof t&&(t=[new Gt(t)]),Ku(t)?t.then((function(e){return n.start(e)}),n.handlers.error):n.start(t),n}return s(t,e),t.prototype.start=function(e){void 0===this.sub&&(this.sources=Array.from(e),this.handlers.complete())},t.prototype.deliverLastMessage=function(e){if(this.latest){var t=this.latest[0],n=e[t];n&&n.call(e,this.latest[1]),null===this.sub&&"next"===t&&e.complete&&e.complete()}},t.prototype.addObserver=function(e){this.observers.has(e)||(this.deliverLastMessage(e),this.observers.add(e))},t.prototype.removeObserver=function(e){this.observers.delete(e)&&this.observers.size<1&&this.handlers.complete()},t.prototype.notify=function(e,t){var n=this.nextResultListeners;n.size&&(this.nextResultListeners=new Set,n.forEach((function(n){return n(e,t)})))},t.prototype.beforeNext=function(e){var t=!1;this.nextResultListeners.add((function(n,r){t||(t=!0,e(n,r))}))},t}(Gt);Xt(Gu);var Xu=new(M?WeakMap:Map);function Ju(e,t){var n=e[t];"function"==typeof n&&(e[t]=function(){return Xu.set(e,(Xu.get(e)+1)%1e15),n.apply(this,arguments)})}var Zu=function(){function e(e,t){void 0===t&&(t=e.generateQueryId()),this.queryId=t,this.document=null,this.lastRequestId=1,this.stopped=!1,this.observableQuery=null;var n=this.cache=e.cache;Xu.has(n)||(Xu.set(n,0),Ju(n,"evict"),Ju(n,"modify"),Ju(n,"reset"))}return e.prototype.init=function(e){var t=e.networkStatus||pe.loading;return this.variables&&this.networkStatus!==pe.loading&&!ne(this.variables,e.variables)&&(t=pe.setVariables),ne(e.variables,this.variables)||(this.lastDiff=void 0,this.cancel()),Object.assign(this,{document:e.document,variables:e.variables,networkError:null,graphQLErrors:this.graphQLErrors||[],networkStatus:t}),e.observableQuery&&this.setObservableQuery(e.observableQuery),e.lastRequestId&&(this.lastRequestId=e.lastRequestId),this},e.prototype.resetDiff=function(){this.lastDiff=void 0},e.prototype.getDiff=function(){var e=this.getDiffOptions();if(this.lastDiff&&ne(e,this.lastDiff.options))return this.lastDiff.diff;this.updateWatch(this.variables);var t=this.observableQuery;if(t&&"no-cache"===t.options.fetchPolicy)return{complete:!1};var n=this.cache.diff(e);return this.updateLastDiff(n,e),n},e.prototype.updateLastDiff=function(e,t){this.lastDiff=e?{diff:e,options:t||this.getDiffOptions()}:void 0},e.prototype.getDiffOptions=function(e){var t;return void 0===e&&(e=this.variables),{query:this.document,variables:e,returnPartialData:!0,optimistic:!0,canonizeResults:null===(t=this.observableQuery)||void 0===t?void 0:t.options.canonizeResults}},e.prototype.setDiff=function(e){var t,n,r=this.lastDiff&&this.lastDiff.diff;e&&!e.complete&&(null===(t=this.observableQuery)||void 0===t?void 0:t.getLastError())||(this.updateLastDiff(e),ne(r&&r.result,e&&e.result)||null===(n=this.observableQuery)||void 0===n||n.scheduleNotify())},e.prototype.setObservableQuery=function(e){e!==this.observableQuery&&(this.observableQuery=e,e&&(e.queryInfo=this))},e.prototype.stop=function(){var e;if(!this.stopped){this.stopped=!0,null===(e=this.observableQuery)||void 0===e||e.resetNotifications(),this.cancel();var t=this.observableQuery;t&&t.stopPolling()}},e.prototype.cancel=function(){var e;null===(e=this.cancelWatch)||void 0===e||e.call(this),this.cancelWatch=void 0},e.prototype.updateWatch=function(e){var t=this;void 0===e&&(e=this.variables);var n=this.observableQuery;if(!n||"no-cache"!==n.options.fetchPolicy){var r=l(l({},this.getDiffOptions(e)),{watcher:this,callback:function(e){return t.setDiff(e)}});this.lastWatch&&ne(r,this.lastWatch)||(this.cancel(),this.cancelWatch=this.cache.watch(this.lastWatch=r))}},e.prototype.resetLastWrite=function(){this.lastWrite=void 0},e.prototype.shouldWrite=function(e,t){var n=this.lastWrite;return!(n&&n.dmCount===Xu.get(this.cache)&&ne(t,n.variables)&&ne(e.data,n.result.data))},e.prototype.markResult=function(e,t,n,r){var i,o=this,a=new cu,s=or(e.errors)?e.errors.slice(0):[];if(null===(i=this.observableQuery)||void 0===i||i.resetNotifications(),"incremental"in e&&or(e.incremental)){var l=pu(this.getDiff().result,e);e.data=l}else if("hasNext"in e&&e.hasNext){var u=this.getDiff();e.data=a.merge(u.result,e.data)}this.graphQLErrors=s,"no-cache"===n.fetchPolicy?this.updateLastDiff({result:e.data,complete:!0},this.getDiffOptions(n.variables)):0!==r&&(ec(e,n.errorPolicy)?this.cache.performTransaction((function(i){if(o.shouldWrite(e,n.variables))i.writeQuery({query:t,data:e.data,variables:n.variables,overwrite:1===r}),o.lastWrite={result:e,variables:n.variables,dmCount:Xu.get(o.cache)};else if(o.lastDiff&&o.lastDiff.diff.complete)return void(e.data=o.lastDiff.diff.result);var a=o.getDiffOptions(n.variables),s=i.diff(a);!o.stopped&&ne(o.variables,n.variables)&&o.updateWatch(n.variables),o.updateLastDiff(s,a),s.complete&&(e.data=s.result)})):this.lastWrite=void 0)},e.prototype.markReady=function(){return this.networkError=null,this.networkStatus=pe.ready},e.prototype.markError=function(e){var t;return this.networkStatus=pe.error,this.lastWrite=void 0,null===(t=this.observableQuery)||void 0===t||t.resetNotifications(),e.graphQLErrors&&(this.graphQLErrors=e.graphQLErrors),e.networkError&&(this.networkError=e.networkError),e},e}();function ec(e,t){void 0===t&&(t="none");var n="ignore"===t||"all"===t,r=!Yu(e);return!r&&n&&e.data&&(r=!0),r}var tc=M?WeakMap:Map,nc=z?WeakSet:Set,rc=new gn,ic=!1;function oc(){ic||(ic=!0,!1!==globalThis.__DEV__&&O.warn(52))}function ac(e,t,n){return rc.withValue(!0,(function(){var r=sc(e,t,n,!1);return Object.isFrozen(e)&&ar(r),r}))}function sc(e,t,n,r,i){var o,a=n.knownChanged,s=function(e,t){if(t.has(e))return t.get(e);var n=Array.isArray(e)?[]:Object.create(null);return t.set(e,n),n}(e,n.mutableTargets);if(Array.isArray(e)){for(var l=0,u=Array.from(e.entries());l<u.length;l++){var c=u[l],f=c[0],d=c[1];if(null!==d){var p=sc(d,t,n,r,!1!==globalThis.__DEV__?"".concat(i||"","[").concat(f,"]"):void 0);a.has(p)&&a.add(s),s[f]=p}else s[f]=null}return a.has(s)?s:e}for(var h=0,m=t.selections;h<m.length;h++){var y=m[h],v=void 0;if(r&&a.add(s),y.kind===Ce.FIELD){var g=mt(y),b=y.selectionSet;if(void 0===(v=s[g]||e[g]))continue;b&&null!==v&&(p=sc(e[g],b,n,r,!1!==globalThis.__DEV__?"".concat(i||"",".").concat(g):void 0),a.has(p)&&(v=p)),!1===globalThis.__DEV__&&(s[g]=v),!1!==globalThis.__DEV__&&(r&&"__typename"!==g&&!(null===(o=Object.getOwnPropertyDescriptor(s,g))||void 0===o?void 0:o.value)?Object.defineProperty(s,g,lc(g,v,i||"",n.operationName,n.operationType)):(delete s[g],s[g]=v))}if(y.kind!==Ce.INLINE_FRAGMENT||y.typeCondition&&!n.cache.fragmentMatches(y,e.__typename)||(v=sc(e,y.selectionSet,n,r,i)),y.kind===Ce.FRAGMENT_SPREAD){var A=y.name.value,k=n.fragmentMap[A]||(n.fragmentMap[A]=n.cache.lookupFragment(A));O(k,47,A);var E=tn(y);"mask"!==E&&(v=sc(e,k.selectionSet,n,"migrate"===E,i))}a.has(v)&&a.add(s)}return"__typename"in e&&!("__typename"in s)&&(s.__typename=e.__typename),Object.keys(s).length!==Object.keys(e).length&&a.add(s),a.has(s)?s:e}function lc(e,t,n,r,i){var o=function(){return rc.getValue()||(!1!==globalThis.__DEV__&&O.warn(48,r?"".concat(i," '").concat(r,"'"):"anonymous ".concat(i),"".concat(n,".").concat(e).replace(/^\./,"")),o=function(){return t}),t};return{get:function(){return o()},set:function(e){o=function(){return e}},enumerable:!0,configurable:!0}}function uc(e,t,n,r){if(!n.fragmentMatches)return!1!==globalThis.__DEV__&&oc(),e;var i=t.definitions.filter((function(e){return e.kind===Ce.FRAGMENT_DEFINITION}));void 0===r&&(O(1===i.length,49,i.length),r=i[0].name.value);var o=i.find((function(e){return e.name.value===r}));return O(!!o,50,r),null==e||re(e,{})?e:ac(e,o.selectionSet,{operationType:"fragment",operationName:o.name.value,fragmentMap:Ne(kt(t)),cache:n,mutableTargets:new tc,knownChanged:new nc})}var cc=Object.prototype.hasOwnProperty,fc=Object.create(null),dc=function(){function e(e){var t=this;this.clientAwareness={},this.queries=new Map,this.fetchCancelFns=new Map,this.transformCache=new Ue(He["queryManager.getDocumentInfo"]||2e3),this.queryIdCounter=1,this.requestIdCounter=1,this.mutationIdCounter=1,this.inFlightLinkObservables=new fn(!1),this.noCacheWarningsByQueryId=new Set;var n=new Wu((function(e){return t.cache.transformDocument(e)}),{cache:!1});this.cache=e.cache,this.link=e.link,this.defaultOptions=e.defaultOptions,this.queryDeduplication=e.queryDeduplication,this.clientAwareness=e.clientAwareness,this.localState=e.localState,this.ssrMode=e.ssrMode,this.assumeImmutableResults=e.assumeImmutableResults,this.dataMasking=e.dataMasking;var r=e.documentTransform;this.documentTransform=r?n.concat(r).concat(n):n,this.defaultContext=e.defaultContext||Object.create(null),(this.onBroadcast=e.onBroadcast)&&(this.mutationStore=Object.create(null))}return e.prototype.stop=function(){var e=this;this.queries.forEach((function(t,n){e.stopQueryNoBroadcast(n)})),this.cancelPendingFetches(I(27))},e.prototype.cancelPendingFetches=function(e){this.fetchCancelFns.forEach((function(t){return t(e)})),this.fetchCancelFns.clear()},e.prototype.mutate=function(e){return c(this,arguments,void 0,(function(e){var t,n,r,i,o,a,s,u=e.mutation,c=e.variables,d=e.optimisticResponse,p=e.updateQueries,h=e.refetchQueries,m=void 0===h?[]:h,y=e.awaitRefetchQueries,v=void 0!==y&&y,g=e.update,b=e.onQueryUpdated,A=e.fetchPolicy,k=void 0===A?(null===(a=this.defaultOptions.mutate)||void 0===a?void 0:a.fetchPolicy)||"network-only":A,E=e.errorPolicy,x=void 0===E?(null===(s=this.defaultOptions.mutate)||void 0===s?void 0:s.errorPolicy)||"none":E,w=e.keepRootFields,C=e.context;return f(this,(function(e){switch(e.label){case 0:return O(u,28),O("network-only"===k||"no-cache"===k,29),t=this.generateMutationId(),u=this.cache.transformForLink(this.transform(u)),n=this.getDocumentInfo(u).hasClientExports,c=this.getVariables(u,c),n?[4,this.localState.addExportedVariables(u,c,C)]:[3,2];case 1:c=e.sent(),e.label=2;case 2:return r=this.mutationStore&&(this.mutationStore[t]={mutation:u,variables:c,loading:!0,error:null}),i=d&&this.markMutationOptimistic(d,{mutationId:t,document:u,variables:c,fetchPolicy:k,errorPolicy:x,context:C,updateQueries:p,update:g,keepRootFields:w}),this.broadcastQueries(),o=this,[2,new Promise((function(e,n){return Hu(o.getObservableFromLink(u,l(l({},C),{optimisticResponse:i?d:void 0}),c,{},!1),(function(e){if(Yu(e)&&"none"===x)throw new he({graphQLErrors:$u(e)});r&&(r.loading=!1,r.error=null);var n=l({},e);return"function"==typeof m&&(m=m(n)),"ignore"===x&&Yu(n)&&delete n.errors,o.markMutationResult({mutationId:t,result:n,document:u,variables:c,fetchPolicy:k,errorPolicy:x,context:C,update:g,updateQueries:p,awaitRefetchQueries:v,refetchQueries:m,removeOptimistic:i?t:void 0,onQueryUpdated:b,keepRootFields:w})})).subscribe({next:function(n){o.broadcastQueries(),"hasNext"in n&&!1!==n.hasNext||e(l(l({},n),{data:o.maskOperation({document:u,data:n.data,fetchPolicy:k,id:t})}))},error:function(e){r&&(r.loading=!1,r.error=e),i&&o.cache.removeOptimistic(t),o.broadcastQueries(),n(e instanceof he?e:new he({networkError:e}))}})}))]}}))}))},e.prototype.markMutationResult=function(e,t){var n=this;void 0===t&&(t=this.cache);var r=e.result,i=[],o="no-cache"===e.fetchPolicy;if(!o&&ec(r,e.errorPolicy)){if(fu(r)||i.push({result:r.data,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}),fu(r)&&or(r.incremental)){var a=t.diff({id:"ROOT_MUTATION",query:this.getDocumentInfo(e.document).asQuery,variables:e.variables,optimistic:!1,returnPartialData:!0}),s=void 0;a.result&&(s=pu(a.result,r)),void 0!==s&&(r.data=s,i.push({result:s,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}))}var u=e.updateQueries;u&&this.queries.forEach((function(e,o){var a=e.observableQuery,s=a&&a.queryName;if(s&&cc.call(u,s)){var l=u[s],c=n.queries.get(o),f=c.document,d=c.variables,p=t.diff({query:f,variables:d,returnPartialData:!0,optimistic:!1}),h=p.result;if(p.complete&&h){var m=l(h,{mutationResult:r,queryName:f&&At(f)||void 0,queryVariables:d});m&&i.push({result:m,dataId:"ROOT_QUERY",query:f,variables:d})}}}))}if(i.length>0||(e.refetchQueries||"").length>0||e.update||e.onQueryUpdated||e.removeOptimistic){var c=[];if(this.refetchQueries({updateCache:function(t){o||i.forEach((function(e){return t.write(e)}));var a,s=e.update,u=!(fu(a=r)||function(e){return"hasNext"in e&&"data"in e}(a))||fu(r)&&!r.hasNext;if(s){if(!o){var c=t.diff({id:"ROOT_MUTATION",query:n.getDocumentInfo(e.document).asQuery,variables:e.variables,optimistic:!1,returnPartialData:!0});c.complete&&("incremental"in(r=l(l({},r),{data:c.result}))&&delete r.incremental,"hasNext"in r&&delete r.hasNext)}u&&s(t,r,{context:e.context,variables:e.variables})}o||e.keepRootFields||!u||t.modify({id:"ROOT_MUTATION",fields:function(e,t){var n=t.fieldName,r=t.DELETE;return"__typename"===n?e:r}})},include:e.refetchQueries,optimistic:!1,removeOptimistic:e.removeOptimistic,onQueryUpdated:e.onQueryUpdated||null}).forEach((function(e){return c.push(e)})),e.awaitRefetchQueries||e.onQueryUpdated)return Promise.all(c).then((function(){return r}))}return Promise.resolve(r)},e.prototype.markMutationOptimistic=function(e,t){var n=this,r="function"==typeof e?e(t.variables,{IGNORE:fc}):e;return r!==fc&&(this.cache.recordOptimisticTransaction((function(e){try{n.markMutationResult(l(l({},t),{result:{data:r}}),e)}catch(e){!1!==globalThis.__DEV__&&O.error(e)}}),t.mutationId),!0)},e.prototype.fetchQuery=function(e,t,n){return this.fetchConcastWithInfo(this.getOrCreateQuery(e),t,n).concast.promise},e.prototype.getQueryStore=function(){var e=Object.create(null);return this.queries.forEach((function(t,n){e[n]={variables:t.variables,networkStatus:t.networkStatus,networkError:t.networkError,graphQLErrors:t.graphQLErrors}})),e},e.prototype.resetErrors=function(e){var t=this.queries.get(e);t&&(t.networkError=void 0,t.graphQLErrors=[])},e.prototype.transform=function(e){return this.documentTransform.transformDocument(e)},e.prototype.getDocumentInfo=function(e){var t=this.transformCache;if(!t.has(e)){var n={hasClientExports:en(e),hasForcedResolvers:this.localState.shouldForceResolvers(e),hasNonreactiveDirective:Zt(["nonreactive"],e),nonReactiveQuery:zu(e),clientQuery:this.localState.clientQuery(e),serverQuery:Ru([{name:"client",remove:!0},{name:"connection"},{name:"nonreactive"},{name:"unmask"}],e),defaultVars:Ct(bt(e)),asQuery:l(l({},e),{definitions:e.definitions.map((function(e){return"OperationDefinition"===e.kind&&"query"!==e.operation?l(l({},e),{operation:"query"}):e}))})};t.set(e,n)}return t.get(e)},e.prototype.getVariables=function(e,t){return l(l({},this.getDocumentInfo(e).defaultVars),t)},e.prototype.watchQuery=function(e){var t=this.transform(e.query);void 0===(e=l(l({},e),{variables:this.getVariables(t,e.variables)})).notifyOnNetworkStatusChange&&(e.notifyOnNetworkStatusChange=!1);var n=new Zu(this),r=new Jn({queryManager:this,queryInfo:n,options:e});return r.lastQuery=t,Jn.inactiveOnCreation.getValue()||this.queries.set(r.queryId,n),n.init({document:t,observableQuery:r,variables:r.variables}),r},e.prototype.query=function(e,t){var n=this;void 0===t&&(t=this.generateQueryId()),O(e.query,30),O("Document"===e.query.kind,31),O(!e.returnPartialData,32),O(!e.pollInterval,33);var r=this.transform(e.query);return this.fetchQuery(t,l(l({},e),{query:r})).then((function(i){return i&&l(l({},i),{data:n.maskOperation({document:r,data:i.data,fetchPolicy:e.fetchPolicy,id:t})})})).finally((function(){return n.stopQuery(t)}))},e.prototype.generateQueryId=function(){return String(this.queryIdCounter++)},e.prototype.generateRequestId=function(){return this.requestIdCounter++},e.prototype.generateMutationId=function(){return String(this.mutationIdCounter++)},e.prototype.stopQueryInStore=function(e){this.stopQueryInStoreNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryInStoreNoBroadcast=function(e){var t=this.queries.get(e);t&&t.stop()},e.prototype.clearStore=function(e){return void 0===e&&(e={discardWatches:!0}),this.cancelPendingFetches(I(34)),this.queries.forEach((function(e){e.observableQuery?e.networkStatus=pe.loading:e.stop()})),this.mutationStore&&(this.mutationStore=Object.create(null)),this.cache.reset(e)},e.prototype.getObservableQueries=function(e){var t=this;void 0===e&&(e="active");var n=new Map,r=new Map,i=new Map,o=new Set;return Array.isArray(e)&&e.forEach((function(e){if("string"==typeof e)r.set(e,e),i.set(e,!1);else if(ue(a=e)&&"Document"===a.kind&&Array.isArray(a.definitions)){var n=_u(t.transform(e));r.set(n,At(e)),i.set(n,!1)}else ue(e)&&e.query&&o.add(e);var a})),this.queries.forEach((function(t,r){var o=t.observableQuery,a=t.document;if(o){if("all"===e)return void n.set(r,o);var s=o.queryName;if("standby"===o.options.fetchPolicy||"active"===e&&!o.hasObservers())return;("active"===e||s&&i.has(s)||a&&i.has(_u(a)))&&(n.set(r,o),s&&i.set(s,!0),a&&i.set(_u(a),!0))}})),o.size&&o.forEach((function(e){var r=S("legacyOneTimeQuery"),i=t.getOrCreateQuery(r).init({document:e.query,variables:e.variables}),o=new Jn({queryManager:t,queryInfo:i,options:l(l({},e),{fetchPolicy:"network-only"})});O(o.queryId===r),i.setObservableQuery(o),n.set(r,o)})),!1!==globalThis.__DEV__&&i.size&&i.forEach((function(e,t){if(!e){var n=r.get(t);n?!1!==globalThis.__DEV__&&O.warn(35,n):!1!==globalThis.__DEV__&&O.warn(36)}})),n},e.prototype.reFetchObservableQueries=function(e){var t=this;void 0===e&&(e=!1);var n=[];return this.getObservableQueries(e?"all":"active").forEach((function(r,i){var o=r.options.fetchPolicy;r.resetLastResults(),(e||"standby"!==o&&"cache-only"!==o)&&n.push(r.refetch()),(t.queries.get(i)||r.queryInfo).setDiff(null)})),this.broadcastQueries(),Promise.all(n)},e.prototype.startGraphQLSubscription=function(e){var t=this,n=e.query,r=e.variables,i=e.fetchPolicy,o=e.errorPolicy,a=void 0===o?"none":o,s=e.context,l=void 0===s?{}:s,u=e.extensions,c=void 0===u?{}:u;n=this.transform(n),r=this.getVariables(n,r);var f=function(e){return t.getObservableFromLink(n,l,e,c).map((function(r){"no-cache"!==i&&(ec(r,a)&&t.cache.write({query:n,result:r.data,dataId:"ROOT_SUBSCRIPTION",variables:e}),t.broadcastQueries());var o=Yu(r),s=fe(r);if(o||s){var l={};if(o&&(l.graphQLErrors=r.errors),s&&(l.protocolErrors=r.extensions[ce]),"none"===a||s)throw new he(l)}return"ignore"===a&&delete r.errors,r}))};if(this.getDocumentInfo(n).hasClientExports){var d=this.localState.addExportedVariables(n,r,l).then(f);return new Gt((function(e){var t=null;return d.then((function(n){return t=n.subscribe(e)}),e.error),function(){return t&&t.unsubscribe()}}))}return f(r)},e.prototype.stopQuery=function(e){this.stopQueryNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryNoBroadcast=function(e){this.stopQueryInStoreNoBroadcast(e),this.removeQuery(e)},e.prototype.removeQuery=function(e){var t;this.fetchCancelFns.delete(e),this.queries.has(e)&&(null===(t=this.queries.get(e))||void 0===t||t.stop(),this.queries.delete(e))},e.prototype.broadcastQueries=function(){this.onBroadcast&&this.onBroadcast(),this.queries.forEach((function(e){var t;return null===(t=e.observableQuery)||void 0===t?void 0:t.notify()}))},e.prototype.getLocalState=function(){return this.localState},e.prototype.getObservableFromLink=function(e,t,n,r,i){var o,a,s=this;void 0===i&&(i=null!==(o=null==t?void 0:t.queryDeduplication)&&void 0!==o?o:this.queryDeduplication);var u=this.getDocumentInfo(e),c=u.serverQuery,f=u.clientQuery;if(c){var d=this.inFlightLinkObservables,p=this.link,h={query:c,variables:n,operationName:At(c)||void 0,context:this.prepareContext(l(l({},t),{forceFetch:!i})),extensions:r};if(t=h.context,i){var m=_u(c),y=ot(n),v=d.lookup(m,y);if(!(a=v.observable)){var g=new Gu([Uu(p,h)]);a=v.observable=g,g.beforeNext((function e(t,n){"next"===t&&"hasNext"in n&&n.hasNext?g.beforeNext(e):d.remove(m,y)}))}}else a=new Gu([Uu(p,h)])}else a=new Gu([Gt.of({data:{}})]),t=this.prepareContext(t);return f&&(a=Hu(a,(function(e){return s.localState.runResolvers({document:f,remoteResult:e,context:t,variables:n})}))),a},e.prototype.getResultsFromLink=function(e,t,n){var r=e.lastRequestId=this.generateRequestId(),i=this.cache.transformForLink(n.query);return Hu(this.getObservableFromLink(i,n.context,n.variables),(function(o){var a=$u(o),s=a.length>0,l=n.errorPolicy;if(r>=e.lastRequestId){if(s&&"none"===l)throw e.markError(new he({graphQLErrors:a}));e.markResult(o,i,n,t),e.markReady()}var u={data:o.data,loading:!1,networkStatus:pe.ready};return s&&"none"===l&&(u.data=void 0),s&&"ignore"!==l&&(u.errors=a,u.networkStatus=pe.error),u}),(function(t){var n=de(t)?t:new he({networkError:t});throw r>=e.lastRequestId&&e.markError(n),n}))},e.prototype.fetchConcastWithInfo=function(e,t,n,r){var i=this;void 0===n&&(n=pe.loading),void 0===r&&(r=t.query);var o,a,s=this.getVariables(r,t.variables),l=this.defaultOptions.watchQuery,u=t.fetchPolicy,c=void 0===u?l&&l.fetchPolicy||"cache-first":u,f=t.errorPolicy,d=void 0===f?l&&l.errorPolicy||"none":f,p=t.returnPartialData,h=void 0!==p&&p,m=t.notifyOnNetworkStatusChange,y=void 0!==m&&m,v=t.context,g=void 0===v?{}:v,b=Object.assign({},t,{query:r,variables:s,fetchPolicy:c,errorPolicy:d,returnPartialData:h,notifyOnNetworkStatusChange:y,context:g}),A=function(r){b.variables=r;var o=i.fetchQueryByPolicy(e,b,n);return"standby"!==b.fetchPolicy&&o.sources.length>0&&e.observableQuery&&e.observableQuery.applyNextFetchPolicy("after-fetch",t),o},k=function(){return i.fetchCancelFns.delete(e.queryId)};if(this.fetchCancelFns.set(e.queryId,(function(e){k(),setTimeout((function(){return o.cancel(e)}))})),this.getDocumentInfo(b.query).hasClientExports)o=new Gu(this.localState.addExportedVariables(b.query,b.variables,b.context).then(A).then((function(e){return e.sources}))),a=!0;else{var E=A(b.variables);a=E.fromLink,o=new Gu(E.sources)}return o.promise.then(k,k),{concast:o,fromLink:a}},e.prototype.refetchQueries=function(e){var t=this,n=e.updateCache,r=e.include,i=e.optimistic,o=void 0!==i&&i,a=e.removeOptimistic,s=void 0===a?o?S("refetchQueries"):void 0:a,l=e.onQueryUpdated,u=new Map;r&&this.getObservableQueries(r).forEach((function(e,n){u.set(n,{oq:e,lastDiff:(t.queries.get(n)||e.queryInfo).getDiff()})}));var c=new Map;return n&&this.cache.batch({update:n,optimistic:o&&s||!1,removeOptimistic:s,onWatchUpdated:function(e,t,n){var r=e.watcher instanceof Zu&&e.watcher.observableQuery;if(r){if(l){u.delete(r.queryId);var i=l(r,t,n);return!0===i&&(i=r.refetch()),!1!==i&&c.set(r,i),i}null!==l&&u.set(r.queryId,{oq:r,lastDiff:n,diff:t})}}}),u.size&&u.forEach((function(e,n){var r,i=e.oq,o=e.lastDiff,a=e.diff;l&&(a||(a=t.cache.diff(i.queryInfo.getDiffOptions())),r=l(i,a,o)),l&&!0!==r||(r=i.refetch()),!1!==r&&c.set(i,r),n.indexOf("legacyOneTimeQuery")>=0&&t.stopQueryNoBroadcast(n)})),s&&this.cache.removeOptimistic(s),c},e.prototype.maskOperation=function(e){var t,n,r,i=e.document,o=e.data;if(!1!==globalThis.__DEV__){var a=e.fetchPolicy,s=e.id,l=null===(t=bt(i))||void 0===t?void 0:t.operation,u=(null!==(n=null==l?void 0:l[0])&&void 0!==n?n:"o")+s;!this.dataMasking||"no-cache"!==a||function(e){var t=!0;return Te(e,{FragmentSpread:function(e){if(!(t=!!e.directives&&e.directives.some((function(e){return"unmask"===e.name.value}))))return _e}}),t}(i)||this.noCacheWarningsByQueryId.has(u)||(this.noCacheWarningsByQueryId.add(u),!1!==globalThis.__DEV__&&O.warn(37,null!==(r=At(i))&&void 0!==r?r:"Unnamed ".concat(null!=l?l:"operation")))}return this.dataMasking?function(e,t,n){var r;if(!n.fragmentMatches)return!1!==globalThis.__DEV__&&oc(),e;var i=bt(t);return O(i,51),null==e?e:ac(e,i.selectionSet,{operationType:i.operation,operationName:null===(r=i.name)||void 0===r?void 0:r.value,fragmentMap:Ne(kt(t)),cache:n,mutableTargets:new tc,knownChanged:new nc})}(o,i,this.cache):o},e.prototype.maskFragment=function(e){var t=e.data,n=e.fragment,r=e.fragmentName;return this.dataMasking?uc(t,n,this.cache,r):t},e.prototype.fetchQueryByPolicy=function(e,t,n){var r=this,i=t.query,o=t.variables,a=t.fetchPolicy,s=t.refetchWritePolicy,u=t.errorPolicy,c=t.returnPartialData,f=t.context,d=t.notifyOnNetworkStatusChange,p=e.networkStatus;e.init({document:i,variables:o,networkStatus:n});var h=function(){return e.getDiff()},m=function(t,n){void 0===n&&(n=e.networkStatus||pe.loading);var a=t.result;!1===globalThis.__DEV__||c||ne(a,{})||er(t.missing);var s=function(e){return Gt.of(l({data:e,loading:me(n),networkStatus:n},t.complete?null:{partial:!0}))};return a&&r.getDocumentInfo(i).hasForcedResolvers?r.localState.runResolvers({document:i,remoteResult:{data:a},context:f,variables:o,onlyRunForcedResolvers:!0}).then((function(e){return s(e.data||void 0)})):"none"===u&&n===pe.refetch&&Array.isArray(t.missing)?s(void 0):s(a)},y="no-cache"===a?0:n===pe.refetch&&"merge"!==s?1:2,v=function(){return r.getResultsFromLink(e,y,{query:i,variables:o,context:f,fetchPolicy:a,errorPolicy:u})},g=d&&"number"==typeof p&&p!==n&&me(n);switch(a){default:case"cache-first":return(b=h()).complete?{fromLink:!1,sources:[m(b,e.markReady())]}:c||g?{fromLink:!0,sources:[m(b),v()]}:{fromLink:!0,sources:[v()]};case"cache-and-network":var b;return(b=h()).complete||c||g?{fromLink:!0,sources:[m(b),v()]}:{fromLink:!0,sources:[v()]};case"cache-only":return{fromLink:!1,sources:[m(h(),e.markReady())]};case"network-only":return g?{fromLink:!0,sources:[m(h()),v()]}:{fromLink:!0,sources:[v()]};case"no-cache":return g?{fromLink:!0,sources:[m(e.getDiff()),v()]}:{fromLink:!0,sources:[v()]};case"standby":return{fromLink:!1,sources:[]}}},e.prototype.getOrCreateQuery=function(e){return e&&!this.queries.has(e)&&this.queries.set(e,new Zu(this,e)),this.queries.get(e)},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.localState.prepareContext(e);return l(l(l({},this.defaultContext),t),{clientAwareness:this.clientAwareness})},e}();function pc(e){return e.kind===Ce.FIELD||e.kind===Ce.FRAGMENT_SPREAD||e.kind===Ce.INLINE_FRAGMENT}var hc=new gn,mc=new WeakMap;function yc(e){var t=mc.get(e);return t||mc.set(e,t={vars:new Set,dep:Un()}),t}function vc(e){yc(e).vars.forEach((function(t){return t.forgetCache(e)}))}function gc(e){var t=new Set,n=new Set,r=function(o){if(arguments.length>0){if(e!==o){e=o,t.forEach((function(e){yc(e).dep.dirty(r),function(e){e.broadcastWatches&&e.broadcastWatches()}(e)}));var a=Array.from(n);n.clear(),a.forEach((function(t){return t(e)}))}}else{var s=hc.getValue();s&&(i(s),yc(s).dep(r))}return e};r.onNextChange=function(e){return n.add(e),function(){n.delete(e)}};var i=r.attachCache=function(e){return t.add(e),yc(e).vars.add(r),r};return r.forgetCache=function(e){return t.delete(e)},r}var bc=function(){function e(e){var t=e.cache,n=e.client,r=e.resolvers,i=e.fragmentMatcher;this.selectionsToResolveCache=new WeakMap,this.cache=t,n&&(this.client=n),r&&this.addResolvers(r),i&&this.setFragmentMatcher(i)}return e.prototype.addResolvers=function(e){var t=this;this.resolvers=this.resolvers||{},Array.isArray(e)?e.forEach((function(e){t.resolvers=su(t.resolvers,e)})):this.resolvers=su(this.resolvers,e)},e.prototype.setResolvers=function(e){this.resolvers={},this.addResolvers(e)},e.prototype.getResolvers=function(){return this.resolvers||{}},e.prototype.runResolvers=function(e){return c(this,arguments,void 0,(function(e){var t=e.document,n=e.remoteResult,r=e.context,i=e.variables,o=e.onlyRunForcedResolvers,a=void 0!==o&&o;return f(this,(function(e){return t?[2,this.resolveDocument(t,n.data,r,i,this.fragmentMatcher,a).then((function(e){return l(l({},n),{data:e.result})}))]:[2,n]}))}))},e.prototype.setFragmentMatcher=function(e){this.fragmentMatcher=e},e.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},e.prototype.clientQuery=function(e){return Zt(["client"],e)&&this.resolvers?e:null},e.prototype.serverQuery=function(e){return Mu(e)},e.prototype.prepareContext=function(e){var t=this.cache;return l(l({},e),{cache:t,getCacheKey:function(e){return t.identify(e)}})},e.prototype.addExportedVariables=function(e){return c(this,arguments,void 0,(function(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),f(this,(function(r){return e?[2,this.resolveDocument(e,this.buildRootValueFromCache(e,t)||{},this.prepareContext(n),t).then((function(e){return l(l({},t),e.exportedVariables)}))]:[2,l({},t)]}))}))},e.prototype.shouldForceResolvers=function(e){var t=!1;return Te(e,{Directive:{enter:function(e){if("client"===e.name.value&&e.arguments&&(t=e.arguments.some((function(e){return"always"===e.name.value&&"BooleanValue"===e.value.kind&&!0===e.value.value}))))return _e}}}),t},e.prototype.buildRootValueFromCache=function(e,t){return this.cache.diff({query:Lu(e),variables:t,returnPartialData:!0,optimistic:!1}).result},e.prototype.resolveDocument=function(e,t){return c(this,arguments,void 0,(function(e,t,n,r,i,o){var a,s,u,c,d,p,h,m,y,v;return void 0===n&&(n={}),void 0===r&&(r={}),void 0===i&&(i=function(){return!0}),void 0===o&&(o=!1),f(this,(function(f){return a=wt(e),s=kt(e),u=Ne(s),c=this.collectSelectionsToResolve(a,u),d=a.operation,p=d?d.charAt(0).toUpperCase()+d.slice(1):"Query",m=(h=this).cache,y=h.client,v={fragmentMap:u,context:l(l({},n),{cache:m,client:y}),variables:r,fragmentMatcher:i,defaultOperationType:p,exportedVariables:{},selectionsToResolve:c,onlyRunForcedResolvers:o},[2,this.resolveSelectionSet(a.selectionSet,!1,t,v).then((function(e){return{result:e,exportedVariables:v.exportedVariables}}))]}))}))},e.prototype.resolveSelectionSet=function(e,t,n,r){return c(this,void 0,void 0,(function(){var i,o,a,s,l,u=this;return f(this,(function(d){return i=r.fragmentMap,o=r.context,a=r.variables,s=[n],l=function(e){return c(u,void 0,void 0,(function(){var l,u;return f(this,(function(c){return(t||r.selectionsToResolve.has(e))&&Jt(e,a)?vt(e)?[2,this.resolveField(e,t,n,r).then((function(t){var n;void 0!==t&&s.push(((n={})[mt(e)]=t,n))}))]:(function(e){return"InlineFragment"===e.kind}(e)?l=e:(l=i[e.name.value],O(l,19,e.name.value)),l&&l.typeCondition&&(u=l.typeCondition.name.value,r.fragmentMatcher(n,u,o))?[2,this.resolveSelectionSet(l.selectionSet,t,n,r).then((function(e){s.push(e)}))]:[2]):[2]}))}))},[2,Promise.all(e.selections.map(l)).then((function(){return lu(s)}))]}))}))},e.prototype.resolveField=function(e,t,n,r){return c(this,void 0,void 0,(function(){var i,o,a,s,l,u,c,d,p,h=this;return f(this,(function(f){return n?(i=r.variables,o=e.name.value,a=mt(e),s=o!==a,l=n[a]||n[o],u=Promise.resolve(l),r.onlyRunForcedResolvers&&!this.shouldForceResolvers(e)||(c=n.__typename||r.defaultOperationType,(d=this.resolvers&&this.resolvers[c])&&(p=d[s?o:a])&&(u=Promise.resolve(hc.withValue(this.cache,p,[n,ht(e,i),r.context,{field:e,fragmentMap:r.fragmentMap}])))),[2,u.then((function(n){var i,o;if(void 0===n&&(n=l),e.directives&&e.directives.forEach((function(e){"export"===e.name.value&&e.arguments&&e.arguments.forEach((function(e){"as"===e.name.value&&"StringValue"===e.value.kind&&(r.exportedVariables[e.value.value]=n)}))})),!e.selectionSet)return n;if(null==n)return n;var a=null!==(o=null===(i=e.directives)||void 0===i?void 0:i.some((function(e){return"client"===e.name.value})))&&void 0!==o&&o;return Array.isArray(n)?h.resolveSubSelectedArray(e,t||a,n,r):e.selectionSet?h.resolveSelectionSet(e.selectionSet,t||a,n,r):void 0}))]):[2,null]}))}))},e.prototype.resolveSubSelectedArray=function(e,t,n,r){var i=this;return Promise.all(n.map((function(n){return null===n?null:Array.isArray(n)?i.resolveSubSelectedArray(e,t,n,r):e.selectionSet?i.resolveSelectionSet(e.selectionSet,t,n,r):void 0})))},e.prototype.collectSelectionsToResolve=function(e,t){var n=function(e){return!Array.isArray(e)},r=this.selectionsToResolveCache;return function e(i){if(!r.has(i)){var o=new Set;r.set(i,o),Te(i,{Directive:function(e,t,r,i,a){"client"===e.name.value&&a.forEach((function(e){n(e)&&pc(e)&&o.add(e)}))},FragmentSpread:function(r,i,a,s,l){var u=t[r.name.value];O(u,20,r.name.value);var c=e(u);c.size>0&&(l.forEach((function(e){n(e)&&pc(e)&&o.add(e)})),o.add(r),c.forEach((function(e){o.add(e)})))}})}return r.get(i)}(e)},e}(),Ac=!1,kc=function(){function e(e){var t,n=this;if(this.resetStoreCallbacks=[],this.clearStoreCallbacks=[],!e.cache)throw I(16);var r=e.uri,i=e.credentials,o=e.headers,a=e.cache,s=e.documentTransform,u=e.ssrMode,c=void 0!==u&&u,f=e.ssrForceFetchDelay,d=void 0===f?0:f,p=e.connectToDevTools,h=e.queryDeduplication,m=void 0===h||h,y=e.defaultOptions,v=e.defaultContext,g=e.assumeImmutableResults,b=void 0===g?a.assumeImmutableResults:g,A=e.resolvers,k=e.typeDefs,x=e.fragmentMatcher,w=e.name,C=e.version,S=e.devtools,_=e.dataMasking,T=e.link;T||(T=r?new qu({uri:r,credentials:i,headers:o}):tu.empty()),this.link=T,this.cache=a,this.disableNetworkFetches=c||d>0,this.queryDeduplication=m,this.defaultOptions=y||Object.create(null),this.typeDefs=k,this.devtoolsConfig=l(l({},S),{enabled:null!==(t=null==S?void 0:S.enabled)&&void 0!==t?t:p}),void 0===this.devtoolsConfig.enabled&&(this.devtoolsConfig.enabled=!1!==globalThis.__DEV__),d&&setTimeout((function(){return n.disableNetworkFetches=!1}),d),this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.watchFragment=this.watchFragment.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this),this.version=E,this.localState=new bc({cache:a,client:this,resolvers:A,fragmentMatcher:x}),this.queryManager=new dc({cache:this.cache,link:this.link,defaultOptions:this.defaultOptions,defaultContext:v,documentTransform:s,queryDeduplication:m,ssrMode:c,dataMasking:!!_,clientAwareness:{name:w,version:C},localState:this.localState,assumeImmutableResults:b,onBroadcast:this.devtoolsConfig.enabled?function(){n.devToolsHookCb&&n.devToolsHookCb({action:{},state:{queries:n.queryManager.getQueryStore(),mutations:n.queryManager.mutationStore||{}},dataWithOptimisticResults:n.cache.extract(!0)})}:void 0}),this.devtoolsConfig.enabled&&this.connectToDevTools()}return e.prototype.connectToDevTools=function(){if("undefined"!=typeof window){var e=window,t=Symbol.for("apollo.devtools");(e[t]=e[t]||[]).push(this),e.__APOLLO_CLIENT__=this,Ac||!1===globalThis.__DEV__||(Ac=!0,window.document&&window.top===window.self&&/^(https?|file):$/.test(window.location.protocol)&&setTimeout((function(){if(!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__){var e=window.navigator,t=e&&e.userAgent,n=void 0;"string"==typeof t&&(t.indexOf("Chrome/")>-1?n="https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm":t.indexOf("Firefox/")>-1&&(n="https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/")),n&&!1!==globalThis.__DEV__&&O.log("Download the Apollo DevTools for a better development experience: %s",n)}}),1e4))}},Object.defineProperty(e.prototype,"documentTransform",{get:function(){return this.queryManager.documentTransform},enumerable:!1,configurable:!0}),e.prototype.stop=function(){this.queryManager.stop()},e.prototype.watchQuery=function(e){return this.defaultOptions.watchQuery&&(e=$(this.defaultOptions.watchQuery,e)),!this.disableNetworkFetches||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e=l(l({},e),{fetchPolicy:"cache-first"})),this.queryManager.watchQuery(e)},e.prototype.query=function(e){return this.defaultOptions.query&&(e=$(this.defaultOptions.query,e)),O("cache-and-network"!==e.fetchPolicy,17),this.disableNetworkFetches&&"network-only"===e.fetchPolicy&&(e=l(l({},e),{fetchPolicy:"cache-first"})),this.queryManager.query(e)},e.prototype.mutate=function(e){return this.defaultOptions.mutate&&(e=$(this.defaultOptions.mutate,e)),this.queryManager.mutate(e)},e.prototype.subscribe=function(e){var t=this,n=this.queryManager.generateQueryId();return this.queryManager.startGraphQLSubscription(e).map((function(r){return l(l({},r),{data:t.queryManager.maskOperation({document:e.query,data:r.data,fetchPolicy:e.fetchPolicy,id:n})})}))},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.cache.readQuery(e,t)},e.prototype.watchFragment=function(e){var t;return this.cache.watchFragment(l(l({},e),((t={})[Symbol.for("apollo.dataMasking")]=this.queryManager.dataMasking,t)))},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.cache.readFragment(e,t)},e.prototype.writeQuery=function(e){var t=this.cache.writeQuery(e);return!1!==e.broadcast&&this.queryManager.broadcastQueries(),t},e.prototype.writeFragment=function(e){var t=this.cache.writeFragment(e);return!1!==e.broadcast&&this.queryManager.broadcastQueries(),t},e.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},e.prototype.__requestRaw=function(e){return Uu(this.link,e)},e.prototype.resetStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore({discardWatches:!1})})).then((function(){return Promise.all(e.resetStoreCallbacks.map((function(e){return e()})))})).then((function(){return e.reFetchObservableQueries()}))},e.prototype.clearStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore({discardWatches:!0})})).then((function(){return Promise.all(e.clearStoreCallbacks.map((function(e){return e()})))}))},e.prototype.onResetStore=function(e){var t=this;return this.resetStoreCallbacks.push(e),function(){t.resetStoreCallbacks=t.resetStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.onClearStore=function(e){var t=this;return this.clearStoreCallbacks.push(e),function(){t.clearStoreCallbacks=t.clearStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.reFetchObservableQueries=function(e){return this.queryManager.reFetchObservableQueries(e)},e.prototype.refetchQueries=function(e){var t=this.queryManager.refetchQueries(e),n=[],r=[];t.forEach((function(e,t){n.push(t),r.push(e)}));var i=Promise.all(r);return i.queries=n,i.results=r,i.catch((function(e){!1!==globalThis.__DEV__&&O.debug(18,e)})),i},e.prototype.getObservableQueries=function(e){return void 0===e&&(e="active"),this.queryManager.getObservableQueries(e)},e.prototype.extract=function(e){return this.cache.extract(e)},e.prototype.restore=function(e){return this.cache.restore(e)},e.prototype.addResolvers=function(e){this.localState.addResolvers(e)},e.prototype.setResolvers=function(e){this.localState.setResolvers(e)},e.prototype.getResolvers=function(){return this.localState.getResolvers()},e.prototype.setLocalStateFragmentMatcher=function(e){this.localState.setFragmentMatcher(e)},e.prototype.setLink=function(e){this.link=this.queryManager.link=e},Object.defineProperty(e.prototype,"defaultContext",{get:function(){return this.queryManager.defaultContext},enumerable:!1,configurable:!0}),e}();!1!==globalThis.__DEV__&&(kc.prototype.getMemoryInternals=Ke);var Ec=tu.from,xc=function(){function e(){this.assumeImmutableResults=!1,this.getFragmentDoc=Yn(Ie,{max:He["cache.fragmentQueryDocuments"]||1e3,cache:Me})}return e.prototype.lookupFragment=function(e){return null},e.prototype.batch=function(e){var t,n=this,r="string"==typeof e.optimistic?e.optimistic:!1===e.optimistic?null:void 0;return this.performTransaction((function(){return t=e.update(n)}),r),t},e.prototype.recordOptimisticTransaction=function(e,t){this.performTransaction(e,t)},e.prototype.transformDocument=function(e){return e},e.prototype.transformForLink=function(e){return e},e.prototype.identify=function(e){},e.prototype.gc=function(){return[]},e.prototype.modify=function(e){return!1},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read(l(l({},e),{rootId:e.id||"ROOT_QUERY",optimistic:t}))},e.prototype.watchFragment=function(e){var t=this,n=e.fragment,r=e.fragmentName,i=e.from,o=e.optimistic,a=void 0===o||o,s=u(e,["fragment","fragmentName","from","optimistic"]),c=this.getFragmentDoc(n,r),f=void 0===i||"string"==typeof i?i:this.identify(i),d=!!e[Symbol.for("apollo.dataMasking")];if(!1!==globalThis.__DEV__){var p=r||xt(n).name.value;f||!1!==globalThis.__DEV__&&O.warn(1,p)}var h,m=l(l({},s),{returnPartialData:!0,id:f,query:c,optimistic:a});return new Gt((function(i){return t.watch(l(l({},m),{immediate:!0,callback:function(o){var a=d?uc(o.result,n,t,r):o.result;if(!h||!nn(c,{data:h.result},{data:a},e.variables)){var s={data:a,complete:!!o.complete};o.missing&&(s.missing=lu(o.missing.map((function(e){return e.missing})))),h=l(l({},o),{result:a}),i.next(s)}}}))}))},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read(l(l({},e),{query:this.getFragmentDoc(e.fragment,e.fragmentName),rootId:e.id,optimistic:t}))},e.prototype.writeQuery=function(e){var t=e.id,n=e.data,r=u(e,["id","data"]);return this.write(Object.assign(r,{dataId:t||"ROOT_QUERY",result:n}))},e.prototype.writeFragment=function(e){var t=e.id,n=e.data,r=e.fragment,i=e.fragmentName,o=u(e,["id","data","fragment","fragmentName"]);return this.write(Object.assign(o,{query:this.getFragmentDoc(r,i),dataId:t,result:n}))},e.prototype.updateQuery=function(e,t){return this.batch({update:function(n){var r=n.readQuery(e),i=t(r);return null==i?r:(n.writeQuery(l(l({},e),{data:i})),i)}})},e.prototype.updateFragment=function(e,t){return this.batch({update:function(n){var r=n.readFragment(e),i=t(r);return null==i?r:(n.writeFragment(l(l({},e),{data:i})),i)}})},e}();!1!==globalThis.__DEV__&&(xc.prototype.getMemoryInternals=Xe);var wc=function(e){function t(n,r,i,o){var a,s=e.call(this,n)||this;if(s.message=n,s.path=r,s.query=i,s.variables=o,Array.isArray(s.path)){s.missing=s.message;for(var l=s.path.length-1;l>=0;--l)s.missing=((a={})[s.path[l]]=s.missing,a)}else s.missing=s.path;return s.__proto__=t.prototype,s}return s(t,e),t}(Error),Cc=Object.prototype.hasOwnProperty;function Sc(e){return null==e}function _c(e,t){var n=e.__typename,r=e.id,i=e._id;if("string"==typeof n&&(t&&(t.keyObject=Sc(r)?Sc(i)?void 0:{_id:i}:{id:r}),Sc(r)&&!Sc(i)&&(r=i),!Sc(r)))return"".concat(n,":").concat("number"==typeof r||"string"==typeof r?r:JSON.stringify(r))}var Tc={dataIdFromObject:_c,addTypename:!0,resultCaching:!0,canonizeResults:!1};function Oc(e){var t=e.canonizeResults;return void 0===t?Tc.canonizeResults:t}var Ic=/^[_a-z][_0-9a-z]*/i;function Nc(e){var t=e.match(Ic);return t?t[0]:e}function Dc(e,t,n){return!!ue(t)&&(ir(t)?t.every((function(t){return Dc(e,t,n)})):e.selections.every((function(e){if(vt(e)&&Jt(e,n)){var r=mt(e);return Cc.call(t,r)&&(!e.selectionSet||Dc(e.selectionSet,t[r],n))}return!0})))}function Bc(e){return ue(e)&&!ut(e)&&!ir(e)}function Pc(e,t){var n=Ne(kt(e));return{fragmentMap:n,lookupFragment:function(e){var r=n[e];return!r&&t&&(r=t.lookup(e)),r||null}}}var Rc=Object.create(null),Fc=function(){return Rc},Lc=Object.create(null),Mc=function(){function e(e,t){var n=this;this.policies=e,this.group=t,this.data=Object.create(null),this.rootIds=Object.create(null),this.refs=Object.create(null),this.getFieldValue=function(e,t){return ar(ut(e)?n.get(e.__ref,t):e&&e[t])},this.canRead=function(e){return ut(e)?n.has(e.__ref):"object"==typeof e},this.toReference=function(e,t){if("string"==typeof e)return lt(e);if(ut(e))return e;var r=n.policies.identify(e)[0];if(r){var i=lt(r);return t&&n.merge(r,e),i}}}return e.prototype.toObject=function(){return l({},this.data)},e.prototype.has=function(e){return void 0!==this.lookup(e,!0)},e.prototype.get=function(e,t){if(this.group.depend(e,t),Cc.call(this.data,e)){var n=this.data[e];if(n&&Cc.call(n,t))return n[t]}return"__typename"===t&&Cc.call(this.policies.rootTypenamesById,e)?this.policies.rootTypenamesById[e]:this instanceof qc?this.parent.get(e,t):void 0},e.prototype.lookup=function(e,t){return t&&this.group.depend(e,"__exists"),Cc.call(this.data,e)?this.data[e]:this instanceof qc?this.parent.lookup(e,t):this.policies.rootTypenamesById[e]?Object.create(null):void 0},e.prototype.merge=function(e,t){var n,r=this;ut(e)&&(e=e.__ref),ut(t)&&(t=t.__ref);var i="string"==typeof e?this.lookup(n=e):e,o="string"==typeof t?this.lookup(n=t):t;if(o){O("string"==typeof n,2);var a=new cu(Qc).merge(i,o);if(this.data[n]=a,a!==i&&(delete this.refs[n],this.group.caching)){var s=Object.create(null);i||(s.__exists=1),Object.keys(o).forEach((function(e){if(!i||i[e]!==a[e]){s[e]=1;var t=Nc(e);t===e||r.policies.hasKeyArgs(a.__typename,t)||(s[t]=1),void 0!==a[e]||r instanceof qc||delete a[e]}})),!s.__typename||i&&i.__typename||this.policies.rootTypenamesById[n]!==a.__typename||delete s.__typename,Object.keys(s).forEach((function(e){return r.group.dirty(n,e)}))}}},e.prototype.modify=function(e,t){var n=this,r=this.lookup(e);if(r){var i=Object.create(null),o=!1,a=!0,s={DELETE:Rc,INVALIDATE:Lc,isReference:ut,toReference:this.toReference,canRead:this.canRead,readField:function(t,r){return n.policies.readField("string"==typeof t?{fieldName:t,from:r||lt(e)}:t,{store:n})}};if(Object.keys(r).forEach((function(u){var c=Nc(u),f=r[u];if(void 0!==f){var d="function"==typeof t?t:t[u]||t[c];if(d){var p=d===Fc?Rc:d(ar(f),l(l({},s),{fieldName:c,storeFieldName:u,storage:n.getStorage(e,u)}));if(p===Lc)n.group.dirty(e,u);else if(p===Rc&&(p=void 0),p!==f&&(i[u]=p,o=!0,f=p,!1!==globalThis.__DEV__)){var h=function(e){if(void 0===n.lookup(e.__ref))return!1!==globalThis.__DEV__&&O.warn(3,e),!0};if(ut(p))h(p);else if(Array.isArray(p))for(var m=!1,y=void 0,v=0,g=p;v<g.length;v++){var b=g[v];if(ut(b)){if(m=!0,h(b))break}else"object"==typeof b&&b&&n.policies.identify(b)[0]&&(y=b);if(m&&void 0!==y){!1!==globalThis.__DEV__&&O.warn(4,y);break}}}}void 0!==f&&(a=!1)}})),o)return this.merge(e,i),a&&(this instanceof qc?this.data[e]=void 0:delete this.data[e],this.group.dirty(e,"__exists")),!0}return!1},e.prototype.delete=function(e,t,n){var r,i=this.lookup(e);if(i){var o=this.getFieldValue(i,"__typename"),a=t&&n?this.policies.getStoreFieldName({typename:o,fieldName:t,args:n}):t;return this.modify(e,a?((r={})[a]=Fc,r):Fc)}return!1},e.prototype.evict=function(e,t){var n=!1;return e.id&&(Cc.call(this.data,e.id)&&(n=this.delete(e.id,e.fieldName,e.args)),this instanceof qc&&this!==t&&(n=this.parent.evict(e,t)||n),(e.fieldName||n)&&this.group.dirty(e.id,e.fieldName||"__exists")),n},e.prototype.clear=function(){this.replace(null)},e.prototype.extract=function(){var e=this,t=this.toObject(),n=[];return this.getRootIdSet().forEach((function(t){Cc.call(e.policies.rootTypenamesById,t)||n.push(t)})),n.length&&(t.__META={extraRootIds:n.sort()}),t},e.prototype.replace=function(e){var t=this;if(Object.keys(this.data).forEach((function(n){e&&Cc.call(e,n)||t.delete(n)})),e){var n=e.__META,r=u(e,["__META"]);Object.keys(r).forEach((function(e){t.merge(e,r[e])})),n&&n.extraRootIds.forEach(this.retain,this)}},e.prototype.retain=function(e){return this.rootIds[e]=(this.rootIds[e]||0)+1},e.prototype.release=function(e){if(this.rootIds[e]>0){var t=--this.rootIds[e];return t||delete this.rootIds[e],t}return 0},e.prototype.getRootIdSet=function(e){return void 0===e&&(e=new Set),Object.keys(this.rootIds).forEach(e.add,e),this instanceof qc?this.parent.getRootIdSet(e):Object.keys(this.policies.rootTypenamesById).forEach(e.add,e),e},e.prototype.gc=function(){var e=this,t=this.getRootIdSet(),n=this.toObject();t.forEach((function(r){Cc.call(n,r)&&(Object.keys(e.findChildRefIds(r)).forEach(t.add,t),delete n[r])}));var r=Object.keys(n);if(r.length){for(var i=this;i instanceof qc;)i=i.parent;r.forEach((function(e){return i.delete(e)}))}return r},e.prototype.findChildRefIds=function(e){if(!Cc.call(this.refs,e)){var t=this.refs[e]=Object.create(null),n=this.data[e];if(!n)return t;var r=new Set([n]);r.forEach((function(e){ut(e)&&(t[e.__ref]=!0),ue(e)&&Object.keys(e).forEach((function(t){var n=e[t];ue(n)&&r.add(n)}))}))}return this.refs[e]},e.prototype.makeCacheKey=function(){return this.group.keyMaker.lookupArray(arguments)},e}(),zc=function(){function e(e,t){void 0===t&&(t=null),this.caching=e,this.parent=t,this.d=null,this.resetCaching()}return e.prototype.resetCaching=function(){this.d=this.caching?Un():null,this.keyMaker=new fn(M)},e.prototype.depend=function(e,t){if(this.d){this.d(jc(e,t));var n=Nc(t);n!==t&&this.d(jc(e,n)),this.parent&&this.parent.depend(e,t)}},e.prototype.dirty=function(e,t){this.d&&this.d.dirty(jc(e,t),"__exists"===t?"forget":"setDirty")},e}();function jc(e,t){return t+"#"+e}function Vc(e,t){Wc(e)&&e.group.depend(t,"__exists")}!function(e){var t=function(e){function t(t){var n=t.policies,r=t.resultCaching,i=void 0===r||r,o=t.seed,a=e.call(this,n,new zc(i))||this;return a.stump=new Uc(a),a.storageTrie=new fn(M),o&&a.replace(o),a}return s(t,e),t.prototype.addLayer=function(e,t){return this.stump.addLayer(e,t)},t.prototype.removeLayer=function(){return this},t.prototype.getStorage=function(){return this.storageTrie.lookupArray(arguments)},t}(e);e.Root=t}(Mc||(Mc={}));var qc=function(e){function t(t,n,r,i){var o=e.call(this,n.policies,i)||this;return o.id=t,o.parent=n,o.replay=r,o.group=i,r(o),o}return s(t,e),t.prototype.addLayer=function(e,n){return new t(e,this,n,this.group)},t.prototype.removeLayer=function(e){var t=this,n=this.parent.removeLayer(e);return e===this.id?(this.group.caching&&Object.keys(this.data).forEach((function(e){var r=t.data[e],i=n.lookup(e);i?r?r!==i&&Object.keys(r).forEach((function(n){ne(r[n],i[n])||t.group.dirty(e,n)})):(t.group.dirty(e,"__exists"),Object.keys(i).forEach((function(n){t.group.dirty(e,n)}))):t.delete(e)})),n):n===this.parent?this:n.addLayer(this.id,this.replay)},t.prototype.toObject=function(){return l(l({},this.parent.toObject()),this.data)},t.prototype.findChildRefIds=function(t){var n=this.parent.findChildRefIds(t);return Cc.call(this.data,t)?l(l({},n),e.prototype.findChildRefIds.call(this,t)):n},t.prototype.getStorage=function(){for(var e=this.parent;e.parent;)e=e.parent;return e.getStorage.apply(e,arguments)},t}(Mc),Uc=function(e){function t(t){return e.call(this,"EntityStore.Stump",t,(function(){}),new zc(t.group.caching,t.group))||this}return s(t,e),t.prototype.removeLayer=function(){return this},t.prototype.merge=function(e,t){return this.parent.merge(e,t)},t}(qc);function Qc(e,t,n){var r=e[n],i=t[n];return ne(r,i)?r:i}function Wc(e){return!!(e instanceof Mc&&e.group.caching)}var Hc=function(){function e(){this.known=new(z?WeakSet:Set),this.pool=new fn(M),this.passes=new WeakMap,this.keysByJSON=new Map,this.empty=this.admit({})}return e.prototype.isKnown=function(e){return ue(e)&&this.known.has(e)},e.prototype.pass=function(e){if(ue(e)){var t=function(e){return ue(e)?ir(e)?e.slice(0):l({__proto__:Object.getPrototypeOf(e)},e):e}(e);return this.passes.set(t,e),t}return e},e.prototype.admit=function(e){var t=this;if(ue(e)){var n=this.passes.get(e);if(n)return n;switch(Object.getPrototypeOf(e)){case Array.prototype:if(this.known.has(e))return e;var r=e.map(this.admit,this);return(s=this.pool.lookupArray(r)).array||(this.known.add(s.array=r),!1!==globalThis.__DEV__&&Object.freeze(r)),s.array;case null:case Object.prototype:if(this.known.has(e))return e;var i=Object.getPrototypeOf(e),o=[i],a=this.sortedKeys(e);o.push(a.json);var s,l=o.length;if(a.sorted.forEach((function(n){o.push(t.admit(e[n]))})),!(s=this.pool.lookupArray(o)).object){var u=s.object=Object.create(i);this.known.add(u),a.sorted.forEach((function(e,t){u[e]=o[l+t]})),!1!==globalThis.__DEV__&&Object.freeze(u)}return s.object}}return e},e.prototype.sortedKeys=function(e){var t=Object.keys(e),n=this.pool.lookupArray(t);if(!n.keys){t.sort();var r=JSON.stringify(t);(n.keys=this.keysByJSON.get(r))||this.keysByJSON.set(r,n.keys={sorted:t,json:r})}return n.keys},e}();function Yc(e){return[e.selectionSet,e.objectOrReference,e.context,e.context.canonizeResults]}var $c=function(){function e(e){var t=this;this.knownResults=new(M?WeakMap:Map),this.config=Y(e,{addTypename:!1!==e.addTypename,canonizeResults:Oc(e)}),this.canon=e.canon||new Hc,this.executeSelectionSet=Yn((function(e){var n,r=e.context.canonizeResults,i=Yc(e);i[3]=!r;var o=(n=t.executeSelectionSet).peek.apply(n,i);return o?r?l(l({},o),{result:t.canon.admit(o.result)}):o:(Vc(e.context.store,e.enclosingRef.__ref),t.execSelectionSetImpl(e))}),{max:this.config.resultCacheMaxSize||He["inMemoryCache.executeSelectionSet"]||5e4,keyArgs:Yc,makeCacheKey:function(e,t,n,r){if(Wc(n.store))return n.store.makeCacheKey(e,ut(t)?t.__ref:t,n.varString,r)}}),this.executeSubSelectedArray=Yn((function(e){return Vc(e.context.store,e.enclosingRef.__ref),t.execSubSelectedArrayImpl(e)}),{max:this.config.resultCacheMaxSize||He["inMemoryCache.executeSubSelectedArray"]||1e4,makeCacheKey:function(e){var t=e.field,n=e.array,r=e.context;if(Wc(r.store))return r.store.makeCacheKey(t,n,r.varString)}})}return e.prototype.resetCanon=function(){this.canon=new Hc},e.prototype.diffQueryAgainstStore=function(e){var t=e.store,n=e.query,r=e.rootId,i=void 0===r?"ROOT_QUERY":r,o=e.variables,a=e.returnPartialData,s=void 0===a||a,u=e.canonizeResults,c=void 0===u?this.config.canonizeResults:u,f=this.config.cache.policies;o=l(l({},Ct(Et(n))),o);var d,p=lt(i),h=this.executeSelectionSet({selectionSet:wt(n).selectionSet,objectOrReference:p,enclosingRef:p,context:l({store:t,query:n,policies:f,variables:o,varString:ot(o),canonizeResults:c},Pc(n,this.config.fragments))});if(h.missing&&(d=[new wc(Kc(h.missing),h.missing,n,o)],!s))throw d[0];return{result:h.result,complete:!d,missing:d}},e.prototype.isFresh=function(e,t,n,r){if(Wc(r.store)&&this.knownResults.get(e)===n){var i=this.executeSelectionSet.peek(n,t,r,this.canon.isKnown(e));if(i&&e===i.result)return!0}return!1},e.prototype.execSelectionSetImpl=function(e){var t=this,n=e.selectionSet,r=e.objectOrReference,i=e.enclosingRef,o=e.context;if(ut(r)&&!o.policies.rootTypenamesById[r.__ref]&&!o.store.has(r.__ref))return{result:this.canon.empty,missing:"Dangling reference to missing ".concat(r.__ref," object")};var a,s=o.variables,l=o.policies,u=o.store.getFieldValue(r,"__typename"),c=[],f=new cu;function d(e,t){var n;return e.missing&&(a=f.merge(a,((n={})[t]=e.missing,n))),e.result}this.config.addTypename&&"string"==typeof u&&!l.rootIdsByTypename[u]&&c.push({__typename:u});var p=new Set(n.selections);p.forEach((function(e){var n,h;if(Jt(e,s))if(vt(e)){var m=l.readField({fieldName:e.name.value,field:e,variables:o.variables,from:r},o),y=mt(e);void 0===m?Fu.added(e)||(a=f.merge(a,((n={})[y]="Can't find field '".concat(e.name.value,"' on ").concat(ut(r)?r.__ref+" object":"object "+JSON.stringify(r,null,2)),n))):ir(m)?m.length>0&&(m=d(t.executeSubSelectedArray({field:e,array:m,enclosingRef:i,context:o}),y)):e.selectionSet?null!=m&&(m=d(t.executeSelectionSet({selectionSet:e.selectionSet,objectOrReference:m,enclosingRef:ut(m)?m:i,context:o}),y)):o.canonizeResults&&(m=t.canon.pass(m)),void 0!==m&&c.push(((h={})[y]=m,h))}else{var v=De(e,o.lookupFragment);if(!v&&e.kind===Ce.FRAGMENT_SPREAD)throw I(10,e.name.value);v&&l.fragmentMatches(v,u)&&v.selectionSet.selections.forEach(p.add,p)}}));var h={result:lu(c),missing:a},m=o.canonizeResults?this.canon.admit(h):ar(h);return m.result&&this.knownResults.set(m.result,n),m},e.prototype.execSubSelectedArrayImpl=function(e){var t,n=this,r=e.field,i=e.array,o=e.enclosingRef,a=e.context,s=new cu;function l(e,n){var r;return e.missing&&(t=s.merge(t,((r={})[n]=e.missing,r))),e.result}return r.selectionSet&&(i=i.filter(a.store.canRead)),i=i.map((function(e,t){return null===e?null:ir(e)?l(n.executeSubSelectedArray({field:r,array:e,enclosingRef:o,context:a}),t):r.selectionSet?l(n.executeSelectionSet({selectionSet:r.selectionSet,objectOrReference:e,enclosingRef:ut(e)?e:o,context:a}),t):(!1!==globalThis.__DEV__&&function(e,t,n){if(!t.selectionSet){var r=new Set([n]);r.forEach((function(n){ue(n)&&(O(!ut(n),11,function(e,t){return ut(t)?e.get(t.__ref,"__typename"):t&&t.__typename}(e,n),t.name.value),Object.values(n).forEach(r.add,r))}))}}(a.store,r,e),e)})),{result:a.canonizeResults?this.canon.admit(i):i,missing:t}},e}();function Kc(e){try{JSON.stringify(e,(function(e,t){if("string"==typeof t)throw t;return t}))}catch(e){return e}}var Gc=Object.create(null);function Xc(e){var t=JSON.stringify(e);return Gc[t]||(Gc[t]=Object.create(null))}function Jc(e){var t=Xc(e);return t.keyFieldsFn||(t.keyFieldsFn=function(t,n){var r=function(e,t){return n.readField(t,e)},i=n.keyObject=ef(e,(function(e){var i=rf(n.storeObject,e,r);return void 0===i&&t!==n.storeObject&&Cc.call(t,e[0])&&(i=rf(t,e,nf)),O(void 0!==i,5,e.join("."),t),i}));return"".concat(n.typename,":").concat(JSON.stringify(i))})}function Zc(e){var t=Xc(e);return t.keyArgsFn||(t.keyArgsFn=function(t,n){var r=n.field,i=n.variables,o=n.fieldName,a=ef(e,(function(e){var n=e[0],o=n.charAt(0);if("@"!==o)if("$"!==o){if(t)return rf(t,e)}else{var a=n.slice(1);if(i&&Cc.call(i,a)){var s=e.slice(0);return s[0]=a,rf(i,s)}}else if(r&&or(r.directives)){var l=n.slice(1),u=r.directives.find((function(e){return e.name.value===l})),c=u&&ht(u,i);return c&&rf(c,e.slice(1))}})),s=JSON.stringify(a);return(t||"{}"!==s)&&(o+=":"+s),o})}function ef(e,t){var n=new cu;return tf(e).reduce((function(e,r){var i,o=t(r);if(void 0!==o){for(var a=r.length-1;a>=0;--a)(i={})[r[a]]=o,o=i;e=n.merge(e,o)}return e}),Object.create(null))}function tf(e){var t=Xc(e);if(!t.paths){var n=t.paths=[],r=[];e.forEach((function(t,i){ir(t)?(tf(t).forEach((function(e){return n.push(r.concat(e))})),r.length=0):(r.push(t),ir(e[i+1])||(n.push(r.slice(0)),r.length=0))}))}return t.paths}function nf(e,t){return e[t]}function rf(e,t,n){return n=n||nf,of(t.reduce((function e(t,r){return ir(t)?t.map((function(t){return e(t,r)})):t&&n(t,r)}),e))}function of(e){return ue(e)?ir(e)?e.map(of):ef(Object.keys(e).sort(),(function(t){return rf(e,t)})):e}function af(e){return void 0!==e.args?e.args:e.field?ht(e.field,e.variables):null}var sf=function(){},lf=function(e,t){return t.fieldName},uf=function(e,t,n){return(0,n.mergeObjects)(e,t)},cf=function(e,t){return t},ff=function(){function e(e){this.config=e,this.typePolicies=Object.create(null),this.toBeAdded=Object.create(null),this.supertypeMap=new Map,this.fuzzySubtypes=new Map,this.rootIdsByTypename=Object.create(null),this.rootTypenamesById=Object.create(null),this.usingPossibleTypes=!1,this.config=l({dataIdFromObject:_c},e),this.cache=this.config.cache,this.setRootTypename("Query"),this.setRootTypename("Mutation"),this.setRootTypename("Subscription"),e.possibleTypes&&this.addPossibleTypes(e.possibleTypes),e.typePolicies&&this.addTypePolicies(e.typePolicies)}return e.prototype.identify=function(e,t){var n,r=this,i=t&&(t.typename||(null===(n=t.storeObject)||void 0===n?void 0:n.__typename))||e.__typename;if(i===this.rootTypenamesById.ROOT_QUERY)return["ROOT_QUERY"];var o,a=t&&t.storeObject||e,s=l(l({},t),{typename:i,storeObject:a,readField:t&&t.readField||function(){var e=pf(arguments,a);return r.readField(e,{store:r.cache.data,variables:e.variables})}}),u=i&&this.getTypePolicy(i),c=u&&u.keyFn||this.config.dataIdFromObject;return rc.withValue(!0,(function(){for(;c;){var t=c(l(l({},e),a),s);if(!ir(t)){o=t;break}c=Jc(t)}})),o=o?String(o):void 0,s.keyObject?[o,s.keyObject]:[o]},e.prototype.addTypePolicies=function(e){var t=this;Object.keys(e).forEach((function(n){var r=e[n],i=r.queryType,o=r.mutationType,a=r.subscriptionType,s=u(r,["queryType","mutationType","subscriptionType"]);i&&t.setRootTypename("Query",n),o&&t.setRootTypename("Mutation",n),a&&t.setRootTypename("Subscription",n),Cc.call(t.toBeAdded,n)?t.toBeAdded[n].push(s):t.toBeAdded[n]=[s]}))},e.prototype.updateTypePolicy=function(e,t){var n=this,r=this.getTypePolicy(e),i=t.keyFields,o=t.fields;function a(e,t){e.merge="function"==typeof t?t:!0===t?uf:!1===t?cf:e.merge}a(r,t.merge),r.keyFn=!1===i?sf:ir(i)?Jc(i):"function"==typeof i?i:r.keyFn,o&&Object.keys(o).forEach((function(t){var r=n.getFieldPolicy(e,t,!0),i=o[t];if("function"==typeof i)r.read=i;else{var s=i.keyArgs,l=i.read,u=i.merge;r.keyFn=!1===s?lf:ir(s)?Zc(s):"function"==typeof s?s:r.keyFn,"function"==typeof l&&(r.read=l),a(r,u)}r.read&&r.merge&&(r.keyFn=r.keyFn||lf)}))},e.prototype.setRootTypename=function(e,t){void 0===t&&(t=e);var n="ROOT_"+e.toUpperCase(),r=this.rootTypenamesById[n];t!==r&&(O(!r||r===e,6,e),r&&delete this.rootIdsByTypename[r],this.rootIdsByTypename[t]=n,this.rootTypenamesById[n]=t)},e.prototype.addPossibleTypes=function(e){var t=this;this.usingPossibleTypes=!0,Object.keys(e).forEach((function(n){t.getSupertypeSet(n,!0),e[n].forEach((function(e){t.getSupertypeSet(e,!0).add(n);var r=e.match(Ic);r&&r[0]===e||t.fuzzySubtypes.set(e,new RegExp(e))}))}))},e.prototype.getTypePolicy=function(e){var t=this;if(!Cc.call(this.typePolicies,e)){var n=this.typePolicies[e]=Object.create(null);n.fields=Object.create(null);var r=this.supertypeMap.get(e);!r&&this.fuzzySubtypes.size&&(r=this.getSupertypeSet(e,!0),this.fuzzySubtypes.forEach((function(n,i){if(n.test(e)){var o=t.supertypeMap.get(i);o&&o.forEach((function(e){return r.add(e)}))}}))),r&&r.size&&r.forEach((function(e){var r=t.getTypePolicy(e),i=r.fields,o=u(r,["fields"]);Object.assign(n,o),Object.assign(n.fields,i)}))}var i=this.toBeAdded[e];return i&&i.length&&i.splice(0).forEach((function(n){t.updateTypePolicy(e,n)})),this.typePolicies[e]},e.prototype.getFieldPolicy=function(e,t,n){if(e){var r=this.getTypePolicy(e).fields;return r[t]||n&&(r[t]=Object.create(null))}},e.prototype.getSupertypeSet=function(e,t){var n=this.supertypeMap.get(e);return!n&&t&&this.supertypeMap.set(e,n=new Set),n},e.prototype.fragmentMatches=function(e,t,n,r){var i=this;if(!e.typeCondition)return!0;if(!t)return!1;var o=e.typeCondition.name.value;if(t===o)return!0;if(this.usingPossibleTypes&&this.supertypeMap.has(o))for(var a=this.getSupertypeSet(t,!0),s=[a],l=function(e){var t=i.getSupertypeSet(e,!1);t&&t.size&&s.indexOf(t)<0&&s.push(t)},u=!(!n||!this.fuzzySubtypes.size),c=!1,f=0;f<s.length;++f){var d=s[f];if(d.has(o))return a.has(o)||(c&&!1!==globalThis.__DEV__&&O.warn(7,t,o),a.add(o)),!0;d.forEach(l),u&&f===s.length-1&&Dc(e.selectionSet,n,r)&&(u=!1,c=!0,this.fuzzySubtypes.forEach((function(e,n){var r=t.match(e);r&&r[0]===t&&l(n)})))}return!1},e.prototype.hasKeyArgs=function(e,t){var n=this.getFieldPolicy(e,t,!1);return!(!n||!n.keyFn)},e.prototype.getStoreFieldName=function(e){var t,n=e.typename,r=e.fieldName,i=this.getFieldPolicy(n,r,!1),o=i&&i.keyFn;if(o&&n)for(var a={typename:n,fieldName:r,field:e.field||null,variables:e.variables},s=af(e);o;){var l=o(s,a);if(!ir(l)){t=l||r;break}o=Zc(l)}return void 0===t&&(t=e.field?function(e,t){var n=null;e.directives&&(n={},e.directives.forEach((function(e){n[e.name.value]={},e.arguments&&e.arguments.forEach((function(r){var i=r.name,o=r.value;return ct(n[e.name.value],i,o,t)}))})));var r=null;return e.arguments&&e.arguments.length&&(r={},e.arguments.forEach((function(e){var n=e.name,i=e.value;return ct(r,n,i,t)}))),pt(e.name.value,r,n)}(e.field,e.variables):pt(r,af(e))),!1===t?r:r===Nc(t)?t:r+":"+t},e.prototype.readField=function(e,t){var n=e.from;if(n&&(e.field||e.fieldName)){if(void 0===e.typename){var r=t.store.getFieldValue(n,"__typename");r&&(e.typename=r)}var i=this.getStoreFieldName(e),o=Nc(i),a=t.store.getFieldValue(n,i),s=this.getFieldPolicy(e.typename,o,!1),l=s&&s.read;if(l){var u=df(this,n,e,t,t.store.getStorage(ut(n)?n.__ref:n,i));return hc.withValue(this.cache,l,[a,u])}return a}},e.prototype.getReadFunction=function(e,t){var n=this.getFieldPolicy(e,t,!1);return n&&n.read},e.prototype.getMergeFunction=function(e,t,n){var r=this.getFieldPolicy(e,t,!1),i=r&&r.merge;return!i&&n&&(i=(r=this.getTypePolicy(n))&&r.merge),i},e.prototype.runMergeFunction=function(e,t,n,r,i){var o=n.field,a=n.typename,s=n.merge;return s===uf?hf(r.store)(e,t):s===cf?t:(r.overwrite&&(e=void 0),s(e,t,df(this,void 0,{typename:a,fieldName:o.name.value,field:o,variables:r.variables},r,i||Object.create(null))))},e}();function df(e,t,n,r,i){var o=e.getStoreFieldName(n),a=Nc(o),s=n.variables||r.variables,l=r.store,u=l.toReference,c=l.canRead;return{args:af(n),field:n.field||null,fieldName:a,storeFieldName:o,variables:s,isReference:ut,toReference:u,storage:i,cache:e.cache,canRead:c,readField:function(){return e.readField(pf(arguments,t,s),r)},mergeObjects:hf(r.store)}}function pf(e,t,n){var r,i=e[0],o=e[1],a=e.length;return"string"==typeof i?r={fieldName:i,from:a>1?o:t}:(r=l({},i),Cc.call(r,"from")||(r.from=t)),!1!==globalThis.__DEV__&&void 0===r.from&&!1!==globalThis.__DEV__&&O.warn(8,_(Array.from(e))),void 0===r.variables&&(r.variables=n),r}function hf(e){return function(t,n){if(ir(t)||ir(n))throw I(9);if(ue(t)&&ue(n)){var r=e.getFieldValue(t,"__typename"),i=e.getFieldValue(n,"__typename");if(r&&i&&r!==i)return n;if(ut(t)&&Bc(n))return e.merge(t.__ref,n),t;if(Bc(t)&&ut(n))return e.merge(t,n.__ref),n;if(Bc(t)&&Bc(n))return l(l({},t),n)}return n}}function mf(e,t,n){var r="".concat(t).concat(n),i=e.flavors.get(r);return i||e.flavors.set(r,i=e.clientOnly===t&&e.deferred===n?e:l(l({},e),{clientOnly:t,deferred:n})),i}var yf=function(){function e(e,t,n){this.cache=e,this.reader=t,this.fragments=n}return e.prototype.writeToStore=function(e,t){var n=this,r=t.query,i=t.result,o=t.dataId,a=t.variables,s=t.overwrite,u=bt(r),c=new cu;a=l(l({},Ct(u)),a);var f=l(l({store:e,written:Object.create(null),merge:function(e,t){return c.merge(e,t)},variables:a,varString:ot(a)},Pc(r,this.fragments)),{overwrite:!!s,incomingById:new Map,clientOnly:!1,deferred:!1,flavors:new Map}),d=this.processSelectionSet({result:i||Object.create(null),dataId:o,selectionSet:u.selectionSet,mergeTree:{map:new Map},context:f});if(!ut(d))throw I(12,i);return f.incomingById.forEach((function(t,r){var i=t.storeObject,o=t.mergeTree,a=t.fieldNodeSet,s=lt(r);if(o&&o.map.size){var u=n.applyMerges(o,s,i,f);if(ut(u))return;i=u}if(!1!==globalThis.__DEV__&&!f.overwrite){var c=Object.create(null);a.forEach((function(e){e.selectionSet&&(c[e.name.value]=!0)})),Object.keys(i).forEach((function(e){(function(e){return!0===c[Nc(e)]})(e)&&!function(e){var t=o&&o.map.get(e);return Boolean(t&&t.info&&t.info.merge)}(e)&&function(e,t,n,r){var i=function(e){var t=r.getFieldValue(e,n);return"object"==typeof t&&t},o=i(e);if(o){var a=i(t);if(a&&!ut(o)&&!ne(o,a)&&!Object.keys(o).every((function(e){return void 0!==r.getFieldValue(a,e)}))){var s=r.getFieldValue(e,"__typename")||r.getFieldValue(t,"__typename"),u=Nc(n),c="".concat(s,".").concat(u);if(!Ef.has(c)){Ef.add(c);var f=[];ir(o)||ir(a)||[o,a].forEach((function(e){var t=r.getFieldValue(e,"__typename");"string"!=typeof t||f.includes(t)||f.push(t)})),!1!==globalThis.__DEV__&&O.warn(15,u,s,f.length?"either ensure all objects of type "+f.join(" and ")+" have an ID or a custom merge function, or ":"",c,l({},o),l({},a))}}}}(s,i,e,f.store)}))}e.merge(r,i)})),e.retain(d.__ref),d},e.prototype.processSelectionSet=function(e){var t=this,n=e.dataId,r=e.result,i=e.selectionSet,o=e.context,a=e.mergeTree,s=this.cache.policies,u=Object.create(null),c=n&&s.rootTypenamesById[n]||yt(r,i,o.fragmentMap)||n&&o.store.get(n,"__typename");"string"==typeof c&&(u.__typename=c);var f=function(){var e=pf(arguments,u,o.variables);if(ut(e.from)){var t=o.incomingById.get(e.from.__ref);if(t){var n=s.readField(l(l({},e),{from:t.storeObject}),o);if(void 0!==n)return n}}return s.readField(e,o)},d=new Set;this.flattenFields(i,r,o,c).forEach((function(e,n){var i,o=mt(n),l=r[o];if(d.add(n),void 0!==l){var p=s.getStoreFieldName({typename:c,fieldName:n.name.value,field:n,variables:e.variables}),h=gf(a,p),m=t.processFieldValue(l,n,n.selectionSet?mf(e,!1,!1):e,h),y=void 0;n.selectionSet&&(ut(m)||Bc(m))&&(y=f("__typename",m));var v=s.getMergeFunction(c,n.name.value,y);v?h.info={field:n,typename:c,merge:v}:kf(a,p),u=e.merge(u,((i={})[p]=m,i))}else!1===globalThis.__DEV__||e.clientOnly||e.deferred||Fu.added(n)||s.getReadFunction(c,n.name.value)||!1!==globalThis.__DEV__&&O.error(13,mt(n),r)}));try{var p=s.identify(r,{typename:c,selectionSet:i,fragmentMap:o.fragmentMap,storeObject:u,readField:f}),h=p[0],m=p[1];n=n||h,m&&(u=o.merge(u,m))}catch(e){if(!n)throw e}if("string"==typeof n){var y=lt(n),v=o.written[n]||(o.written[n]=[]);if(v.indexOf(i)>=0)return y;if(v.push(i),this.reader&&this.reader.isFresh(r,y,i,o))return y;var g=o.incomingById.get(n);return g?(g.storeObject=o.merge(g.storeObject,u),g.mergeTree=bf(g.mergeTree,a),d.forEach((function(e){return g.fieldNodeSet.add(e)}))):o.incomingById.set(n,{storeObject:u,mergeTree:Af(a)?void 0:a,fieldNodeSet:d}),y}return u},e.prototype.processFieldValue=function(e,t,n,r){var i=this;return t.selectionSet&&null!==e?ir(e)?e.map((function(e,o){var a=i.processFieldValue(e,t,n,gf(r,o));return kf(r,o),a})):this.processSelectionSet({result:e,selectionSet:t.selectionSet,context:n,mergeTree:r}):!1!==globalThis.__DEV__?_t(e):e},e.prototype.flattenFields=function(e,t,n,r){void 0===r&&(r=yt(t,e,n.fragmentMap));var i=new Map,o=this.cache.policies,a=new fn(!1);return function e(s,l){var u=a.lookup(s,l.clientOnly,l.deferred);u.visited||(u.visited=!0,s.selections.forEach((function(a){if(Jt(a,n.variables)){var s=l.clientOnly,u=l.deferred;if(s&&u||!or(a.directives)||a.directives.forEach((function(e){var t=e.name.value;if("client"===t&&(s=!0),"defer"===t){var r=ht(e,n.variables);r&&!1===r.if||(u=!0)}})),vt(a)){var c=i.get(a);c&&(s=s&&c.clientOnly,u=u&&c.deferred),i.set(a,mf(n,s,u))}else{var f=De(a,n.lookupFragment);if(!f&&a.kind===Ce.FRAGMENT_SPREAD)throw I(14,a.name.value);f&&o.fragmentMatches(f,r,t,n.variables)&&e(f.selectionSet,mf(n,s,u))}}})))}(e,n),i},e.prototype.applyMerges=function(e,t,n,r,i){var o,a=this;if(e.map.size&&!ut(n)){var s,u=ir(n)||!ut(t)&&!Bc(t)?void 0:t,c=n;u&&!i&&(i=[ut(u)?u.__ref:u]);var f=function(e,t){return ir(e)?"number"==typeof t?e[t]:void 0:r.store.getFieldValue(e,String(t))};e.map.forEach((function(e,t){var n=f(u,t),o=f(c,t);if(void 0!==o){i&&i.push(t);var l=a.applyMerges(e,n,o,r,i);l!==o&&(s=s||new Map).set(t,l),i&&O(i.pop()===t)}})),s&&(n=ir(c)?c.slice(0):l({},c),s.forEach((function(e,t){n[t]=e})))}return e.info?this.cache.policies.runMergeFunction(t,n,e.info,r,i&&(o=r.store).getStorage.apply(o,i)):n},e}(),vf=[];function gf(e,t){var n=e.map;return n.has(t)||n.set(t,vf.pop()||{map:new Map}),n.get(t)}function bf(e,t){if(e===t||!t||Af(t))return e;if(!e||Af(e))return t;var n=e.info&&t.info?l(l({},e.info),t.info):e.info||t.info,r=e.map.size&&t.map.size,i={info:n,map:r?new Map:e.map.size?e.map:t.map};if(r){var o=new Set(t.map.keys());e.map.forEach((function(e,n){i.map.set(n,bf(e,t.map.get(n))),o.delete(n)})),o.forEach((function(n){i.map.set(n,bf(t.map.get(n),e.map.get(n)))}))}return i}function Af(e){return!e||!(e.info||e.map.size)}function kf(e,t){var n=e.map,r=n.get(t);r&&Af(r)&&(vf.push(r),n.delete(t))}var Ef=new Set,xf=function(e){function t(t){void 0===t&&(t={});var n=e.call(this)||this;return n.watches=new Set,n.addTypenameTransform=new Wu(Fu),n.assumeImmutableResults=!0,n.makeVar=gc,n.txCount=0,n.config=function(e){return Y(Tc,e)}(t),n.addTypename=!!n.config.addTypename,n.policies=new ff({cache:n,dataIdFromObject:n.config.dataIdFromObject,possibleTypes:n.config.possibleTypes,typePolicies:n.config.typePolicies}),n.init(),n}return s(t,e),t.prototype.init=function(){var e=this.data=new Mc.Root({policies:this.policies,resultCaching:this.config.resultCaching});this.optimisticData=e.stump,this.resetResultCache()},t.prototype.resetResultCache=function(e){var t=this,n=this.storeReader,r=this.config.fragments;this.storeWriter=new yf(this,this.storeReader=new $c({cache:this,addTypename:this.addTypename,resultCacheMaxSize:this.config.resultCacheMaxSize,canonizeResults:Oc(this.config),canon:e?void 0:n&&n.canon,fragments:r}),r),this.maybeBroadcastWatch=Yn((function(e,n){return t.broadcastWatch(e,n)}),{max:this.config.resultCacheMaxSize||He["inMemoryCache.maybeBroadcastWatch"]||5e3,makeCacheKey:function(e){var n=e.optimistic?t.optimisticData:t.data;if(Wc(n)){var r=e.optimistic,i=e.id,o=e.variables;return n.makeCacheKey(e.query,e.callback,ot({optimistic:r,id:i,variables:o}))}}}),new Set([this.data.group,this.optimisticData.group]).forEach((function(e){return e.resetCaching()}))},t.prototype.restore=function(e){return this.init(),e&&this.data.replace(e),this},t.prototype.extract=function(e){return void 0===e&&(e=!1),(e?this.optimisticData:this.data).extract()},t.prototype.read=function(e){var t=e.returnPartialData,n=void 0!==t&&t;try{return this.storeReader.diffQueryAgainstStore(l(l({},e),{store:e.optimistic?this.optimisticData:this.data,config:this.config,returnPartialData:n})).result||null}catch(e){if(e instanceof wc)return null;throw e}},t.prototype.write=function(e){try{return++this.txCount,this.storeWriter.writeToStore(this.data,e)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.modify=function(e){if(Cc.call(e,"id")&&!e.id)return!1;var t=e.optimistic?this.optimisticData:this.data;try{return++this.txCount,t.modify(e.id||"ROOT_QUERY",e.fields)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.diff=function(e){return this.storeReader.diffQueryAgainstStore(l(l({},e),{store:e.optimistic?this.optimisticData:this.data,rootId:e.id||"ROOT_QUERY",config:this.config}))},t.prototype.watch=function(e){var t=this;return this.watches.size||function(e){yc(e).vars.forEach((function(t){return t.attachCache(e)}))}(this),this.watches.add(e),e.immediate&&this.maybeBroadcastWatch(e),function(){t.watches.delete(e)&&!t.watches.size&&vc(t),t.maybeBroadcastWatch.forget(e)}},t.prototype.gc=function(e){var t;ot.reset(),_u.reset(),this.addTypenameTransform.resetCache(),null===(t=this.config.fragments)||void 0===t||t.resetCaches();var n=this.optimisticData.gc();return e&&!this.txCount&&(e.resetResultCache?this.resetResultCache(e.resetResultIdentities):e.resetResultIdentities&&this.storeReader.resetCanon()),n},t.prototype.retain=function(e,t){return(t?this.optimisticData:this.data).retain(e)},t.prototype.release=function(e,t){return(t?this.optimisticData:this.data).release(e)},t.prototype.identify=function(e){if(ut(e))return e.__ref;try{return this.policies.identify(e)[0]}catch(e){!1!==globalThis.__DEV__&&O.warn(e)}},t.prototype.evict=function(e){if(!e.id){if(Cc.call(e,"id"))return!1;e=l(l({},e),{id:"ROOT_QUERY"})}try{return++this.txCount,this.optimisticData.evict(e,this.data)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.reset=function(e){var t=this;return this.init(),ot.reset(),e&&e.discardWatches?(this.watches.forEach((function(e){return t.maybeBroadcastWatch.forget(e)})),this.watches.clear(),vc(this)):this.broadcastWatches(),Promise.resolve()},t.prototype.removeOptimistic=function(e){var t=this.optimisticData.removeLayer(e);t!==this.optimisticData&&(this.optimisticData=t,this.broadcastWatches())},t.prototype.batch=function(e){var t,n=this,r=e.update,i=e.optimistic,o=void 0===i||i,a=e.removeOptimistic,s=e.onWatchUpdated,u=function(e){var i=n,o=i.data,a=i.optimisticData;++n.txCount,e&&(n.data=n.optimisticData=e);try{return t=r(n)}finally{--n.txCount,n.data=o,n.optimisticData=a}},c=new Set;return s&&!this.txCount&&this.broadcastWatches(l(l({},e),{onWatchUpdated:function(e){return c.add(e),!1}})),"string"==typeof o?this.optimisticData=this.optimisticData.addLayer(o,u):!1===o?u(this.data):u(),"string"==typeof a&&(this.optimisticData=this.optimisticData.removeLayer(a)),s&&c.size?(this.broadcastWatches(l(l({},e),{onWatchUpdated:function(e,t){var n=s.call(this,e,t);return!1!==n&&c.delete(e),n}})),c.size&&c.forEach((function(e){return n.maybeBroadcastWatch.dirty(e)}))):this.broadcastWatches(e),t},t.prototype.performTransaction=function(e,t){return this.batch({update:e,optimistic:t||null!==t})},t.prototype.transformDocument=function(e){return this.addTypenameToDocument(this.addFragmentsToDocument(e))},t.prototype.fragmentMatches=function(e,t){return this.policies.fragmentMatches(e,t)},t.prototype.lookupFragment=function(e){var t;return(null===(t=this.config.fragments)||void 0===t?void 0:t.lookup(e))||null},t.prototype.broadcastWatches=function(e){var t=this;this.txCount||this.watches.forEach((function(n){return t.maybeBroadcastWatch(n,e)}))},t.prototype.addFragmentsToDocument=function(e){var t=this.config.fragments;return t?t.transform(e):e},t.prototype.addTypenameToDocument=function(e){return this.addTypename?this.addTypenameTransform.transformDocument(e):e},t.prototype.broadcastWatch=function(e,t){var n=e.lastDiff,r=this.diff(e);t&&(e.optimistic&&"string"==typeof t.optimistic&&(r.fromOptimisticTransaction=!0),t.onWatchUpdated&&!1===t.onWatchUpdated.call(this,e,r,n))||n&&ne(n.result,r.result)||e.callback(e.lastDiff=r,n)},t}(xc);function wf(e){return new tu((function(t,n){return new Gt((function(r){var i,o,a;try{i=n(t).subscribe({next:function(i){i.errors?a=e({graphQLErrors:i.errors,response:i,operation:t,forward:n}):fe(i)&&(a=e({protocolErrors:i.extensions[ce],response:i,operation:t,forward:n})),a?o=a.subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)}):r.next(i)},error:function(i){(a=e({operation:t,networkError:i,graphQLErrors:i&&i.result&&i.result.errors||void 0,forward:n}))?o=a.subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)}):r.error(i)},complete:function(){a||r.complete.bind(r)()}})}catch(i){e({networkError:i,operation:t,forward:n}),r.error(i)}return function(){i&&i.unsubscribe(),o&&i.unsubscribe()}}))}))}!1!==globalThis.__DEV__&&(xf.prototype.getMemoryInternals=Ge),function(e){function t(t){var n=e.call(this)||this;return n.link=wf(t),n}s(t,e),t.prototype.request=function(e,t){return this.link.request(e,t)}}(tu);var Cf=wf((function(e){var t=e.graphQLErrors,n=e.networkError;t&&t.forEach((function(e){var t=e.message,n=e.locations,r=e.path;return console.error("[GraphQL 错误]: 消息: ".concat(t,", 位置: ").concat(n,", 路径: ").concat(r))})),n&&console.error("[网络错误]: ".concat(n))}));const Sf=new kc({link:Ec([Cf,new qu({uri:"https://your-workers-domain.workers.dev/graphql",credentials:"same-origin"})]),cache:new xf,defaultOptions:{watchQuery:{fetchPolicy:"no-cache",errorPolicy:"all"},query:{fetchPolicy:"no-cache",errorPolicy:"all"}},connectToDevTools:!0});var _f=i(208),Tf={};Tf.styleTagTransform=$l(),Tf.setAttributes=Ql(),Tf.insert=ql().bind(null,"head"),Tf.domAPI=jl(),Tf.insertStyleElement=Hl(),Ml()(_f.A,Tf),_f.A&&_f.A.locals&&_f.A.locals,o.createRoot(document.getElementById("root")).render((0,n.jsx)(r.StrictMode,{children:(0,n.jsx)((function(e){var t=e.client,n=e.children,r=H(),i=R.useContext(r),o=R.useMemo((function(){return l(l({},i),{client:t||i.client})}),[i,t]);return O(o.client,55),R.createElement(r.Provider,{value:o},n)}),{client:Sf,children:(0,n.jsx)((function(){var e=(0,r.useState)(""),t=e[0],i=e[1],o=(0,r.useState)("gpt-3.5-turbo"),a=o[0],s=o[1],u=(0,r.useState)([]),c=u[0],f=u[1],d=(0,r.useState)(!1),p=d[0],h=d[1],m=function(e,t){var n,r=R.useRef(void 0),i=R.useRef(void 0),o=R.useRef(void 0),a=$(t,r.current||{}),s=null!==(n=null==a?void 0:a.query)&&void 0!==n?n:e;i.current=t,o.current=s;var u=l(l({},a),{skip:!r.current}),c=cr(s,u),f=c.obsQueryFields,d=c.result,p=c.client,h=c.resultData,m=c.observable,y=c.onQueryExecuted,v=m.options.initialFetchPolicy||mr(u.defaultOptions,p.defaultOptions),g=R.useReducer((function(e){return e+1}),0)[1],b=R.useMemo((function(){for(var e={},t=function(t){var n=f[t];e[t]=function(){return r.current||(r.current=Object.create(null),g()),n.apply(this,arguments)}},n=0,i=Ar;n<i.length;n++)t(i[n]);return e}),[g,f]),A=!!r.current,k=R.useMemo((function(){return l(l(l({},d),b),{called:A})}),[d,b,A]),E=R.useCallback((function(e){r.current=e?l(l({},e),{fetchPolicy:e.fetchPolicy||v}):{fetchPolicy:v};var t=$(i.current,l({query:o.current},r.current)),n=function(e,t,n,r,i,o){var a=i.query||r,s=fr(n,a,i,!1)(t),l=t.reobserveAsConcast(dr(t,n,i,s));return o(s),new Promise((function(r){var i;l.subscribe({next:function(e){i=e},error:function(){r(yr(t.getCurrentResult(),e.previousData,t,n))},complete:function(){r(yr(t.maskResult(i),e.previousData,t,n))}})}))}(h,m,p,s,l(l({},t),{skip:!1}),y).then((function(e){return Object.assign(e,b)}));return n.catch((function(){})),n}),[p,s,b,v,m,h,y]),x=R.useRef(E);br((function(){x.current=E}));var w=R.useCallback((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return x.current.apply(x,e)}),[]);return[w,k]}(Fl,{onCompleted:function(e){var n={prompt:t,response:e.askOpenAI};f(Xl(Xl([],c,!0),[n],!1)),i(""),setTimeout((function(){A()}),100)}}),y=m[0],v=m[1],g=v.loading,b=v.error;(0,r.useEffect)((function(){var e=function(){h(window.scrollY>300)};return window.addEventListener("scroll",e),function(){return window.removeEventListener("scroll",e)}}),[]);var A=function(){window.scrollTo({top:document.body.scrollHeight,behavior:"smooth"})};return(0,n.jsxs)("div",{className:"container",children:[(0,n.jsxs)("header",{className:"header",children:[(0,n.jsx)("h1",{children:"OpenAI GraphQL 客户端"}),(0,n.jsx)("p",{children:"通过Cloudflare Workers GraphQL API查询OpenAI"})]}),(0,n.jsxs)("div",{className:"model-selector",children:[(0,n.jsx)("label",{htmlFor:"model-select",children:"选择模型："}),(0,n.jsxs)("select",{id:"model-select",value:a,onChange:function(e){return s(e.target.value)},children:[(0,n.jsx)("option",{value:"gpt-3.5-turbo",children:"GPT-3.5 Turbo"}),(0,n.jsx)("option",{value:"gpt-4",children:"GPT-4"}),(0,n.jsx)("option",{value:"gpt-4-turbo",children:"GPT-4 Turbo"})]})]}),(0,n.jsxs)("form",{className:"prompt-form",onSubmit:function(e){e.preventDefault(),t.trim()&&y({variables:{prompt:t.trim(),model:a}})},children:[(0,n.jsx)("textarea",{value:t,onChange:function(e){i(e.target.value),e.target.style.height="auto",e.target.style.height="".concat(Math.min(e.target.scrollHeight,300),"px")},placeholder:"输入你的问题...",rows:3,disabled:g}),(0,n.jsxs)("button",{type:"submit",disabled:g||!t.trim(),children:[g?"请求中...":"发送请求",g&&(0,n.jsx)("span",{className:"loading"})]})]}),b&&(0,n.jsx)("div",{className:"error-message",children:(0,n.jsxs)("p",{children:["请求出错：",b.message]})}),(0,n.jsx)("div",{className:"conversations",children:c.map((function(e,t){return(0,n.jsxs)("div",{className:"conversation-item",children:[(0,n.jsxs)("div",{className:"prompt-container",children:[(0,n.jsx)("strong",{children:"问题："}),(0,n.jsx)("p",{children:e.prompt})]}),(0,n.jsxs)("div",{className:"response-container",children:[(0,n.jsx)("strong",{children:"回答："}),e.response?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{className:"response-content",children:(0,n.jsx)(Rs,{children:e.response.text})}),(0,n.jsxs)("div",{className:"response-metadata",children:[(0,n.jsxs)("span",{children:["模型：",e.response.metadata.model]}),(0,n.jsxs)("span",{children:["标记数：",e.response.usage.totalTokens]})]})]}):(0,n.jsx)("p",{children:"加载中..."})]})]},t)}))}),p&&(0,n.jsx)("button",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top","aria-label":"返回顶部",children:(0,n.jsx)("i",{className:"fas fa-arrow-up"})})]})}),{})})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,